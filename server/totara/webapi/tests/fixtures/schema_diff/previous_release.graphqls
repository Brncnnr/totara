# Totara-17.3 (Build: 20230130.00)
"""Core mutation type"""
type Mutation {
  """Placeholder mutation because Mutation type declaration can't be empty"""
  placeholder_mutation: Boolean

  """Marks a self-completing course as complete"""
  core_completion_course_self_complete(courseid: core_id!): Boolean!

  """Toggles completion for a self-completing activity"""
  core_completion_activity_self_complete(cmid: core_id!, complete: Boolean!): Boolean!

  """Mark an activity as view"""
  core_completion_activity_view(cmid: core_id!, activity: String!): Boolean!

  """
  Mark a course as viewed for the current user
  The course_id is mandatory, and the current user must be able to access the course
  The section_id is optional, but if given must be the id of a section within the given course_id
  """
  core_course_view(course_id: core_id!, section_id: core_id): Boolean!

  """
  A mutation to fetch the unused draft item id.
  This is mutation because, if it is a query, apollo-client will try to squeeze
  the multiple requests into one - as they are identical to each other.
  Hence, mutation will be better because it will assure that each of query within multiple
  instnaces to be executed.
  
  Note that: `fetchPolicy: 'no-cache'` does not help at all.
  """
  core_file_unused_draft_item_id: Int!

  """Update settings for specific theme."""
  core_update_theme_settings(theme: param_component!, tenant_id: core_id, categories: [core_theme_category_input!]!, files: [core_theme_file_input!]!): core_theme_settings_result!

  """Send test notification email."""
  core_theme_settings_send_email_notification(html_header: String!, html_footer: String!, text_footer: String!, tenant_id: core_id): Boolean

  """Create a new user."""
  core_user_create_user(
    """Input object specifying data for the new user."""
    input: core_user_create_user_input!
  ): core_user_user_result!

  """
  Update the specified target user with new properties.
  Note: a service account making a request cannot suspend its own user account.
  """
  core_user_update_user(
    """User to be updated."""
    target_user: core_user_user_reference!

    """Input object specifying data for updating the user."""
    input: core_user_update_user_input!
  ): core_user_user_result!

  """
  Delete the target user.
  Note: a service account making a request cannot delete its own user account.
  """
  core_user_delete_user(
    """Target user which is being deleted."""
    target_user: core_user_user_reference!
  ): core_user_delete_user_result!

  """
  Attempt to enrol the current user in a course via self-enrolment instance
  """
  core_enrol_attempt_self_enrolment(input: core_enrol_attempt_self_enrolment_input!): core_enrol_attempt_self_enrolment_result!

  """Action"""
  mod_approval_application_action(input: mod_approval_application_action_input!): mod_approval_application_result!

  """Clone"""
  mod_approval_application_clone(input: mod_approval_application_input!): mod_approval_application_result!

  """Deletion"""
  mod_approval_application_delete(input: mod_approval_application_input!): Boolean!

  """Publish the form data. Only available while in-approvals."""
  mod_approval_application_publish(input: mod_approval_application_publish_input!): mod_approval_application_result!

  """
  Save as draft. Doesn't perform validation. Only available if not submitted.
  """
  mod_approval_application_save_as_draft(input: mod_approval_application_save_input!): mod_approval_application_result!

  """Submit the application."""
  mod_approval_application_submit(input: mod_approval_application_save_input!): mod_approval_application_result!

  """Create a new application"""
  mod_approval_create_application(input: mod_approval_create_application_input!): mod_approval_create_application_result!

  """Archive an override assignment."""
  mod_approval_archive_override_assignment(input: mod_approval_archive_override_assignment_input!): mod_approval_archive_override_assignment_result!

  """Create an assignment"""
  mod_approval_assignment_manage(input: mod_approval_assignment_manage_input!): mod_approval_assignment_result!

  """Set the approvers in one approval level of an assignment."""
  mod_approval_assignment_set_level_approvers(input: mod_approval_assignment_set_level_approvers_input!): mod_approval_success_result!

  """Archive"""
  mod_approval_workflow_archive(input: mod_approval_workflow_input!): mod_approval_workflow_result!

  """Clone an existing workflow"""
  mod_approval_workflow_clone(input: mod_approval_workflow_clone_input!): mod_approval_workflow_clone_result!

  """Create a workflow"""
  mod_approval_workflow_create(input: mod_approval_workflow_create_input!): mod_approval_workflow_result!

  """Deletion"""
  mod_approval_workflow_delete(input: mod_approval_workflow_input!): Boolean!

  """Edit"""
  mod_approval_workflow_edit(input: mod_approval_workflow_edit_input!): mod_approval_workflow_result!

  """Shuffle levels"""
  mod_approval_workflow_reorder_levels(input: mod_approval_workflow_reorder_levels_input!): mod_approval_workflow_stage_result!

  """Add approval level to workflow stage"""
  mod_approval_workflow_stage_add_approval_level(input: mod_approval_workflow_stage_add_approval_level_input!): mod_approval_workflow_approval_level_result!

  """Configure visibility of form fields in a specific stage."""
  mod_approval_workflow_stage_configure_formviews(input: mod_approval_workflow_stage_configure_formviews_input!): mod_approval_workflow_stage_result!

  """Delete a stage"""
  mod_approval_workflow_stage_delete(input: mod_approval_workflow_stage_input!): mod_approval_workflow_result!

  """Delete approval level to workflow stage"""
  mod_approval_workflow_stage_delete_approval_level(input: mod_approval_workflow_stage_delete_approval_level_input!): mod_approval_workflow_stage_result!

  """Edit workflow stage"""
  mod_approval_workflow_stage_edit(input: mod_approval_workflow_stage_edit_input!): mod_approval_workflow_stage_result!

  """Edit workflow stage approval level"""
  mod_approval_workflow_stage_edit_approval_level(input: mod_approval_workflow_stage_edit_approval_level_input!): mod_approval_workflow_approval_level_result!

  """Configure a transition on an interaction"""
  mod_approval_workflow_stage_interaction_configure_transition(input: mod_approval_workflow_stage_interaction_transition_input!): mod_approval_workflow_stage_interaction_transition_result!

  """Unarchive"""
  mod_approval_workflow_unarchive(input: mod_approval_workflow_input!): mod_approval_workflow_result!

  """Add a stage to a workflow version"""
  mod_approval_workflow_version_add_stage(input: mod_approval_workflow_version_add_stage_input!): mod_approval_workflow_stage_result!

  """Publish version"""
  mod_approval_workflow_version_publish(input: mod_approval_workflow_version_publish_input!): mod_approval_workflow_result!
  mod_contentmarketplace_set_self_completion(cm_id: core_id!, status: param_boolean!): Boolean!
  mod_contentmarketplace_request_non_interactive_enrol(cm_id: core_id!): Boolean!

  """Create an activity"""
  mod_perform_create_activity(name: String!, description: String, type: core_id!): mod_perform_activity_result!

  """Update an activity"""
  mod_perform_update_activity(
    activity_id: core_id!
    name: String!
    description: String
    type_id: core_id
    anonymous_responses: param_boolean
    visibility_condition: param_integer

    """
    Deprecated since Totara 16
    Use the mod_perform_update_manual_relationship_selectors mutation instead
    """
    relationships: [mod_perform_activity_manual_relationship_selection_input!]
  ): mod_perform_activity_result!

  """Activate an activity"""
  mod_perform_activate_activity(input: mod_perform_activate_activity_input!): mod_perform_activate_activity_result!

  """Clone an activity"""
  mod_perform_clone_activity(input: mod_perform_clone_activity_input!): mod_perform_clone_activity_result!

  """Delete an activity"""
  mod_perform_delete_activity(input: mod_perform_delete_activity_input!): Boolean!

  """Update an activity setting: close on completion."""
  mod_perform_toggle_activity_close_on_completion_setting(input: toggle_activity_setting!): mod_perform_activity! @deprecated(reason: "Use mod_perform_update_activity_workflow_settings instead")

  """Close existing subject instances in an activity"""
  mod_perform_close_activity_subject_instances(input: mod_perform_close_activity_subject_instances_input!): Boolean!

  """Update an activities workflow settings"""
  mod_perform_update_activity_workflow_settings(input: workflow_settings): mod_perform_activity

  """
  Set perform_sync_participant_instance_creation and perform_sync_participant_instance_closure per activity
  """
  mod_perform_override_global_participation_settings(input: mod_perform_override_global_participation_settings_input!): Boolean!

  """Updates settings (including relationships) of given section"""
  mod_perform_update_section_settings(input: update_section_settings_input!): mod_perform_section_result!

  """
  Update the elements in a section
  
  Deprecated since Totara 14: Use the individual mutations for managing section elements.
  """
  mod_perform_update_section_elements(input: mod_perform_update_section_elements_input!): mod_perform_section_result!

  """
  Update an activity setting: multisection. Toggles on and off whether the
  activity has a single section or multiple sections.
  """
  mod_perform_toggle_activity_multisection_setting(input: toggle_activity_setting!): mod_perform_activity!

  """Adds a new section at the end"""
  mod_perform_add_section(input: mod_perform_add_section_input!): mod_perform_add_section_result!

  """
  Move an element to a different section
  Currently, the target section must belong to the same activity as the source section. In future, this
  criteria could be relaxed.
  """
  mod_perform_move_element_to_section(input: mod_perform_move_element_to_section_input!): mod_perform_move_element_to_section_result!

  """Delete a section"""
  mod_perform_delete_section(input: mod_perform_delete_section_input!): Boolean!

  """Manually set participant section availability."""
  mod_perform_manually_change_participant_section(input: mod_perform_manually_change_participant_section_input!): mod_perform_manually_change_participant_section_result!

  """Manually set participant instance availability."""
  mod_perform_manually_change_participant_instance(input: mod_perform_manually_change_participant_instance_input!): mod_perform_manually_change_participant_instance_result!

  """Manually set subject instance availability."""
  mod_perform_manually_change_subject_instance(input: mod_perform_manually_change_subject_instance_input!): mod_perform_manually_change_subject_instance_result!

  """Manually delete participant instance"""
  mod_perform_manually_delete_participant_instance(input: mod_perform_manually_delete_participant_input!): Boolean!

  """Manually delete subject instance"""
  mod_perform_manually_delete_subject_instance(input: mod_perform_manually_delete_subject_input!): Boolean!

  """
  Deprecated since Totara 13.2
  Use mod_perform_toggle_notification instead
  """
  mod_perform_create_notification(input: mod_perform_create_notification_input!): mod_perform_create_notification_result!

  """Activate or deactivate a notification"""
  mod_perform_toggle_notification(input: mod_perform_toggle_notification_input!): mod_perform_create_notification_result!

  """Activate or deactivate a notification recipient"""
  mod_perform_toggle_notification_recipient(input: mod_perform_toggle_notification_recipient_input!): mod_perform_create_notification_result!

  """Set trigger values"""
  mod_perform_update_notification_triggers(input: mod_perform_update_notification_triggers_input!): mod_perform_create_notification_result!
  mod_perform_add_participants(input: mod_perform_add_participants_input!): mod_perform_add_participants_result!

  """Create a child element for a perform element."""
  mod_perform_create_child_element(input: mod_perform_create_child_element_input!): mod_perform_create_child_element_result!

  """Updates a perform element."""
  mod_perform_update_child_element(input: mod_perform_update_child_element_input!): mod_perform_update_child_element_result!

  """Deletes a perform child element."""
  mod_perform_delete_child_element(input: mod_perform_delete_child_element_input!): mod_perform_delete_child_element_result!

  """Reorder a perform child element within it's parent."""
  mod_perform_reorder_child_element(input: mod_perform_reorder_child_element_input!): mod_perform_reorder_child_element_result!

  """
  Set the participant users for the manual relationships of a subject instance.
  """
  mod_perform_set_manual_participants(subject_instance_id: core_id!, participants: [mod_perform_set_manual_participants_input!]!): mod_perform_set_manual_participants_result!

  """Set the allowed roles who can select manual relationships."""
  mod_perform_set_manual_relationship_selector_roles(input: mod_perform_manual_relationship_selector_roles!): mod_perform_set_manual_participants_result!

  """Update the responses in a section"""
  mod_perform_update_section_responses(input: mod_perform_update_section_responses_input!): mod_perform_response_update_section_result

  """Update the responses in a section as an external user"""
  mod_perform_update_section_responses_external_participant(input: mod_perform_update_section_responses_external_participant_input!): mod_perform_response_update_section_result

  """Create a perform element and link to section."""
  mod_perform_create_element_in_section(input: mod_perform_create_element_in_section_input!): mod_perform_section_result!

  """Updates an element linked to a section and returns the section."""
  mod_perform_update_element_in_section(input: mod_perform_update_element_in_section_input!): mod_perform_section_result!

  """Delete a section element."""
  mod_perform_delete_section_element(input: mod_perform_delete_section_element_input!): mod_perform_section_result!

  """Reorder a section element within a section."""
  mod_perform_reorder_section_element(input: mod_perform_reorder_section_element_input!): mod_perform_section_result!

  """Add track assignments to a given track"""
  mod_perform_add_track_assignments(assignments: mod_perform_track_assignments_input!): mod_perform_track!

  """Remove track assignments"""
  mod_perform_remove_track_assignments(assignments: mod_perform_track_assignments_input!): mod_perform_track!

  """Set the assignment schedule for a track"""
  mod_perform_update_track_schedule(track_schedule: mod_perform_track_schedule_input!): mod_perform_update_track_schedule_result!

  """Save offline SCORM attempts"""
  mod_scorm_save_offline_attempts(scormid: core_id!, attempts: [mod_scorm_attempt!]!): mod_scorm_save_offline_attempts_result!

  """Mark a popup message as read (or unread)"""
  message_popup_mark_messages_read(input: message_popup_mark_messages_read_input): message_popup_mark_messages_read_result!

  """Create a new API client."""
  totara_api_create_client(input: totara_api_client_input!): totara_api_client!

  """
  Update an existing api client. It is not possible to update the tenant_id of an existing client.
  """
  totara_api_update_client(input: totara_api_update_client_input!): totara_api_client!

  """Delete an API client by id."""
  totara_api_delete_client(id: core_id!): Boolean!

  """Update status for an API client."""
  totara_api_set_client_status(id: core_id!, status: Boolean!): totara_api_client!

  """Update API client settings."""
  totara_api_update_client_settings(input: totara_api_client_setting_input!): totara_api_client_settings!
  totara_comment_create_comment(
    content: String!
    component: param_component!
    area: param_area!
    instanceid: param_integer!
    format: param_integer

    """
    For handling the saving of files. If this is left empty then there are no files to save.
    """
    draft_id: param_integer
  ): totara_comment_comment
  totara_comment_update_comment(
    id: param_integer!
    format: param_integer
    content: String!

    """
    For handling the saving of files. If this is left empty then there are no files to save.
    """
    draft_id: param_integer
  ): totara_comment_comment!
  totara_comment_update_reply(
    id: param_integer!
    format: param_integer
    content: String!

    """
    For handling the saving of files. If this is left empty then there are no files to save.
    """
    draft_id: param_integer
  ): totara_comment_reply!
  totara_comment_delete_comment(id: param_integer!): totara_comment_comment!
  totara_comment_delete_reply(id: param_integer!): totara_comment_reply!

  """Mutation to create a reply, which its parent is the comment's id."""
  totara_comment_create_reply(
    commentid: param_integer!
    content: String!
    format: param_integer

    """
    For handling the saving of files. If this is left empty then there are no files to save.
    """
    draft_id: param_integer
  ): totara_comment_reply!

  """Creates new assignments for the user"""
  totara_competency_create_user_assignments(user_id: core_id!, competency_ids: [core_id!]!): [totara_competency_assignment!]!

  """Archives user competency assignments."""
  totara_competency_archive_user_assignment(assignment_id: core_id!): totara_competency_archive_user_assignment_result

  """
  Update or unset the minimum proficiency value override for one or many competency assignments.
  A null scale_value_id unsets the override.
  """
  totara_competency_update_min_proficiency_override_for_assignments(input: totara_competency_assignment_min_proficiency_override_input): totara_competency_assignment_min_proficiency_override_result

  """Copies pathway(s) from a reference competency to others."""
  totara_competency_copy_pathway(input: totara_competency_copy_pathway_input!): totara_competency_copy_pathway_result!
  totara_core_delete_draft_file(draftid: param_integer!, filename: String!): totara_core_delete_draft_file_result!
  totara_engage_update_bookmark(itemid: param_integer!, component: param_component!, bookmarked: param_boolean!): Boolean!
  totara_engage_unshare(item_id: param_integer!, component: param_component!, recipient_id: param_integer!): Boolean!

  """Share specific item."""
  totara_engage_share(itemid: param_integer!, component: param_component!, recipients: [totara_engage_recipient_in!]!): totara_engage_share_totals!

  """Share multiple items to same recipient."""
  totara_engage_share_with_recipient(items: [totara_engage_share_item!]!, recipient: totara_engage_recipient_in!): Boolean!

  """Creates a new job assignment."""
  totara_job_create_job_assignment(
    """Input object specifying data for creating the new job assignment."""
    input: totara_job_create_job_assignment_input!
  ): totara_job_create_job_assignment_result!

  """Updates a specific target job assignment with new properties."""
  totara_job_update_job_assignment(
    """The job assignment that should be updated."""
    target_job: totara_job_job_assignment_reference!

    """Input object specifying data for updating the job assignment."""
    input: totara_job_update_job_assignment_input!
  ): totara_job_update_job_assignment_result!

  """Mutation to delete a job assignment."""
  totara_job_delete_job_assignment(
    """Input provided for identifying the job assignment."""
    target_job: totara_job_job_assignment_reference!
  ): totara_job_delete_job_assignment_result!

  """
  Moves a job assignment to a new position.
  newposition is a 0 index.
  """
  totara_job_move_assignment(userid: core_id!, assignmentid: core_id!, newposition: param_integer!): Boolean!

  """
  Sorts job assignments, given the job assignment ids in the order you want them to be sorted in
  """
  totara_job_sort_assignments(userid: core_id!, assignmentids: [core_id!]!): Boolean!

  """
  Deletes a job assignment
  It is the callers responsibility to ensure the user has confirmed their intent to delete the job assignment.
  """
  totara_job_delete_assignment(userid: core_id!, assignmentid: core_id!): Boolean!

  """Creates a job assignment"""
  totara_job_create_assignment(userid: core_id!, idnumber: String!, fullname: String, shortname: String, description: String, positionid: core_id, organisationid: core_id, startdate: core_date, enddate: core_date, managerjaid: core_id, tempmanagerjaid: core_id, tempmanagerexpirydate: core_date, appraiserid: core_id, totarasync: param_boolean): core_id!

  """Delete current mobile device registration"""
  totara_mobile_delete_device: Boolean!

  """Set the fcm token for the current device"""
  totara_mobile_set_fcmtoken(token: String): Boolean!

  """Request secret key for new webview"""
  totara_mobile_create_webview(url: String!): String!

  """Delete previously requested webview"""
  totara_mobile_delete_webview(secret: String!): Boolean!

  """Manually mark an activity as complete or incomplete"""
  totara_mobile_completion_activity_self_complete(cmid: core_id!, complete: Boolean!): Boolean!

  """Manually mark as course as self-completed"""
  totara_mobile_completion_course_self_complete(courseid: core_id!): Boolean!

  """Mark one or more popup messages as read"""
  totara_mobile_mark_messages_read(input: message_popup_mark_messages_read_input): message_popup_mark_messages_read_result!

  """Mark an activity as viewed"""
  totara_mobile_completion_activity_view(cmid: core_id!, activity: String!): Boolean!

  """
  Mark a course as viewed for the current user
  The course_id is mandatory, and the current user must be able to access the course
  The section_id is optional, but if given must be the id of a section within the given course_id
  """
  totara_mobile_course_view(course_id: core_id!, section_id: core_id): Boolean!

  """
  Mark a program as viewed for the current user, the program_id is mandatory
  """
  totara_mobile_program_view(program_id: core_id!): Boolean!

  """
  Update the delivery channels attached to the specific event resolver (in the system context).
  """
  totara_notification_update_default_delivery_channels(
    """Notifiable event resolver class name"""
    resolver_class_name: param_text!

    """
    Default delivery channels to enable. Any delivery channel not referenced will be disabled.
    """
    default_delivery_channels: [String!]!
  ): [totara_notification_delivery_channel!]!

  """
  Update the delivery channels attached to the specific event resolver and the user (in the provided context).
  """
  totara_notification_update_notifiable_event_user_delivery_channels(
    """Notifiable event resolver class name"""
    resolver_class_name: param_text!

    """
    Delivery channels to set. Accepts either a collection of channel strings to enable, or null to fall back to defaults.
    """
    delivery_channels: [String!]

    """ID of the user this preference belongs to"""
    user_id: param_integer

    """
    Context to update enabled in.
    Note: Only the system context is accepted currently.
    """
    extended_context: totara_notification_extended_context_input

    """ID of the user preference record if it already exists"""
    user_preference_id: param_integer
  ): totara_notification_notifiable_event_user_preference!
  totara_notification_toggle_notifiable_event(
    """Notifiable event resolver class name"""
    resolver_class_name: param_text!

    """
    Context to update enabled in.
    Note: Only the system context is accepted currently.
    """
    extended_context: totara_notification_extended_context_input

    """Enabled status to set"""
    is_enabled: param_boolean
  ): totara_notification_event_resolver!
  totara_notification_toggle_notifiable_event_v2(
    """Notifiable event resolver class name"""
    resolver_class_name: param_text!

    """
    Context to update enabled in.
    Note: Only the system context is accepted currently.
    """
    extended_context: totara_notification_extended_context_input

    """Enabled status to set"""
    is_enabled: param_boolean
  ): totara_notification_event_resolver_v2!
  totara_notification_update_notifiable_event_user_preference(
    """Notifiable event resolver class name"""
    resolver_class_name: param_text!

    """Enabled status to set"""
    is_enabled: param_boolean!

    """ID of the user this preference belongs to"""
    user_id: param_integer

    """
    Context to update enabled in.
    Note: Only the system context is accepted currently.
    """
    extended_context: totara_notification_extended_context_input

    """ID of the user preference record if it already exists"""
    user_preference_id: param_integer
  ): totara_notification_notifiable_event_user_preference!
  totara_notification_create_notification_preference(
    """
    The event resolver's name that this notification preference is
    set for MUST be provided.
    """
    resolver_class_name: param_text!

    """
    Extended context MUST be provided, in order to create the notification preference
    within that context. Note that the context's id for this extended_context can be fallback
    to the context system if none is provided.
    """
    extended_context: totara_notification_extended_context_input!

    """
    If ancestor_id is provided, then we would know that this notification preference
    is overriding one of the notification preference at under context.
    """
    ancestor_id: param_integer
    title: String
    additional_criteria: String
    body: String
    body_format: param_integer
    subject: String
    schedule_offset: param_integer
    schedule_type: param_text
    subject_format: param_integer
    enabled: param_boolean

    """
    The class_name of recipient for the custom notification. Able to be set to
    null, ONLY if this very notification preference can fallback to the parent,
    or the system built in notification that has a default value.
    """
    recipient: param_text

    """
    An array of delivery channel's identifier names. It is optional to be provided.
    """
    forced_delivery_channels: [param_text!]
  ): totara_notification_notification_preference!

  """Mutation to update the notification preference, by the 'id' field."""
  totara_notification_update_notification_preference(
    id: param_integer!

    """
    Note that these fields bellow are able to set to null.
    Only if this very notification preference can fallback to the parent, or
    the system built in notification that has default values.
    """
    body: String
    body_format: param_integer
    title: String
    additional_criteria: String
    subject: String
    schedule_offset: param_integer
    schedule_type: param_text
    subject_format: param_integer
    recipient: param_text
    enabled: param_boolean
    forced_delivery_channels: [param_text!]
  ): totara_notification_notification_preference!

  """
  This mutation is about validating the input data from
  the client side when user is trying to create a new custom notification.
  Even though it is under mutation, but it will not cause any state change in the system.
  """
  totara_notification_validate_notification_preference_input(
    """
    We use String because we want to validate all sort of data, before any
    param_{what_ever} stripped out the value.
    
    This apply for the other fields of this mutation.
    """
    title: String!
    body: String!
    subject: String!
    schedule_type: String!
    schedule_offset: Int!
    enabled: Boolean
  ): [totara_notification_notification_preference_validation_result]!

  """Mutation to delete the notification preference, by the 'id' field."""
  totara_notification_delete_notification_preference(id: param_integer!): Boolean!
  totara_notification_create_notification_preference_v2(input: totara_notification_create_notification_preference_v2_input!): totara_notification_notification_preference_v2!
  totara_notification_update_notification_preference_v2(input: totara_notification_update_notification_preference_v2_input!): totara_notification_notification_preference_v2!

  """This mutation is creating a provider based on user input"""
  totara_oauth2_create_provider(input: totara_oauth2_provider_input!): totara_oauth2_client_provider!

  """This mutation is deleting a provider"""
  totara_oauth2_delete_provider(id: core_id!): Boolean!
  totara_playlist_create(name: String!, summary: String, summary_format: param_integer, access: totara_engage_access, contextid: param_integer, topics: [param_integer!], shares: [totara_engage_recipient_in!]): totara_playlist_playlist
  totara_playlist_update(id: param_integer!, name: String, summary: String, summary_format: param_integer, access: totara_engage_access, topics: [param_integer!], shares: [totara_engage_recipient_in!]): totara_playlist_playlist
  totara_playlist_delete(id: param_integer!): Boolean!
  totara_playlist_add_resources(playlistid: param_integer!, resources: [param_integer!]!): Boolean!
  totara_playlist_add_rating(playlistid: param_integer!, rating: Int!, ratingarea: String!): Boolean!
  totara_playlist_update_order(id: param_integer!, instanceid: param_integer!, order: param_integer!): Boolean!
  totara_playlist_remove_resource(id: param_integer!, instanceid: param_integer!): Boolean!

  """
  Mark a program as viewed for the current user, the program_id is mandatory
  """
  totara_program_program_view(program_id: core_id!): Boolean!
  totara_reaction_create(component: param_component!, area: param_area!, instanceid: param_integer!): totara_reaction_reaction!
  totara_reaction_delete(component: param_component!, area: param_area!, instanceid: param_integer!): Boolean!

  """Changes the title of a report"""
  totara_reportbuilder_update_report_title(reportid: core_id!, title: String!): String!

  """Creates a report from template"""
  totara_reportbuilder_create_report_from_template(key: param_alphanumext!): core_id!

  """Creates a report"""
  totara_reportbuilder_create_report(key: param_alphanumext!): core_id!
  totara_reportedcontent_create_review(component: param_component!, area: param_area, item_id: param_integer!, url: param_url!): totara_reportedcontent_review_create_status!
  totara_reportedcontent_approve_review(review_id: param_integer!): totara_reportedcontent_review
  totara_reportedcontent_remove_review(review_id: param_integer!): totara_reportedcontent_review

  """Delete an existing scheduled rule by ID."""
  totara_useraction_delete_scheduled_rule(id: core_id!): Boolean!

  """Create a new scheduled rule."""
  totara_useraction_create_scheduled_rule(input: totara_useraction_scheduled_rule_input!): totara_useraction_scheduled_rule!

  """Update an existing scheduled rule."""
  totara_useraction_update_scheduled_rule(input: totara_useraction_update_scheduled_rule_input!): totara_useraction_scheduled_rule!

  """Mutation for update the content of discussion."""
  container_workspace_update_discussion(
    """The discussion's id that we are going to update"""
    id: param_integer!
    content_format: param_integer
    content: String!

    """The file storage item's id which it is used to save the files."""
    draft_id: param_integer
  ): container_workspace_discussion!

  """Mutation for create new discussion."""
  container_workspace_create_discussion(
    """Workspace's id where this discussion belongs to."""
    workspace_id: param_integer!
    content: String!

    """If this field is null, it will use the FORMAT_JSON_EDITOR"""
    content_format: param_integer

    """The file storage item's id which it is used to save the files."""
    draft_id: param_integer
  ): container_workspace_discussion!

  """Mutation for deleting the discussion within a workspace."""
  container_workspace_delete_discussion(
    """The discussion's id that we are going to delete."""
    id: param_integer!
  ): Boolean!

  """
  A mutation that is being used when a user want to join to specific workspace.
  """
  container_workspace_join(workspace_id: param_integer!): container_workspace_member!

  """A mutation to bulk add user(s) to the workspace."""
  container_workspace_add_members(workspace_id: param_integer!, user_ids: [param_integer!]!): [container_workspace_member!]!

  """
  Mutation used for leaving a workspace. However, this will make the member's status become SUSPENDED.
  """
  container_workspace_leave(workspace_id: param_integer!): container_workspace_member!

  """
  Mutation used for removing a user. This should be used by either admin or the owner of the workspace.
  """
  container_workspace_remove_member(
    """Workspace's id that a user is being removed from."""
    workspace_id: param_integer!

    """The target user that being removed from."""
    user_id: param_integer!
  ): Boolean!

  """Mutation to create a member request to join the workspace."""
  container_workspace_create_member_request(workspace_id: param_integer!, request_content: String): container_workspace_member_request!

  """
  A mutation to do either accept/decline the request to join workspace.
  Note that only user with the right ability is able to do so.
  """
  container_workspace_update_member_request(
    """Member request's id."""
    id: param_integer!

    """
    The status to tell whether the member request is going to be in state:
    * Accepted
    * Declined
    """
    new_status: container_workspace_member_request_status!

    """The message is from user input when member request get declined"""
    decline_content: String
  ): container_workspace_member_request!

  """
  A mutation to cancel the request on a specific workspace - given by $workspace_id.
  """
  container_workspace_cancel_member_request(workspace_id: param_integer!): container_workspace_member_request!

  """
  Mutation to change the current primary owner of the workspace to someone else.
  Then return a member record.
  """
  container_workspace_change_primary_owner(
    workspace_id: param_integer!

    """New user that we want to change to."""
    user_id: param_integer!
  ): container_workspace_member!

  """
  Add members of given audience(s) to the workspace
  @deprecated since Totara 16: Feature has been deprecated in favor of add audiences.
  """
  container_workspace_add_bulk_audience_members(input: container_workspace_add_bulk_audience_members_input!): container_workspace_add_bulk_audience_members_result! @deprecated(reason: "Bulk add audience members has been deprecated in favor of add audiences")

  """Enable the specified audiences to sync members with the workspace"""
  container_workspace_add_audiences(input: container_workspace_add_audiences_input!): container_workspace_add_audiences_result!

  """Remove the specific audience from the workspace"""
  container_workspace_remove_audience(input: container_workspace_remove_audience_input!): container_workspace_remove_audience_result!

  """A mutation to turn on/off notifications within a specific workspace."""
  container_workspace_switch_notification(workspace_id: param_integer!, status: container_workspace_notification_status!): Boolean!

  """Mutation to create a workspace."""
  container_workspace_create(
    name: String!
    description: String
    description_format: param_integer

    """Whether to tell if the workspace is the private workspace or not."""
    private: param_boolean!

    """
    Only works if the workspace is a private one. Otherwise exception will be thrown.
    """
    hidden: param_boolean!

    """If this is set, then we have uploaded image to process."""
    draft_id: param_integer
  ): container_workspace_workspace!

  """Mutation to update the workspace."""
  container_workspace_update(
    id: param_integer!
    name: String

    """
    If it is null, then most likely the user wants to set it null.
    Only if the mutation does not specify the field then nothing will be updated.
    """
    description: String

    """
    This field is null-able. If it is null, it will fallback to the latest format value set in the
    database's record.
    """
    description_format: param_integer
    draft_id: param_integer
    private: param_boolean
    hidden: param_boolean
  ): container_workspace_workspace!

  """Mutation to delete the workspace."""
  container_workspace_delete(workspace_id: param_integer): Boolean!

  """
  Update what content is linked to the activity.
  Currently content can only be selected once.
  If content already got selected by another user this will return the information who selected it.
  """
  performelement_linked_review_update_linked_review_content(input: performelement_linked_review_update_linked_content_input!): performelement_linked_review_update_linked_review_content_result!

  """
  Prepare draft area for Weka editor
  @deprecated since 14.0 Use Get draft_area_id query instead.
  """
  performelement_long_text_prepare_draft_area(section_element_id: core_id!, participant_instance_id: core_id!): core_id!

  """Prepare draft area for Weka editor"""
  performelement_static_content_prepare_draft_area(section_id: core_id!, element_id: core_id!): Int!

  """Creates new manual ratings for the user"""
  pathway_manual_create_manual_ratings(user_id: core_id!, role: param_text!, ratings: [pathway_manual_rating_input!]!): Boolean
  pathway_perform_rating_linked_competencies_rate(input: pathway_perform_rating_linked_competencies_rate_input): pathway_perform_rating_linked_competencies_rate_result!

  """Mutation to create linkedin course."""
  contentmarketplace_linkedin_catalog_import_create_course(input: [contentmarketplace_linkedin_catalog_import_course_input!]!): contentmarketplace_linkedin_catalog_import_create_course_result!
  contentmarketplace_linkedin_catalog_import_add_activity(learning_object_id: core_id!, section_id: core_id!): contentmarketplace_linkedin_catalog_import_add_activity_result!
  engage_article_create(
    name: String!
    content: String!
    format: param_integer
    access: totara_engage_access
    timeview: totara_engage_timeview

    """An array of the topic's id."""
    topics: [param_integer!]
    shares: [totara_engage_recipient_in!]

    """This is needed to save the files for the article."""
    draft_id: param_integer
  ): engage_article_article!
  engage_article_update(
    resourceid: param_integer!
    name: String
    content: String
    format: param_integer
    access: totara_engage_access

    """An array of the topic's id"""
    topics: [param_integer!]
    timeview: totara_engage_timeview
    shares: [totara_engage_recipient_in!]

    """This is needed to save the files for the article."""
    draft_id: param_integer
  ): engage_article_article
  engage_article_delete(resourceid: param_integer!): Boolean!
  engage_survey_create(
    timeexpired: Int
    questions: [engage_survey_question_parameter!]!
    access: totara_engage_access

    """An array of the topic's id."""
    topics: [param_integer!]
    shares: [totara_engage_recipient_in!]
  ): engage_survey_survey
  engage_survey_delete(resourceid: param_integer!): Boolean!

  """Mutation for creating new answer record of the survey."""
  engage_survey_create_answer(resourceid: param_integer!, questionid: param_integer!, options: [param_integer!]): Boolean!
  engage_survey_update(resourceid: param_integer!, timeexpired: Int, questions: [engage_survey_question_parameter!], access: totara_engage_access, topics: [param_integer!], shares: [totara_engage_recipient_in!]): engage_survey_survey!

  """Goals status change"""
  hierarchy_goal_perform_linked_goals_change_status(input: hierarchy_goal_perform_linked_goals_change_status_input): hierarchy_goal_perform_linked_goals_change_status_result!
}

"""Core query type"""
type Query {
  """Placeholder query because Query type declaration can't be empty"""
  placeholder_query: Boolean
  core_cohorts(query: core_cohorts_query): core_cohorts_result!

  """Return a single course from its id if the user can access it."""
  core_course(courseid: core_id!): core_course!

  """
  Return all the current user's enrolled courses. Internally calls enrol_get_my_courses().
  """
  core_my_courses(sort: core_course_sort_order = SORTORDER): [core_course!]!

  """
  Return all courses in the specified category visible to the current user. Excludes courses inside sub-categories.
  """
  core_courses_by_parent_category(
    """The id of the category of the courses to return."""
    categoryid: core_id!

    """Order of courses to return."""
    sort: core_course_sort_order = SORTORDER
  ): [core_course!]!

  """Return a single category from its ID"""
  core_category(categoryid: core_id!): core_category!

  """
  Return all categories in the specified category visible to the current user. Excludes non-direct decendants
  (sub-sub-categories).
  """
  core_categories_by_parent_category(
    """The id of the parent category to return the children of."""
    categoryid: core_id!

    """Order of categories to return."""
    sort: core_category_sort_order = SORTORDER
  ): [core_category!]!
  core_editor(
    """
    The context's id where editor is being used.
    Default to context system if none is provided.
    """
    context_id: param_integer

    """
    The editor's format that is used to get the editor we want.
    By default format that is set in user's preference will used if none is given.
    """
    format: param_integer

    """
    Name of the front-end framework we are using.
    Only editors supporting this framework will be returned.
    """
    framework: param_alpha
  ): core_editor!

  """A query to find the hashtags base on the pattern passed."""
  core_hashtags_by_pattern(pattern: param_text!, contextid: param_integer, component: param_component, area: param_area): [core_hashtag!]!
  core_lang_strings(
    lang: param_lang!

    """
    ids argument is in the form "$identifier, $component" the same as in the 'str' mustache helper
    """
    ids: [String!]!
  ): [core_lang_string!]!
  core_get_linkmetadata(url: param_url!): core_link
  core_template(name: param_alphanumext!, component: param_component!, theme: param_theme!): String!

  """Query to get settings for specific theme."""
  core_get_theme_settings(theme: param_component!, tenant_id: core_id, draft_id: Int): core_theme_settings_result!

  """Return a users own profile information"""
  core_user_own_profile: core_user!

  """Return filtered list of users in the system."""
  core_users(query: core_users_query): core_users_result!

  """
  Return a paginated list of users in the system. Deleted users are excluded and multitenancy restrictions apply.
  """
  core_user_users(
    """Sort and pagination information to control the data returned."""
    query: core_user_users_query
  ): core_user_users_result!

  """Return a single course from its ID if the user can access it"""
  core_enrol_course_info(
    """The mandatory id of the course"""
    courseid: core_id!
  ): core_enrol_course_info

  """
  Return array of approvers for this application stage and approval level
  """
  mod_approval_application_approvers(input: mod_approval_application_approvers_input!): [core_user!]!

  """Form schema for particular application"""
  mod_approval_application_form_schema(input: mod_approval_application_input!, full_schema: Boolean): mod_approval_application_form_schema!

  """A list of the approval workflows to which the current user can apply."""
  mod_approval_create_new_application_menu(query: mod_approval_create_new_application_menu_query): [mod_approval_new_application_menu_item!]!

  """Query to load a specific application"""
  mod_approval_load_application(input: mod_approval_application_input!): mod_approval_load_application_result!

  """Query to load a specific activities"""
  mod_approval_load_application_activities(input: mod_approval_application_input!): mod_approval_load_application_activities_result!

  """A list of all applications pertaining to the current user."""
  mod_approval_my_applications(query_options: mod_approval_my_applications_input!): mod_approval_applications_page!

  """
  A list of applications the current user can see, which do not pertain to the current user
  """
  mod_approval_others_applications(query_options: mod_approval_others_applications_input!): mod_approval_applications_page!

  """Query to get ancestor assignment approval level."""
  mod_approval_ancestor_assignment_approval_levels(input: mod_approval_ancestor_assignment_approval_levels_input!): mod_approval_ancestor_assignment_approval_levels_result!

  """
  Query to get the list of already-used identifiers for a given assignment type
  """
  mod_approval_assignment_identifiers(input: mod_approval_assignment_identifiers_input!): [core_id]!

  """Query to get override assignments."""
  mod_approval_override_assignments(input: mod_approval_override_assignments_input!): mod_approval_override_assignments_page_result!

  """
  Query to get the assignment for a given assignment type and identifier
  """
  mod_approval_override_for_assignment_type(input: mod_approval_override_for_assignment_type_input!): mod_approval_workflow_assignment

  """Query to get active forms."""
  mod_approval_get_active_forms(query_options: mod_approval_active_forms_input!): mod_approval_form_page_result!

  """
  Get the users that are visible and selectable by the current user for creating an application-on-behalf.
  """
  mod_approval_selectable_applicants(input: mod_approval_selectable_applicants_input!): mod_approval_user_page!

  """
  Get the users that are visible and selectable by the current user to be assignment approvers.
  """
  mod_approval_selectable_users(input: mod_approval_selectable_users_input!): mod_approval_user_page!

  """Load a workflow for the logged in user."""
  mod_approval_load_workflow(input: mod_approval_workflow_input!): mod_approval_workflow_result!

  """Query all workflow types."""
  mod_approval_load_workflow_types(input: mod_approval_load_workflow_types_input!): mod_approval_workflow_type_result!

  """Query to get manageable workflows."""
  mod_approval_manageable_workflows(query_options: mod_approval_manageable_workflows_input!): mod_approval_workflow_page_result!

  """Check id number"""
  mod_approval_workflow_id_number_is_unique(input: mod_approval_workflow_id_number_is_unique_input!): Boolean!

  """Get a list of approval levels for a workflow stage"""
  mod_approval_workflow_stage(input: mod_approval_workflow_stage_input!): mod_approval_workflow_stage_result!

  """Get a list of options a workflow stage can transition to"""
  mod_approval_workflow_stage_move_to(input: mod_approval_workflow_stage_input!): mod_approval_workflow_stage_move_to_result!

  """
  A list of all performance activities that the current user can administer
  """
  mod_perform_activities(query_options: mod_perform_activities_input): [mod_perform_activity!]!

  """
  A paginated list of performance activities that the current user can administer
  """
  mod_perform_paginated_activities(query_options: mod_perform_activity_page_input!): mod_perform_activity_page!

  """
  A list of all performance activities that the current user can manage participants on
  """
  mod_perform_participant_manageable_activities: [mod_perform_activity!]!

  """This query returns a single performance activity"""
  mod_perform_activity(activity_id: core_id!): mod_perform_activity

  """
  The number of users that will be assigned to an activity upon activation
  """
  mod_perform_activity_users_to_assign_count(activity_id: core_id!): Int

  """A list of all element types that can be used to create elements"""
  mod_perform_element_plugins: [mod_perform_element_plugin!]!

  """A list of reportable activities"""
  mod_perform_reportable_activities: [mod_perform_activity!]!

  """A list of reportable element_identifiers"""
  mod_perform_reportable_element_identifiers: [mod_perform_element_identifier!]!

  """A particular participant instance"""
  mod_perform_participant_instance(participant_instance_id: core_id!): mod_perform_participant_instance

  """
  A list of all performance activities the current user is participating in.
  This can be filtered to show only the ones the user is the subject in and
  the ones the user is not the subject in but participating.
  """
  mod_perform_my_subject_instances(filters: mod_perform_subject_instance_filters, options: mod_perform_subject_instance_options, pagination: core_pagination_input): mod_perform_subject_sections_page!

  """
  A specific performance activity (perform_subject_instance) a user is participating in
  """
  mod_perform_subject_instance_for_participant(subject_instance_id: core_id!): mod_perform_subject_instance

  """
  A specific performance activity (perform_subject_instance) a user is participating in
  only accessible for external users with a valid token
  """
  mod_perform_subject_instance_for_external_participant(subject_instance_id: core_id!, token: String): mod_perform_subject_instance

  """Get a single element"""
  mod_perform_element(element_id: core_id): mod_perform_element

  """
  A list of all legacy appraisal/feedback360 activities the current user is participating in that are about them.
  """
  mod_perform_historic_activities: [mod_perform_historic_activity!]!

  """
  A list of all legacy appraisal/feedback360 activities the current user is participating in that are about another user.
  """
  mod_perform_other_historic_activities: [mod_perform_other_historic_activity!]!

  """
  This returns section list which is referencing elements in a specific activity
  """
  mod_perform_activity_deletion_validation(input: mod_perform_activity_deletion_validation_input!): mod_perform_deletion_check

  """
  This returns section list which is referencing elements in a specific section
  """
  mod_perform_section_deletion_validation(input: mod_perform_section_deletion_validation_input!): mod_perform_deletion_check

  """
  This returns section list which is referencing a specific section element
  """
  mod_perform_element_deletion_validation(input: mod_perform_section_element_deletion_validation_input!): mod_perform_deletion_check

  """A section of elements for an admin to configure"""
  mod_perform_section_admin(section_id: core_id!): mod_perform_section

  """A section of elements for a user to respond to"""
  mod_perform_participant_section(participant_instance_id: core_id, participant_section_id: core_id): mod_perform_participant_section

  """All participant sections in a participant instance"""
  mod_perform_participant_sections(participant_instance_id: core_id): [mod_perform_participant_section]

  """A section of elements for an external user to respond to"""
  mod_perform_participant_section_external_participant(token: String!, participant_instance_id: core_id, participant_section_id: core_id): mod_perform_participant_section

  """A view-only version of a section for someone who is not a participant"""
  mod_perform_view_only_section_responses(section_id: core_id, subject_instance_id: core_id!): mod_perform_view_only_section

  """Return a list of all activity types"""
  mod_perform_activity_types: [mod_perform_activity_type!]!

  """A list of all notifications in an activity"""
  mod_perform_notifications(activity_id: core_id!): [mod_perform_notification!]!

  """
  Returns all relationships between users that can be used for performance activities.
  """
  mod_perform_relationships(activity_id: core_id!): [totara_core_relationship!]!

  """Returns all responding relationships involved in a subject instance."""
  mod_perform_responding_relationships_involved_in_subject_instance(subject_instance_id: core_id!): [totara_core_relationship!]!

  """
  Get the relationship options for manual relationships to be set at an activity level by an admin.
  """
  mod_perform_manual_relationship_selector_options(activity_id: core_id!): [totara_core_relationship!]!

  """
  Get the activity instances and their manual relationships that the current user can set the participants for.
  """
  mod_perform_manual_participant_selection_instances: [mod_perform_manual_participant_selection_instance]!

  """Get all tracks for a specific activity"""
  mod_perform_tracks(activity_id: param_integer!): [mod_perform_track!]!

  """Get a specific track by its ID"""
  mod_perform_track(track_id: param_integer!): mod_perform_track!

  """
  Get the default track for a specific activity.
  NOTE: this is a temporary query. It will be removed and replaced by mod_perform_track when
  multiple tracks per activity gets implemented in the front end.
  """
  mod_perform_default_track(activity_id: param_integer!): mod_perform_track!

  """Get all available options for dynamic schedule date resolver options."""
  mod_perform_available_dynamic_date_sources: [mod_perform_dynamic_date_source!]!

  """
  Get the default date and timezone to use in case a date time setting has not been configured in a track schedule.
  """
  mod_perform_default_fixed_date_setting: totara_core_date_time_setting!

  """
  Get the users that are visible and selectable by the current user.
  Please be aware that the number of users returned by this query is limited
  to make sure it performs well. It is not designed to list all users
  nor does it support pagination at the moment.
  """
  mod_perform_selectable_users(
    """ID of the subject instance the users are being added to"""
    subject_instance_id: core_id!

    """Filters that can be applied to limit the results returned"""
    filters: mod_perform_selectable_users_filters
  ): [core_user]!

  """
  Query to return more information about a resource(file) given its database ID.
  Note: That if coming from a course_module the instanceid is the id required here.
  """
  mod_resource_resource(resourceid: core_id!): mod_resource_resource

  """
  Query to return more information about a scorm given its database ID.
  Note: That if coming from a course_module the instanceid is the id required here.
  """
  mod_scorm_scorm(scormid: core_id!): mod_scorm_scorm

  """Query to get activity status update after an attempt"""
  mod_scorm_current_status(scormid: core_id!): mod_scorm_current_status

  """Get popup messages for current user"""
  message_popup_messages: [message_popup_message]

  """Get a count of unread popup messages for current user"""
  message_popup_unread_count: Int!
  editor_weka_editor(
    """Deprecated - in favour of parameter usage_identifier"""
    component: param_component

    """Deprecated - in favour of parameter usage_identifier"""
    area: param_area

    """Deprecated - in favour of parameter usage_identifier"""
    instance_id: param_integer

    """
    The identifier where the editor is being used. The input includes the fields
    component, area as required fields and optional for instance_id.
    """
    usage_identifier: core_editor_usage_identifier

    """
    Providing context_id so that the editor configuration can figure out where the editor is used.
    """
    context_id: param_integer
  ): editor_weka_editor

  """A query to fetch the repository data for editor weka."""
  editor_weka_repository_data(context_id: param_integer): editor_weka_repository_data!

  """A Query to get the file metadata of a draft file"""
  editor_weka_draft_file(item_id: param_integer!, filename: param_text!): editor_weka_file

  """Query to find the users by name's pattern."""
  editor_weka_users_by_pattern(pattern: param_text!, contextid: param_integer, component: param_component, area: param_area, instance_id: param_integer): [core_user!]!

  """Query to fetch a paginated set of API clients."""
  totara_api_clients(input: totara_api_clients_input): totara_api_clients_result

  """Query to fetch API client settings by client_setting_id."""
  totara_api_client_settings(client_id: core_id!): totara_api_client_settings_result!

  """Query to fetch API client instance."""
  totara_api_client(id: core_id!): totara_api_client_result!

  """Query to search for users."""
  totara_api_search_users(input: totara_api_search_users_input!): totara_api_search_users_result!

  """
  Query to return a specific certification the user can access, given its ID.
  """
  totara_certification_certification(certificationid: core_id!): totara_certification_certification!

  """Query to return all certifications the user can access."""
  totara_certification_certifications: [totara_certification_certification!]!

  """Query to return all certifications assigned to the current user."""
  totara_certification_my_certifications: [totara_certification_certification!]!
  totara_comment_comments(
    component: param_component!
    area: param_area!
    instanceid: param_integer!

    """
    The cursor which it contain the metadata about current page and how many records
    we are going to fetch. However if it is not provided, then we start at the begining
    of the list.
    """
    cursor: param_text
    page: param_integer
  ): [totara_comment_comment!]!

  """A query to load comment's cursor"""
  totara_comment_comment_cursor(
    component: param_component!
    area: param_area!
    instance_id: param_integer!

    """
    The current cursor to identify where we at, so that we can figure out the next cursor
    """
    cursor: param_text
  ): totara_comment_cursor!

  """Query to fetch the current actor within session."""
  totara_comment_actor: core_user!

  """Query to load all the replies that are related to the comment."""
  totara_comment_replies(commentid: param_integer!, page: param_integer): [totara_comment_reply!]!

  """
  Getting the draft reply/comment, which the content can either be a json_encoded document or just
  purely text - depends on the text format. This is for preparing the content that being used by
  the editor. Furthermore, the content will be run passed by the file system to make sure that all
  the files are moved to draft.
  """
  totara_comment_draft_item(id: param_integer!): totara_comment_draft_item!

  """
  Since we are allowing the comment's editor to be flexible where it is being used, and the editor is only allow to
  be locked down to the component it is used. Which in this case, the editor is locked down to the totara_comment
  component. And totara_comment component is being used in different component - therefore we are going to fetch
  the extensions for editor weka that the parent component want the editor to be. Then we will mask it with
  the totara_comment component.
  
  This query had been deprecated and the behaviour of the query had been changed.
  Please use query editor_weka_editor instead.
  """
  totara_comment_editor_weka(
    """The component of place where the comment's weka editor is being used."""
    component: param_component!

    """The area of place where the comment's weka editor is being used."""
    area: param_area!

    """This is to identify whether it is for comment or reply."""
    comment_area: param_area!

    """
    This parameter is deprecated. Do not use this input field, use query totara_comment_editor_weka_from_id instead
    @deprecated
    """
    id: param_integer

    """The instance's id of which that is using the comment component."""
    instance_id: param_integer!

    """Draft item id needed for draft files"""
    draft_id: param_integer
  ): editor_weka_editor

  """
  This query will behave similar to query totara_comment_editor_weka. However, this query is fetching based
  on either comment's id or reply's id as they are from the same table.
  
  This query had been deprecated and the behaviour had been changed.
  Please use query editor_weka_editor instead.
  """
  totara_comment_editor_weka_from_id(
    """Either comment's id or reply's id."""
    id: param_integer!

    """This is to identify whether it is for comment or reply."""
    comment_area: param_area!

    """Draft item id needed for draft files"""
    draft_id: param_integer
  ): editor_weka_editor

  """Fetch achievement criteria for a given competency"""
  totara_competency_achievement_criteria(competency_id: core_id!): totara_competency_achievement_configuration!

  """Fetch all achievement paths for a given competency and user"""
  totara_competency_achievement_paths(assignment_id: core_id!, user_id: core_id!): [totara_competency_achievement_path]

  """Fetch all scale achievements for a given competency and user"""
  totara_competency_scale_achievements(assignment_id: core_id!, user_id: core_id!): [totara_competency_scale_achievement]

  """Query to return a specific competency assignment by its ID"""
  totara_competency_assignment(assignment_id: core_id!): totara_competency_assignment!

  """
  Query to return a paginated set of user assignable competencies, optionally filtered by some specific criteria
  """
  totara_competency_user_assignable_competencies(
    """
    ID of the user who the results are for. Permission checks will be applied to the viewing user's right to view this user
    """
    user_id: core_id!

    """Set of filters to apply to the results"""
    filters: totara_competency_self_assigned_competencies_filter

    """Field to user to order the results, e.g. 'name'"""
    order_by: String

    """Direction the results should be ordered in, e.g. 'asc', 'desc'"""
    order_dir: totara_competency_order_dir

    """
    Cursor obtained from a previous set of results, if provided will return the
    next page of results. If not provided returns the first page of results
    """
    cursor: String
  ): totara_competency_self_assigned_competencies_result!

  """
  Query to return a paginated set of competencies that have been assigned to a user.
  """
  totara_competency_user_assignments(input: totara_competency_user_assignments_input!): totara_competency_user_assignments_result!

  """Returns data about a given competency by ID"""
  totara_competency_competency(competency_id: core_id!): totara_competency_competency!

  """Returns custom field data about a given competency by ID"""
  totara_competency_competency_custom_fields(competency_id: core_id!): totara_competency_competency_custom_field!

  """
  Returns information about a given competency scale for a given scale ID or competency ID
  """
  totara_competency_scale(
    """
    ID of scale to return. If provided competency_id/framework_id should be left blank
    """
    id: core_id

    """
    ID of a competency whose scale to return. If provided id/framework_id should be left blank
    """
    competency_id: core_id

    """
    ID of a framework whose scale to return. If provided id/competency_id should be left blank
    """
    framework_id: core_id
  ): totara_competency_scale!

  """
  Returns information about multiple scales for a given set of scale IDs or competency IDs
  """
  totara_competency_scales(
    """
    List of scale IDs to return. If provided competency_id should be left blank
    """
    id: [core_id!]

    """
    List of competency_ids whose scale to return. If provided id should be left blank
    """
    competency_id: [core_id!]
  ): [totara_competency_scale]!

  """
  Returns a list of linked courses associated with a specific competency by ID
  """
  totara_competency_linked_courses(competency_id: core_id!): [totara_competency_linked_course]

  """
  Activity log entries for a single user/competency pair, optionally filtered.
  """
  totara_competency_activity_log(competency_id: core_id!, user_id: core_id!, filters: totara_competency_activity_log_filters): [totara_competency_activity_log_row]

  """
  Competency profile overall progress data for a specified user by ID, optionally filtered.
  """
  totara_competency_profile_progress(user_id: core_id!, filters: totara_competency_profile_assignment_filters): totara_competency_profile_overall_progress

  """
  Competency profile detailed competency progress data for a specified user by ID, optionally filtered and ordered.
  """
  totara_competency_profile_competency_progress(user_id: core_id!, order: String, filters: totara_competency_profile_assignment_filters): [totara_competency_profile_competency_progress]

  """
  Competency profile detailed competency progress data for a single user/competency pair.
  """
  totara_competency_profile_competency_details(user_id: core_id!, competency_id: core_id!, status: Int): totara_competency_profile_competency_progress

  """Gets a single user"""
  totara_competency_user(user_id: core_id!): core_user!

  """
  Return all learning items assigned to the current user.
  Only returns the current learning, not completed ones.
  """
  totara_core_my_current_learning: [totara_core_learning_item]!

  """Return a tree with links to settings pages"""
  totara_core_settings_navigation_tree(context_id: core_id!, page_url: param_url!): totara_core_settings_navigation_tree!

  """Return all learning items of a user."""
  totara_core_user_learning_items(input: totara_core_user_learning_items_input!): totara_core_user_learning_items_result!

  """Return all selected learning items of a user."""
  totara_core_user_learning_items_selected(input: totara_core_user_learning_items_input!): totara_core_user_learning_items_result!
  totara_engage_filter_options(filtertype: totara_engage_filter_type!, component: param_component, area: param_area): totara_engage_filter_option_map!
  totara_engage_contributions(component: param_component!, area: param_area!, filter: totara_engage_filter!, footnotes: totara_engage_footnotes, cursor: String, source: String): totara_engage_cards!

  """
  A query to find cards owned by user_id that can be seen by the active user.
  """
  totara_engage_user_contributions(user_id: core_id!, component: param_component!, area: param_area!, filter: totara_engage_filter!, footnotes: totara_engage_footnotes, cursor: String, source: String): totara_engage_cards!

  """
  A query to count the number of contributions user_id has that the active user can see.
  """
  totara_engage_user_contributions_count(user_id: core_id!, component: param_component!, area: param_area!): Int!
  totara_engage_modals(exclude: [param_component]): [totara_engage_modal]!

  """A query for getting all the access setting/options."""
  totara_engage_access_options: [totara_engage_access_option!]!

  """A query for getting all the timeview setting/options."""
  totara_engage_time_view_options: [totara_engage_time_view_option!]!

  """Retrieve all navigation panel section components."""
  totara_engage_navigation_panel_sections: [totara_engage_navigation_panel_section]!

  """
  Contains a hash map of the specific advanced features that engage may
  have to react to.
  """
  totara_engage_advanced_features: totara_engage_advanced_features!

  """Get the capabilities of the user interacting with the resource."""
  totara_engage_interactor(resource_id: core_id!): totara_engage_resource_interactor

  """Get a list of recipients that you can share a specific item to."""
  totara_engage_shareto_recipients(itemid: param_integer!, component: param_component!, search: String, access: totara_engage_access!, theme: param_component): [totara_engage_recipient_out!]!

  """Get the number of shares for a specific item."""
  totara_engage_share_totals(itemid: param_integer!, component: param_component!): totara_engage_share_totals!

  """Get the recipients for a specific shared item."""
  totara_engage_share_recipients(itemid: param_integer!, component: param_component!, theme: param_component): [totara_engage_recipient_out!]!

  """Query to return a paginated set of evidence that belongs to a user"""
  totara_evidence_user_evidence_items(input: totara_evidence_user_evidence_items_input): totara_evidence_user_evidence_items_result!

  """Loads all evidence types in use by the user"""
  totara_evidence_user_evidence_types(input: totara_evidence_user_evidence_types_input!): totara_evidence_user_evidence_types_result!

  """Retrieves a set of company goal assignments"""
  totara_hierarchy_assigned_company_goals(input: totara_hierarchy_company_goal_assignment_input): totara_hierarchy_company_goal_assignment_result!

  """Query to retrieve company goal frameworks."""
  totara_hierarchy_company_goal_frameworks(input: totara_hierarchy_goal_filter_input): totara_hierarchy_company_goal_frameworks_result!

  """Query to retrieve company goal types."""
  totara_hierarchy_company_goal_types(input: totara_hierarchy_goal_filter_input): totara_hierarchy_company_goal_types_result!

  """Retrieves a set of competencies"""
  totara_hierarchy_competencies(input: totara_hierarchy_competency_input): totara_hierarchy_competency_result!

  """
  Retrieves a set of goal assignment types corresponding to the goal "class"
  """
  totara_hierarchy_goal_assignment_types(input: totara_hierarchy_goal_assignment_types_input): [totara_hierarchy_goal_assignment_type!]!

  """Query to retrieve organisation frameworks."""
  totara_hierarchy_organisation_frameworks: [totara_hierarchy_organisation_framework!]!

  """Query to retrieve organisation types."""
  totara_hierarchy_organisation_types: [totara_hierarchy_organisation_type!]!

  """Query to retrieve organisations."""
  totara_hierarchy_organisations(query: totara_hierarchy_organisation_query): totara_hierarchy_organisation_result!

  """Retrieves a set of personal goals"""
  totara_hierarchy_personal_goals(input: totara_hierarchy_personal_goal_input): totara_hierarchy_personal_goal_result!

  """Query to retrieve personal goal types."""
  totara_hierarchy_personal_goal_types(input: totara_hierarchy_goal_filter_input): totara_hierarchy_personal_goal_types_result!

  """Query to retrieve position frameworks."""
  totara_hierarchy_position_frameworks: [totara_hierarchy_position_framework!]!

  """Query to retrieve position types."""
  totara_hierarchy_position_types: [totara_hierarchy_position_type!]!

  """Query to retrieve positions."""
  totara_hierarchy_positions(query: totara_hierarchy_position_query): totara_hierarchy_position_result!

  """
  Return a paginated list of job_assignments in the system. Multitenancy restrictions apply.
  """
  totara_job_job_assignments(query: totara_job_job_assignments_query): totara_job_job_assignments_result!

  """Query to return all of the current users job assignments"""
  totara_job_my_assignments: [totara_job_assignment!]!

  """Query to return all of the given users job assignments"""
  totara_job_assignments(userid: core_id!): [totara_job_assignment!]!

  """Query to return a specific job assignment given its ID."""
  totara_job_assignment(assignmentid: core_id!): totara_job_assignment!

  """Returns mobile app user info"""
  totara_mobile_me: totara_mobile_me!

  """Return a users own profile information"""
  totara_mobile_user_own_profile: totara_mobile_user!

  """Returns true if webview is active and usable, false otherwise."""
  totara_mobile_webview(secret: String!): Boolean!

  """
  Return a single course from its ID if the user can access it
  The optional guestpw will grant guest access if there is an associated guest enrolment instance
  """
  totara_mobile_course(courseid: core_id!, guestpw: String): totara_mobile_course!

  """
  Query to return a specific certification the user can access, given its program ID.
  """
  totara_mobile_certification(certificationid: core_id!): totara_mobile_certification!

  """Query to return a specific program the user can access, given its ID."""
  totara_mobile_program(programid: core_id!): totara_mobile_program!

  """Queries to return details about SCORM activities"""
  totara_mobile_scorm(scormid: core_id!): mod_scorm_scorm!
  totara_mobile_scorm_current_status(scormid: core_id!): mod_scorm_current_status!

  """Query to return additional details about a resource (file)."""
  totara_mobile_resource(resourceid: core_id!): mod_resource_resource!

  """Query to return all mobile strings for the specific language"""
  totara_mobile_language_strings(lang: String!): String!

  """Query to get messages"""
  totara_mobile_messages: [message_popup_message]

  """Query to get count of unread messages"""
  totara_mobile_unread_message_count: Int!

  """
  A query to fetch all the notifiable event resolvers within the system, and it is up to the
  implementation of persist query to include the associated notification preferences
  with the query or not.
  """
  totara_notification_event_resolvers(
    """
    Extended context MUST be provided, in order to create the notification preference
    within that context. Note that the context's id for this extended_context can be fallback
    to the context system if none is provided.
    """
    extended_context: totara_notification_extended_context_input!
  ): [totara_notification_event_resolver!]!
  totara_notification_event_resolvers_v2(extended_context: totara_notification_extended_context_input!): [totara_notification_event_resolver_v2!]!

  """
  A query to fetch all the notifiable event preferences for a specific user
  """
  totara_notification_notifiable_event_user_preferences(user_id: param_integer!, extended_context: totara_notification_extended_context_input!): [totara_notification_notifiable_event_user_preference!]!

  """A query to get the notification preference by id"""
  totara_notification_notification_preference(id: param_integer!): totara_notification_notification_preference!

  """
  A query to fetch all the notification preferences under specific context which
  can be listening to the notifiable event (if provided).
  """
  totara_notification_notification_preferences(
    """
    Extended context MUST be provided, in order to create the notification preference
    within that context. Note that the context's id for this extended_context can be fallback
    to the context system if none is provided.
    """
    extended_context: totara_notification_extended_context_input!

    """
    If this parameter is provided, we are fetching only the notification preferences that are listening to
    this event only.
    """
    resolver_class_name: param_text

    """
    Whether we want the list of notification preferences at the specific context only,
    or the list that is a mix of overridden and non-overridden (higher context).
    """
    at_context_only: param_boolean!
  ): [totara_notification_notification_preference!]!

  """A query to get the notification preference by id"""
  totara_notification_notification_preference_v2(id: param_integer!): totara_notification_notification_preference_v2!

  """Query to fetch oauth2 client providers based on filters."""
  totara_oauth2_client_providers(input: totara_oauth2_client_providers_input!): totara_oauth2_client_provider_result!

  """Fetching a single playlist, based on its id."""
  totara_playlist_instance(id: param_integer!): totara_playlist_playlist!

  """Query to fetch all the playlists related to a user."""
  totara_playlist_playlists(
    """
    The user that we are fetching playlists for. If null is given then
    user in session will be used.
    """
    userid: param_integer

    """
    If resource_id is set, then we are only looking for the playlists that contains this resource only.
    """
    resource_id: param_integer

    """
    The cursor that we are fetching records from. If it is null, then we are
    at the start of the collection/list.
    """
    cursor: param_text

    """
    If source is not provided, then the query will start looking
    into all the playlists that a user is able to see.
    """
    source: totara_playlist_playlist_source

    """Sort option for playlist."""
    sort: totara_playlist_playlist_sort
  ): [totara_playlist_playlist!]!

  """
  Query to fetch the cursor (most likely the next cursor) for playlists query.
  """
  totara_playlist_playlists_cursor(
    """
    The user that we are fetching playlists for. If null is given then
    user in session will be used.
    """
    user_id: param_integer

    """
    If resource_id is set, then we are only looking for the playlists that contains this resource only.
    """
    resource_id: param_integer

    """The current cursor that is used to find out the next cursor."""
    cursor: param_text

    """
    If source is not provided, then the query will start looking
    into all the playlists that a user is able to see.
    """
    source: totara_playlist_playlist_source
  ): totara_playlist_cursor!

  """Fetching all the playlist cards."""
  totara_playlist_cards(id: param_integer!, cursor: String, source: String, footnotes: totara_engage_footnotes): totara_engage_cards!

  """
  Playlist specific resource enquiry that will return resources
  that have not yet been added to the playlist.
  """
  totara_playlist_resources(playlist_id: param_integer!, area: param_area, filter: totara_engage_filter!, footnotes: totara_engage_footnotes, cursor: String): totara_engage_cards!

  """Get the capabilities of the user interacting with the playlist."""
  totara_playlist_interactor(playlist_id: core_id!): totara_playlist_playlist_interactor

  """
  A query to check whether the item's access are going to be changed
  when adding the item(s) to the playlist or not.
  """
  totara_playlist_check_items_access(items: [totara_engage_share_item!]!, playlist_id: param_integer!): totara_playlist_item_access_check_result!

  """Query to return a specific program the user can access, given its ID."""
  totara_program_program(programid: core_id!): totara_program_program!

  """Query to return all programs the user can access."""
  totara_program_programs: [totara_program_program!]!

  """Query to return all programs assigned to the current user."""
  totara_program_my_programs: [totara_program_program!]!
  totara_reaction_reactions(component: param_component!, area: param_area!, instanceid: param_integer!, page: param_integer): [totara_reaction_reaction!]!
  totara_reaction_total(component: param_component!, area: param_area!, instanceid: param_integer!): Int!
  totara_reaction_liked(component: param_component!, area: param_area!, instanceid: param_integer!): Boolean!

  """Query to return sources"""
  totara_reportbuilder_sources: [totara_reportbuilder_source!]!

  """Query to return a source"""
  totara_reportbuilder_source(key: String): totara_reportbuilder_source!

  """Query to return templates"""
  totara_reportbuilder_templates: [totara_reportbuilder_template!]!

  """Query to return template"""
  totara_reportbuilder_template(key: String): totara_reportbuilder_template!

  """Query to return creation sources"""
  totara_reportbuilder_creation_sources(label: [String], search: String, start: Int, limit: Int, sort: Int): totara_reportbuilder_creation_source
  totara_topic_system_topics: [totara_topic_topic!]!
  totara_topic_find_topics(
    search: param_text!

    """
    An array of topic's id where they should be excluded from querying. As it can be the list of topics that
    had already been picked by the user.
    """
    exclude: [param_integer!]
  ): [totara_topic_topic!]!
  totara_topic_get_config(component: param_component!, item_type: String!): totara_topic_config!

  """
  Query to return all of the TUI resource bundles for the provided components
  """
  totara_tui_bundles(components: [String!]!, theme: param_theme!): [totara_tui_bundle!]!

  """Query to retrieve all themes that defines css variables."""
  totara_tui_themes_with_variables(theme: param_component!): [String!]!

  """Query to fetch a paginated set of scheduled rules."""
  totara_useraction_scheduled_rules(input: totara_useraction_scheduled_rules_input): totara_useraction_scheduled_rules_result

  """Fetch a single scheduled rule by ID."""
  totara_useraction_scheduled_rule(id: core_id!): totara_useraction_scheduled_rule!

  """
  Simple query returning "ok" to test that you are able to successfully execute GraphQL queries.
  """
  totara_webapi_status: totara_webapi_status

  """
  Workspace specific contributions enquiry that will return resources and playlists
  that have not yet been shared with the workspace.
  """
  container_workspace_contributions(workspace_id: param_integer!, area: param_area!, filter: totara_engage_filter!, footnotes: totara_engage_footnotes, cursor: String, image_preview_mode: String): totara_engage_cards!

  """Query to fetch all the discussions within a workspace"""
  container_workspace_discussions(
    """The workspace's id where we are looking for discussions."""
    workspace_id: param_integer!

    """
    Sort option for the workspace discussions, however, it will not be applied when we are
    fetching the pinned discussions
    """
    sort: container_workspace_discussion_sort!

    """The word that is existing within the discussion content."""
    search_term: param_text

    """
    If pinned is not given, then this query will look for all the pinned and not pinned
    post discussions.
    """
    pinned: param_boolean

    """
    Fetching the discussions depending on the cursor. If cursor is not being set, then we are
    going to start from scratch. Which is page 1
    """
    cursor: param_text
  ): [container_workspace_discussion!]!

  """Query to fetch the next cursor for the discussions"""
  container_workspace_discussion_cursor(
    search_term: param_text
    workspace_id: param_integer!

    """
    Sort option for the workspace discussions, however, it will not be applied when we are
    fetching the pinned discussions
    """
    sort: container_workspace_discussion_sort

    """
    This is current cursor that we are looking at, and it is being used
    to determine what the next cursor should be.
    """
    cursor: param_text

    """
    If pinned is not given, then this query will look for all the pinned and not pinned
    post discussions.
    """
    pinned: param_boolean
  ): container_workspace_cursor!

  """A query to fetch a single discussion base on the discussion's id."""
  container_workspace_discussion(id: param_integer!): container_workspace_discussion!

  """
  Fetching the file draft's id for discussion.
  If id is provided, then the API will move the area files to draft area.
  """
  container_workspace_discussion_draft_id(
    """Discussion's id."""
    id: param_integer
  ): Int!

  """
  Search discussion content (disccussions, comments and replies) containing the search term
  """
  container_workspace_search_discussion_content(
    """The workspace's id where we are looking for discussions."""
    workspace_id: param_integer!

    """The word that is existing within the discussion content."""
    search_term: param_text!

    """
    Fetching the content depending on the cursor. If cursor is not being set, then we are
    going to start from scratch. Which is page 1
    """
    cursor: param_text
  ): [container_workspace_discussion_search_result!]!

  """Query to fetch the next cursor for the discussion content results"""
  container_workspace_discussion_search_content_results_cursor(
    search_term: param_text
    workspace_id: param_integer!

    """
    This is current cursor that we are looking at, and it is being used
    to determine what the next cursor should be.
    """
    cursor: param_text
  ): container_workspace_cursor!
  container_workspace_file_area(
    workspace_id: param_integer

    """
    If it is being passed, then the query will move everything to this draft_id. Otherwise, new draft_id will be created.
    """
    draft_id: param_integer
  ): container_workspace_file_area!
  container_workspace_workspace_image(workspace_id: param_integer, theme: param_component): String!

  """Query to load the files from workspace"""
  container_workspace_files(
    """
    This is current cursor that we are looking at, and it is being used
    to determine what the next cursor should be.
    """
    cursor: param_text
    workspace_id: param_integer!
    sort: container_workspace_file_sort!

    """
    If extension is not set, meaning that we are fetch for files in every extensions.
    """
    extension: param_alphanum
  ): [container_workspace_file!]!

  """Query to fetch the next cursor for the files"""
  container_workspace_file_cursor(
    """The workspace's id which we are fetching files from."""
    workspace_id: param_integer!

    """
    This is current cursor that we are looking at, and it is being used
    to determine what the next cursor should be.
    """
    cursor: param_text

    """Search file based on the extension."""
    extension: param_alphanum
  ): container_workspace_cursor!

  """Query to load the workspace source options"""
  container_workspace_workspace_sources: [container_workspace_workspace_source_option!]!

  """Query to load the workspace sort options"""
  container_workspace_workspace_sorts: [container_workspace_workspace_sort_option!]!

  """Query to load the workspace's member sort options"""
  container_workspace_member_sorts: [container_workspace_member_sort_option!]!

  """Query to load the workspace's discussion sort options."""
  container_workspace_discussion_sorts: [container_workspace_discussion_sort_option!]!

  """Query to load the workspace's file sort options"""
  container_workspace_file_sorts: [container_workspace_file_sort_option!]!

  """Query to load the file source options"""
  container_workspace_file_extensions(workspace_id: param_integer): [container_workspace_file_extension_option!]!

  """Query to load all the access options."""
  container_workspace_workspace_accesses: [container_workspace_workspace_access_option!]!

  """
  A query to get all the members of a workspace. Based on workspace's id.
  """
  container_workspace_members(
    workspace_id: param_integer!
    sort: container_workspace_member_sort!
    search_term: param_text

    """
    Status of the the member. If it is null, then the query will try to fetch
    all the members that has either of the status.
    """
    status: container_workspace_member_status

    """
    The current cursor that we are looking at. If it is null, then we are looking at
    the begining of the collection.
    """
    cursor: param_text
  ): [container_workspace_member!]!

  """Query to fetch the next cursor for list of members."""
  container_workspace_member_cursor(
    workspace_id: param_integer!
    search_term: param_text

    """
    This is current cursor that we are looking at, and it is being used
    to determine what the next cursor should be.
    """
    cursor: param_text

    """
    Status of the member. If it is null, then the query will try to fetch all
    the members that has either of the status.
    """
    status: container_workspace_member_status
  ): container_workspace_cursor!

  """A query to fetch all the member requests."""
  container_workspace_member_requests(
    workspace_id: param_integer!
    status: container_workspace_member_request_status!

    """
    The cursor that we are going to fetch. If null is provided, then the first
    20 records will be fetched.
    """
    cursor: param_text
  ): [container_workspace_member_request!]!

  """Query to fetch the next cursor for member requests."""
  container_workspace_member_request_cursor(
    workspace_id: param_integer!
    status: container_workspace_member_request_status!

    """
    The current curosr that we are looking at, in order to help calculate the next cursor.
    """
    cursor: param_text
  ): container_workspace_cursor!

  """
  Query to fetch number of users which would be added via the given audiences to the workspace
  @deprecated since Totara 16: Feature has been deprecated in favor of add audiences feature.
  """
  container_workspace_bulk_audience_members_to_add(input: container_workspace_bulk_audience_members_to_add_input!): container_workspace_bulk_audience_members_to_add_result! @deprecated(reason: "Bulk audience members to add has been deprecated in favor of add audiences feature")

  """
  A query to fetch all the site notifications that are related to the workspaces.
  """
  container_workspace_notifications: [container_workspace_notification]!

  """
  A query to fetch all the cards of items that were shared with this workspace
  """
  container_workspace_shared_cards(
    """ID of the workspace."""
    workspace_id: core_id!

    """Area within workspace."""
    area: param_area!

    """Options to filter the shared cards."""
    filter: totara_engage_filter!

    """Footnote properties."""
    footnotes: totara_engage_footnotes

    """
    Cursor encoding the page and limit for classic offset based pagination.
    """
    cursor: String

    """
    Source indicating what page should be returned to when a library resource is opened
    """
    source: String
  ): totara_engage_cards!

  """
  A query to start checking whether the sharing items are going to be changed with the access
  setting or not.
  """
  container_workspace_check_share_access(items: [totara_engage_share_item!], workspace: totara_engage_recipient_in!): container_workspace_share_access_check_result!

  """Return filtered list of users in the system."""
  container_workspace_non_members(query: container_workspace_user_query!): core_users_result!

  """
  A query to fetch users that are not members of a the workspace yet.
  
  @deprecated since 16.0 Use container_workspace_non_member instead.
  """
  container_workspace_non_member_users(
    """The workspace's id that we are going to check against"""
    workspace_id: param_integer!

    """User search term"""
    search_term: param_text

    """The current cursor that we are looking at."""
    cursor: param_text
  ): [core_user!]!

  """@deprecated since 16.0; not used anywhere."""
  container_workspace_non_member_users_cursor(
    """The workspace's id that we are going to check against."""
    workspace_id: param_integer!

    """User search term"""
    search_term: param_text

    """The current cursor that help us to detect the next cursor."""
    cursor: param_text
  ): container_workspace_cursor!

  """
  Query to fetch display fields, which will respect the setting of display card.
  However - it will skip the the field fullname - as it is a default for workspace page.
  
  @deprecated since 16.0; only used together with deprecated container_workspace_non_member_users
  """
  container_workspace_user_table_fields: [container_workspace_user_table_field!]!

  """
  A query to search for users by pattern.
  This query is temporary to search for the users. It can be superceeded by the query
  that sits in core if desire.
  """
  container_workspace_search_users(
    """
    Where this search is happening. Ideally that it must be done within a workspace.
    """
    workspace_id: param_integer!
    pattern: param_text
  ): [core_user!]!

  """Query to fetch a single workspace based on the workspace's id."""
  container_workspace_workspace(id: param_integer!): container_workspace_workspace!

  """Query to fetch the cursor information for the workspaces."""
  container_workspace_workspace_cursor(
    """
    For fetching the workspaces related to this very user. If the parameter
    user_id is not set, then the user within session will be used.
    """
    user_id: param_integer
    source: container_workspace_workspace_source!

    """Whether it is private/public workspaces."""
    access: container_workspace_access

    """
    Term to search workspace. If it is null, then no search will be applied.
    """
    search_term: param_text

    """The current cursor, which is help to detect the next cursor."""
    cursor: param_text
  ): container_workspace_cursor!

  """A query to fetch all the workspaces that this user is a part of it."""
  container_workspace_workspaces(
    """
    For fetching the workspaces that related to this very user.
    If paremter user_id is null, the then user within session will be used.
    """
    user_id: param_integer
    source: container_workspace_workspace_source!

    """
    Term to search workspace on. If it is null, then no search will be applied
    """
    search_term: param_text

    """Sort option to sort the workspace"""
    sort: container_workspace_workspace_sort!

    """Whether it is private/public workspaces."""
    access: container_workspace_access

    """
    The cursor that we want to fetch. If none is provided, then it will fetch the very first of the page.
    """
    cursor: param_text
  ): [container_workspace_workspace!]!

  """Get audiences linked to the workspace."""
  container_workspace_audiences(input: container_workspace_audiences_input!): container_workspace_audiences_result!

  """Get IDs of audiences linked to the workspace."""
  container_workspace_audience_ids(input: container_workspace_audience_ids_input!): [core_id!]!

  """
  Query to get interactor instance against the workspace provided via parameter.
  """
  container_workspace_workspace_interactor(workspace_id: param_integer!, user_id: param_integer): container_workspace_workspace_interactor!

  """
  Query to get interactor category instance. If no workspace_id is provided, the default is used.
  """
  container_workspace_workspace_category_interactor(workspace_id: param_integer, user_id: param_integer): container_workspace_workspace_category_interactor!

  """Query to fetch all articles that related to the provided article ID"""
  ml_recommender_recommended_articles(
    """The ID of the article to find recommended articles for"""
    article_id: param_integer!

    """Fetch some results based on the provided cursor"""
    cursor: param_text

    """
    Source page that's making the request for the article.
    Used to generate the correct URL for return links.
    """
    source: String
  ): [totara_engage_card!]

  """Query to fetch the next cursor for the recommended articles"""
  ml_recommender_recommended_articles_cursor(
    """The ID of the article to find recommended articles for"""
    article_id: param_integer!

    """
    This is current cursor that we are looking at, and it is used
    to determine what the next cursor should be.
    """
    cursor: param_text
  ): ml_recommender_cursor

  """Query to fetch all playlists that related to the provided playlist ID"""
  ml_recommender_recommended_playlists(
    """The ID of the playlist to find recommended playlists for"""
    playlist_id: param_integer!

    """Fetch some results based on the provided cursor"""
    cursor: param_text

    """
    Source page that's making the request for the article.
    Used to generate the correct URL for return links.
    """
    source: String
  ): [totara_engage_card!]

  """Query to fetch the next cursor for the recommended playlists"""
  ml_recommender_recommended_playlists_cursor(
    """The ID of the playlist to find recommended playlists for"""
    playlist_id: param_integer!

    """
    This is current cursor that we are looking at, and it is used
    to determine what the next cursor should be.
    """
    cursor: param_text
  ): ml_recommender_cursor

  """Query to fetch all workspaces that related to the provided user ID"""
  ml_recommender_recommended_user_workspaces(
    """Fetch some results based on the provided cursor"""
    cursor: param_text
  ): [container_workspace_workspace]!

  """
  Query to fetch the next cursor for the recommended workspaces by user ID
  """
  ml_recommender_recommended_user_workspaces_cursor(
    """
    This is current cursor that we are looking at, and it is used
    to determine what the next cursor should be.
    """
    cursor: param_text
  ): ml_recommender_cursor
  contentmarketplaceactivity_linkedin_linkedin_activity(cm_id: core_id!): contentmarketplaceactivity_linkedin_content_marketplace!

  """Aggregatable question elements"""
  performelement_aggregation_aggregatable_question_elements(input: aggregatable_question_elements_input!): performelement_aggregation_aggregatable_question_elements_result!

  """Get the available content types that can be selected."""
  performelement_linked_review_content_types(section_id: core_id!): [performelement_linked_review_content_type]!

  """Load content items for given review question"""
  performelement_linked_review_content_items(input: performelement_linked_review_content_items_input!): performelement_linked_review_content_items_result!

  """Get draft area id used for Weka editor"""
  performelement_long_text_get_draft_id(section_element_id: core_id!, participant_instance_id: core_id!): core_id!

  """Source activity respondable question elements"""
  performelement_redisplay_source_activity_question_elements(input: source_activity_question_elements_input!): performelement_redisplay_source_activity_question_elements_result!

  """
  Gets previous subject instance's responses based on the current subject instance.
  """
  performelement_redisplay_subject_instance_previous_responses(input: subject_instance_previous_responses_input!): performelement_redisplay_subject_instance_previous_responses_result!

  """
  Gets previous subject instance's responses based on the current subject instance for an external participant.
  """
  performelement_redisplay_subject_instance_previous_responses_external_participant(input: subject_instance_previous_responses_input!): performelement_redisplay_subject_instance_previous_responses_result!

  """
  A query to help getting all the available placeholders provided by the notifiable event class
  and filtered by pattern text.
  """
  weka_notification_placeholder_placeholders(context_id: param_integer!, pattern: param_text, resolver_class_name: param_text!): [weka_notification_placeholder_placeholder!]!

  """Fetch a list of criteria groups by instance ID"""
  pathway_criteria_group_achievements(instance_id: core_id!): [pathway_criteria_group_achievement]!

  """Fetch a learning plan pathway for a given user and assignment"""
  pathway_learning_plan_competency_plans(user_id: core_id!, assignment_id: core_id!): pathway_learning_plan_competency_plan

  """
  Get all roles for the current user, and optionally in relation to another user
  """
  pathway_manual_roles(subject_user: core_id): [pathway_manual_role]!

  """Get most recent ratings for a competency assignment by role"""
  pathway_manual_role_ratings(user_id: core_id!, assignment_id: core_id!): [pathway_manual_role_rating]

  """Get users that the logged in user is able to manually rate for a role"""
  pathway_manual_rateable_users(role: String!, filters: pathway_manual_rateable_users_filters): [pathway_manual_rateable_user]!

  """Get all rateable competencies for a user by role"""
  pathway_manual_user_rateable_competencies(user_id: core_id!, role: String!, filters: pathway_manual_user_rateable_competencies_filters): pathway_manual_user_competencies!
  pathway_perform_rating_linked_competencies_rating(input: pathway_perform_rating_linked_competencies_rating_input!): pathway_perform_rating_linked_competencies_rating_result!

  """
  Query to return a paginated set of creatable courses from the LinkedIn Learning course catalogue.
  """
  contentmarketplace_linkedin_catalog_import_learning_objects(input: contentmarketplace_linkedin_catalog_import_learning_objects_input!): contentmarketplace_linkedin_catalog_import_learning_objects_result!

  """
  Query to return the filters that are availble for querying the learning objects in the catalogue.
  """
  contentmarketplace_linkedin_catalog_import_learning_objects_filter_options(input: contentmarketplace_linkedin_catalog_import_learning_objects_filter_options_input!): contentmarketplace_linkedin_catalog_import_learning_objects_filter_options_result!

  """Query to return the course categories that are availble."""
  contentmarketplace_linkedin_catalog_import_course_categories: [core_category!]!

  """
  Query to return the available locales within linkedin content marketplace.
  """
  contentmarketplace_linkedin_available_locales: [contentmarketplace_linkedin_locale!]!

  """Get all achievements of a specific coursecompletion criteria instance"""
  criteria_childcompetency_achievements(instance_id: core_id!, user_id: core_id!, assignment_id: core_id!): criteria_childcompetency_achievements

  """Get all achievements of a specific coursecompletion criteria instance"""
  criteria_coursecompletion_achievements(instance_id: core_id!, user_id: core_id!): criteria_coursecompletion_achievements!

  """Get all achievements of a specific linkedcourses criteria instance"""
  criteria_linkedcourses_achievements(instance_id: core_id!, user_id: core_id!): criteria_linkedcourses_achievements

  """Get all achievements of a specific othercompetency criteria instance"""
  criteria_othercompetency_achievements(instance_id: core_id!, user_id: core_id!, assignment_id: core_id!): criteria_othercompetency_achievements
  engage_article_get_article(id: param_integer!): engage_article_article!

  """Getting the draft content of an article, based on its resourceid."""
  engage_article_draft_item(resourceid: param_integer!): engage_article_draft_item!
  engage_survey_instance(resourceid: param_integer!): engage_survey_survey!

  """
  A query for returning the vote result of a surve. Collection of question's result
  """
  engage_survey_vote_result(
    """Id is the resource's id."""
    resourceid: param_integer!
  ): [engage_survey_question_result!]!

  """Return all learning items assigned to the current user"""
  mobile_currentlearning_my_items: [mobile_currentlearning_item]!

  """Return a page of catalog items the current user can view."""
  mobile_findlearning_view_catalog(limit_from: Int): mobile_findlearning_catalog_page!

  """Return a page of filtered catalog items the current user can view."""
  mobile_findlearning_filter_catalog(limit_from: Int, filter_data: mobile_findlearning_filter_input!): mobile_findlearning_catalog_page!

  """Check whether the user can access the course as a guest"""
  mobile_findlearning_validate_guest_password(input: mobile_findlearning_guest_password_input!): mobile_findlearning_guest_access_result!
}

"""Input type for aggregatable question elements."""
input aggregatable_question_elements_input {
  activity_id: param_integer!
}

enum container_workspace_access {
  """
  This will result in column visibility to be '1' - but different enrolment
  methods, which are self and manual enrolment.
  """
  PUBLIC

  """
  This when the column visibility is '1' - but different enrolment
  methods, which are request and manual enrolment.
  """
  PRIVATE

  """This is when the column visibility is '0'"""
  HIDDEN
}

"""Input type for container_workspace_add_audiences"""
input container_workspace_add_audiences_input {
  workspace_id: param_integer!
  audience_ids: [param_integer!]!
}

"""Result type for container_workspace_add_audiences"""
type container_workspace_add_audiences_result {
  audience_ids: [Int!]!
}

"""Input type for container_workspace_add_bulk_audience_members mutation"""
input container_workspace_add_bulk_audience_members_input {
  workspace_id: param_integer!
  audience_ids: [param_integer!]!
}

"""
Contains result of container_workspace_add_bulk_audience_members mutation
"""
type container_workspace_add_bulk_audience_members_result {
  workspace: container_workspace_workspace!
}

"""Workspace audiences query input"""
input container_workspace_audience_ids_input {
  """Workspace id"""
  workspace_id: param_integer!
}

"""Workspace audiences query input"""
input container_workspace_audiences_input {
  """Workspace id"""
  workspace_id: param_integer!

  """Pagination input"""
  pagination: core_pagination_input

  """Pagination cursor"""
  cursor: param_text

  """Name of audience to search for."""
  name: String
}

"""Workspace audiences query result"""
type container_workspace_audiences_result implements core_pageable_result {
  items: [core_cohort!]!
  total: Int!
  next_cursor: String!
}

"""Input type for container_workspace_bulk_audience_members_to_add query"""
input container_workspace_bulk_audience_members_to_add_input {
  workspace_id: param_integer!
  audience_ids: [param_integer!]!
}

"""
Contains result of container_workspace_bulk_audience_members_to_add query
"""
type container_workspace_bulk_audience_members_to_add_result {
  members_to_add: Int!
}

enum container_workspace_cannot_leave_reason {
  """User is the owner of the workspace"""
  IS_OWNER

  """User is not a member"""
  NOT_A_MEMBER

  """User belongs to an audience synced with the workspace"""
  AUDIENCE_MEMBERSHIP
}

"""Enum of types of content included in search results"""
enum container_workspace_content_type {
  discussion
  comment
  reply
}

type container_workspace_cursor {
  total: Int!

  """Next cursor, if this is null, then we are at the end of the page."""
  next: String
}

type container_workspace_discussion {
  """Discussion's id"""
  id: Int!

  """Workspace's id that this discussion belongs to."""
  workspace_id: Int!

  """Content produce from content_format and the graphql format"""
  content(format: core_format!): String!

  """
  The raw content of the discussion. However, this content return after being processed with
  draft files. Meaning that all the files will be moved to draft area.
  """
  draft_content(format: core_format!): String!

  """The draft id used to format the draft files in draft_content."""
  draft_id: Int!

  """Time description that follows engage's convention"""
  time_description: String!

  """A flag to detect whether the discussion had been editted or not."""
  edited: Boolean!

  """Owner of this discussion."""
  owner: core_user!

  """
  The interactor against this discussion. If user_id is not set then the user in session
  will be used to run check against.
  """
  discussion_interactor(user_id: param_integer): container_workspace_discussion_interactor!

  """
  The comment cursor, which to tell how many comments to be loaded.
  If it is null, then there are no records of comments.
  """
  comment_cursor: String

  """
  The number of comments related to this discussion. Note that this does not include total replies
  """
  total_comments: Int!

  """The number of reactions to this discussion."""
  total_reactions: Int!

  """
  A magic value for content's format. Normally it would be FORMAT_JSON_EDITOR which is 42.
  """
  content_format: Int!

  """The context's id of a discussion."""
  workspace_context_id: Int!
}

"""
Interactor of the user (could be user in session) against the discussion - based on discussion's id.
"""
type container_workspace_discussion_interactor {
  """Discussion's id."""
  discussion_id: Int!

  """Workspace's id that the discussion's id belongs to."""
  workspace_id: Int!

  """Check for ability to update."""
  can_update: Boolean!

  """Check for ability to delete."""
  can_delete: Boolean!

  """Check for ability to comment on it."""
  can_comment: Boolean!

  """The actor, against the workspace's discussion."""
  user: core_user!

  """Whether this current user is able to react to the discussion or not."""
  can_react: Boolean!

  """
  Whether this user had already been reacted to the workspace's discussion or not.
  """
  reacted: Boolean!

  """Whether this user able to report the discussion or not."""
  can_report: Boolean!

  """Whether this discussion has already been removed."""
  removed: Boolean!
}

type container_workspace_discussion_search_result {
  """Workspace's id that this discussion belongs to."""
  workspace_id: Int!

  """Discussion's id"""
  discussion_id: Int!

  """Result type"""
  instance_type: container_workspace_content_type!

  """Content instance id"""
  instance_id: Int!

  """Content produce from content_format and the graphql format"""
  content(format: core_format!): String!

  """
  A magic value for content's format. Normally it would be FORMAT_JSON_EDITOR which is 42.
  """
  content_format: Int!

  """Time description that follows engage's convention"""
  time_description: String!

  """Owner of this discussion."""
  owner: core_user!
}

enum container_workspace_discussion_sort {
  RECENT
  DATE_POSTED
}

type container_workspace_discussion_sort_option {
  value: container_workspace_discussion_sort!
  label(format: core_format!): String!
}

type container_workspace_file {
  """File id."""
  id: Int!

  """File fullname."""
  file_name(format: core_format!): String!

  """File size"""
  file_size(format: core_format!): String!

  """File extionsion."""
  extension(format: core_format!): String!

  """
  The user who uploaded the file. However, this will not be correctly right if for cases like admin who edit the
  content with newly uploaded files.
  """
  author: core_user!

  """The date of uploaded file."""
  date(format: core_date_format!): String!

  """The url to let any user download it."""
  download_url: String!

  """The url to navigate to place that this file is being used."""
  context_url: String!

  """
  If it is null then the file does not have any alt text added or the file can be none-image file.
  """
  file_url: String!
  alt_text: String
  mimetype: String!
  file_type: container_workspace_file_type!
}

type container_workspace_file_area {
  repository_id: Int!
  item_id: Int!
  url: String!
  accept_types: [String!]!
  context_id: Int!
}

type container_workspace_file_extension_option {
  value: String!
  label(format: core_format!): String!
}

enum container_workspace_file_sort {
  RECENT
  NAME
  SIZE
}

type container_workspace_file_sort_option {
  value: container_workspace_file_sort!
  label(format: core_format!): String!
}

enum container_workspace_file_type {
  VIDEO
  IMAGE
  AUDIO

  """Other file type such as pdf, doc"""
  OTHERS
}

"""Member of the workspace"""
type container_workspace_member {
  """
  The  target member's id that this interactor can action against it.
  This will be a field of table {user_enrolment}.
  """
  id: Int!

  """User enrolled to the workspace"""
  user: core_user!

  """The workspace id that this user is a member of."""
  workspace_id: Int!

  """The interactor of this member user against the workspace."""
  workspace_interactor: container_workspace_workspace_interactor!

  """The status of this member record."""
  status: container_workspace_member_status!

  """The time stamp that this user joined the workspace."""
  time_joined(format: core_date_format!): String!

  """
  The interactor of an actor (user in session) against this member. Whether the user can perform specific actions
  toward the member or not. If user_id is not set then the user in session will be used.
  """
  member_interactor(user_id: Int): container_workspace_member_interactor!

  """Audiences via which the member joined."""
  audiences: [core_cohort!]!
}

"""The interactor type of a user against the workspace's member."""
type container_workspace_member_interactor {
  """
  The  target member's id that this interactor can action against it.
  This will be a field of table {user_enrolment}.
  """
  member_id: Int!

  """Whether this actor can remove the member or not."""
  can_remove: Boolean!

  """The actor user who can perform action against the member."""
  user: core_user!
}

"""Member request - to join a workspace."""
type container_workspace_member_request {
  """Member request's id. Id within table "ttr_workspace_member_request"."""
  id: Int!

  """The requester's record."""
  user: core_user!

  """The format string of when this request has been created."""
  time_description: String!

  """Whether the request has been accepted or not."""
  is_accepted: Boolean!

  """
  Whether the request has been declined or not.
  The reason why this field is here was because the member_request can be in cancelled status.
  Hence we cannot just tell that the request has been declined by the status of not accepted.
  """
  is_declined: Boolean!

  """The workspace's id where user is trying to request member of."""
  workspace_id: Int!

  """
  Workspace interactor against the target workspace for this very user who is the creator of member request.
  """
  workspace_interactor: container_workspace_workspace_interactor!

  """The optional request message from user input"""
  request_content: String
}

enum container_workspace_member_request_status {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
}

"""Enum sorting option for the members."""
enum container_workspace_member_sort {
  RECENT_JOIN
  NAME
}

type container_workspace_member_sort_option {
  value: container_workspace_member_sort!
  label(format: core_format!): String!
}

enum container_workspace_member_status {
  ACTIVE
  SUSPENDED
}

type container_workspace_notification {
  message: String!
  type: String!
}

enum container_workspace_notification_status {
  ON
  OFF
}

"""Input type for container_workspace_remove_audience"""
input container_workspace_remove_audience_input {
  workspace_id: param_integer!
  audience_id: param_integer!
}

"""Result type for container_workspace_remove_audience"""
type container_workspace_remove_audience_result {
  result: Boolean!
}

type container_workspace_share_access_check_result {
  """Whether we want to warn the actor or not."""
  warning: Boolean!

  """The message that we want to warn the actor."""
  message: String!
}

"""input type for querying users for workspace operations."""
input container_workspace_user_query {
  filters: container_workspace_users_filter!
  order_by: String
  order_dir: core_users_order_dir
  result_size: param_integer
  cursor: String
}

"""
@deprecated since 16.0; only used together with deprecated query container_workspace_user_table_fields
"""
type container_workspace_user_table_field {
  """
  The field position that is pointing to card_display_field position.
  Can either be from 0 to 3 - in total it is 4.
  """
  position: Int!
  label: String!
}

"""Filters for querying users for workspace operations."""
input container_workspace_users_filter {
  """The workspace id to work with"""
  workspace_id: core_id!

  """Other core filters."""
  core_filters: core_users_filter
}

type container_workspace_workspace {
  id: Int!
  name(format: core_format!): String!
  description(format: core_format!): String

  """Summary format text value"""
  description_format: Int!

  """Url to the workspace"""
  url: String!

  """
  All the capability check against the actor that is interacting with the workspace.
  All the state check of an actor against within the workspace.
  If the actor_id was not being set, then user in session will be used.
  """
  interactor(actor_id: param_integer): container_workspace_workspace_interactor!

  """Total number of members within the workspace."""
  total_members: Int!

  """Total number of audiences synchronized with the workspace."""
  total_audiences: Int!

  """Url for default image."""
  image(theme: param_component): String!

  """Time description of a workspace about create/update time."""
  time_description: String!
  access: container_workspace_access!

  """Number of requests to join workspace."""
  total_member_requests: Int!

  """Number of discussions within a workspace."""
  total_discussions: Int!

  """
  The workspace's owner. If it is empty, meaning that there is no current user.
  """
  owner: core_user

  """Context's id associate with this workspace."""
  context_id: Int!
}

type container_workspace_workspace_access_option {
  value: container_workspace_access
  label(format: core_format!): String!
}

"""All the action available for a user within a workspace category."""
type container_workspace_workspace_category_interactor {
  """Current actor."""
  user: core_user!

  """Whether the user has capability to create a public workspace or not."""
  can_create_public: Boolean!

  """Whether the user has capability to create a private workspace or not."""
  can_create_private: Boolean!

  """Whether the user has capability to create a hidden workspace or not."""
  can_create_hidden: Boolean!

  """
  Whether the user has the ability to create any style of workspace or not.
  """
  can_create: Boolean!

  """The context's id of workspace (course) categories."""
  context_id: Int!
}

"""
All the action available for a user within a workspace, also this includes the states of a user.
"""
type container_workspace_workspace_interactor {
  """Current workspace being checked against."""
  workspace_id: Int!

  """Current actor."""
  user: core_user!

  """Whether the user has capability to update a workspace or not."""
  can_update: Boolean!

  """Whether the user has capability to delete a workspace or not."""
  can_delete: Boolean!

  """
  Whether the user is able to add other members to the workspace or not.
  """
  can_add_members: Boolean!

  """
  Whether the user is able to invite other members to the workspace or not.
  """
  can_invite: Boolean!

  """Whether the user is able to join the workspace or not."""
  can_join: Boolean!

  """Whether the user is able to leave the workspace or not."""
  can_leave: Boolean!

  """Reason the user can not leave the workspace."""
  cannot_leave_reason: container_workspace_cannot_leave_reason

  """Whether user owns the workspace or not."""
  own: Boolean!

  """Whether the user had been joined the workspace or not."""
  joined: Boolean!

  """Whether the user is an admin within workspaces or not."""
  workspaces_admin: Boolean!

  """Whether the user actor is able to request to join or not."""
  can_request_to_join: Boolean!

  """Whether the user actor is able to view workspace or not."""
  can_view: Boolean!

  """Whether the user actor has requested to join or not."""
  has_requested_to_join: Boolean!

  """Whether user is able to view the discussion tab"""
  can_view_discussions: Boolean!

  """Whether the user is able to create discussions"""
  can_create_discussions: Boolean!

  """Whether the user actor is able to view the member tab"""
  can_view_members: Boolean!

  """Whether the user actor is able to view the library tab."""
  can_view_library: Boolean!

  """
  Whether the user actor is able to view the member requests block or not.
  """
  can_view_member_requests: Boolean!

  """Whether the user can share items to the workspace library"""
  can_share_resources: Boolean!

  """Whether the user can unshare items from the workspace library"""
  can_unshare_resources: Boolean!

  """Whether the current user had muted the workspace or not."""
  muted: Boolean!

  """Whether the user actor has already seen this workspace or not."""
  has_seen(last_check_time: param_integer): Boolean!

  """
  Whether the current user is able to transfer the ownership of workspace or not.
  """
  can_transfer_ownership: Boolean!

  """Whether the current user can add audiences to the workspace"""
  can_add_audiences: Boolean!
}

"""Enum sorting option for the workspace"""
enum container_workspace_workspace_sort {
  RECENT
  ALPHABET
  SIZE
}

type container_workspace_workspace_sort_option {
  value: container_workspace_workspace_sort!
  label(format: core_format!): String!
}

"""Enum to determined how to load the workspace from."""
enum container_workspace_workspace_source {
  """All the workspaces in the system."""
  ALL

  """Only including the workspace that you are a creator."""
  OWNED

  """Only including the workspace that you are member of."""
  MEMBER

  """Other workspace that user is not a part of."""
  OTHER

  """Workspaces that user is member of or a creator."""
  MEMBER_AND_OWNED
}

type container_workspace_workspace_source_option {
  value: container_workspace_workspace_source!
  label(format: core_format!): String!
}

"""
What type of LinkedIn Learning asset it is.
See https://docs.microsoft.com/en-us/linkedin/learning/reference/learningassets#assettype
"""
enum contentmarketplace_linkedin_asset_type {
  COURSE
  LEARNING_PATH
  VIDEO
}

"""Output of the add activity mutation."""
type contentmarketplace_linkedin_catalog_import_add_activity_result {
  success: Boolean!
  message: String!
  redirect_url: String
}

"""Input for the catalogue import create course mutation."""
input contentmarketplace_linkedin_catalog_import_course_input {
  learning_object_id: core_id!
  category_id: core_id!
}

"""Output of the create course mutation."""
type contentmarketplace_linkedin_catalog_import_create_course_result {
  success: Boolean!
  message: String!
  redirect_url: String
}

"""A filter node for display on the catalogue import page."""
type contentmarketplace_linkedin_catalog_import_filter_node implements totara_core_tui_tree_node_interface {
  id: String!
  label(format: core_format = PLAIN): String!

  """Unused"""
  linkUrl: String
  children: [contentmarketplace_linkedin_catalog_import_filter_node!]!
  content: [contentmarketplace_linkedin_catalog_import_filter_select_option!]
}

"""
A filter multi-select option for display on the catalogue import page.
"""
type contentmarketplace_linkedin_catalog_import_filter_select_option {
  id: String!
  label: String!
}

"""Input for the catalogue import filter options query."""
input contentmarketplace_linkedin_catalog_import_learning_objects_filter_options_input {
  language: String!
}

"""Output of the learning objects filter options query."""
type contentmarketplace_linkedin_catalog_import_learning_objects_filter_options_result {
  subjects: [contentmarketplace_linkedin_catalog_import_filter_node!]!
  time_to_complete: [contentmarketplace_linkedin_catalog_import_filter_node!]!
  in_catalog: [contentmarketplace_linkedin_catalog_import_filter_node!]!
}

"""Applicable filters for the learning objects query."""
input contentmarketplace_linkedin_catalog_import_learning_objects_filters_input {
  language: String!
  search: String!
  subjects: [core_id!]!
  time_to_complete: [String!]!
  in_catalog: [String!]!
  ids: [core_id!]!
}

"""Input for the catalogue import query."""
input contentmarketplace_linkedin_catalog_import_learning_objects_input {
  pagination: core_pagination_input!
  filters: contentmarketplace_linkedin_catalog_import_learning_objects_filters_input!
  sort_by: contentmarketplace_linkedin_catalog_import_sort_by!
}

"""Output of the learning objects query."""
type contentmarketplace_linkedin_catalog_import_learning_objects_result implements core_pageable_result {
  items: [contentmarketplace_linkedin_learning_object]!
  total: Int!
  next_cursor: String!

  """Array of the labels for the filters that were input to the query."""
  selected_filters(format: core_format = PLAIN): [String!]!
}

"""
The way that the learning objects can be sorted by for the catalogue import.
"""
enum contentmarketplace_linkedin_catalog_import_sort_by {
  ALPHABETICAL
  LATEST
}

"""Classifications representing groups of related learning objects."""
type contentmarketplace_linkedin_classification {
  id: core_id!
  name(format: core_format = PLAIN): String!
  type: contentmarketplace_linkedin_classification_type!
  parents: [contentmarketplace_linkedin_classification!]!
  children: [contentmarketplace_linkedin_classification!]!
}

"""The level in the hierarchy that a classification is."""
enum contentmarketplace_linkedin_classification_type {
  LIBRARY
  SUBJECT
  SKILL
  TOPIC
}

"""A LinkedIn Learning asset that can be turned into a Totara course."""
type contentmarketplace_linkedin_learning_object implements totara_contentmarketplace_learning_object {
  id: core_id!
  name(format: core_format = PLAIN): String!
  language: String!
  image_url: String
  description(format: core_format = PLAIN): String!
  description_include_html(format: core_format = HTML): String!
  short_description(format: core_format = PLAIN): String!
  last_updated_at(format: core_date_format = DATE): core_date!
  published_at(format: core_date_format = DATE): core_date!
  web_launch_url: String!
  sso_launch_url: String
  asset_type: contentmarketplace_linkedin_asset_type!
  classifications: [contentmarketplace_linkedin_classification!]!
  subjects: [contentmarketplace_linkedin_classification!]!
  level: contentmarketplace_linkedin_level
  display_level: String!
  time_to_complete(format: contentmarketplace_linkedin_timespan_format = HUMAN): String
  courses: [core_course!]!
}

"""
The skill level required for the LinkedIn learning material.
See https://docs.microsoft.com/en-us/linkedin/learning/reference/learningassets#difficultylevel
"""
enum contentmarketplace_linkedin_level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

type contentmarketplace_linkedin_locale {
  """A code string, that machine can understand."""
  language: String!

  """
  The country code, that machine can understand.
  Sometimes country is not provided by Linkedin, hence this field
  is nullable.
  """
  country: String

  """
  A label that is a translate version of language code string.
  This is meant for human to read.
  """
  language_label: String!
}

"""
How a timespan should be displayed.
When in seconds, it will display the raw number of seconds.
In human format, it will be displayed in the format "XXh YYm ZZs"
"""
enum contentmarketplace_linkedin_timespan_format {
  SECONDS
  HUMAN
}

type contentmarketplaceactivity_linkedin_content_marketplace implements mod_contentmarketplace_content_marketplace_activity {
  module: mod_contentmarketplace_content_marketplace!
  learning_object: contentmarketplace_linkedin_learning_object!
}

"""
A single category. Categories are a hierarchical structure which contain learning items such as courses.
"""
type core_category {
  """Category ID."""
  id: core_id!

  """Category name."""
  name(format: core_format = PLAIN): String!

  """Category idnumber"""
  idnumber: String

  """Category description"""
  description(format: core_format = HTML): String

  """The format of the categories description"""
  descriptionformat: core_format

  """
  Parent category this category is inside, or null for top level categories.
  """
  parent: core_category

  """Sub-categories that are inside this category."""
  children: [core_category!]!

  """
  Depth of this category in the tree. One means top-level category, add one for each level below that.
  """
  depth: Int

  """Courses that are inside this category."""
  courses: [core_course!]!

  """
  Number of courses in this category (not including courses in sub-categories).
  """
  coursecount: Int!
  timemodified(format: core_date_format = TIMESTAMP): core_date

  """Force theme used in category, or null if not overridden in category."""
  theme: String
}

"""Specify how a list of categories will be sorted."""
enum core_category_sort_order {
  """
  Sort in the order specified on the manage courses and categories page.
  """
  SORTORDER

  """Sort alphabetically by category name."""
  NAME

  """Sort alphabetically by category id number."""
  IDNUMBER
}

type core_cohort {
  id: core_id!
  name(format: core_format = PLAIN): String!
  idnumber(format: core_format = PLAIN): String
  description(format: core_format = HTML): String
  type: core_cohort_type!
  active: Boolean!
  members_count: Int!
}

enum core_cohort_order_dir {
  ASC
  DESC
}

enum core_cohort_type {
  STATIC
  DYNAMIC
}

input core_cohorts_filter {
  ids: [param_integer]
  name: param_text
  type: param_text
  active: param_boolean
}

input core_cohorts_query {
  """
  Leaf context from which to start search ie get cohorts from this context and
  all its parent contexts until and including the system context.
  """
  leaf_context_id: core_id
  filters: core_cohorts_filter
  order_by: String
  order_dir: core_cohort_order_dir
  result_size: param_integer
  cursor: String

  """
  Scope results to tenant that the leaf context belongs to.
  If this is set to true & multitenancy is enabled, system level audiences will not be returned when a
  context associated with a particular tenant is passed.
  """
  tenant_scope: Boolean
}

type core_cohorts_result implements core_pageable_result {
  items: [core_cohort!]!
  total: Int!
  next_cursor: String!
}

"""
A single course object. Courses are containers for a collection of activities that make up a unit of learning.
"""
type core_course {
  """ID of the course"""
  id: core_id!

  """Course idnumber"""
  idnumber: String

  """Course fullname"""
  fullname(format: core_format = PLAIN): String!

  """Course shortname"""
  shortname(format: core_format = PLAIN): String!

  """Course summary"""
  summary(format: core_format = HTML): String

  """The format of the courses summary"""
  summaryformat: core_format

  """The date/time the course was created"""
  timecreated(format: core_date_format = TIMESTAMP): core_date

  """The date/time the course was last modified"""
  timemodified(format: core_date_format = TIMESTAMP): core_date

  """Category this course is in, or null for the frontpage course."""
  category: core_category

  """ID of this course's category, or zero for the frontpage course."""
  categoryid: core_id

  """Course start date"""
  startdate(format: core_date_format = TIMESTAMP): core_date

  """Course end date"""
  enddate(format: core_date_format = TIMESTAMP): core_date

  """Force theme used in course, or null if not overridden in course."""
  theme: String

  """
  Force language used in course, or null if language not overridden in course.
  """
  lang: String

  """Course format."""
  format: String

  """
  Course type values are integers matching TOTARA_COURSE_TYPE_* constants defined in course/lib.php.
  """
  coursetype: Int

  """
  Name of course icon used to represent the course, or 'default' if no icon has been set.
  """
  icon: String

  """A URL for the course image"""
  image: String

  """Course sections/topics/weeks"""
  sections: [core_course_section!]!

  """The number of modules in the course accessible to the user."""
  modcount: Int

  """The showgrades (show gradebook to learners) flag for the course"""
  showgrades: Boolean!

  """The enablecompletion (enable completion tracking) flag for the course"""
  completionenabled: Boolean!

  """The completion information relating to the course and current user"""
  completion: core_course_completion

  """
  The completion criteria for the course, and associated completion info for the current user
  """
  criteria: [core_course_criteria]!

  """The aggregation method for the overall course criteria"""
  criteriaaggregation: String

  """Course view url."""
  url: String!

  """The course's format metadata information."""
  course_format: core_course_format!
}

"""
A single course completion object. A completion object tracks the status of a specific user in a specific course.
"""
type core_course_completion {
  """
  The id of the completion record, however this can be null if not started or not enrolled.
  """
  id: Int

  """
  A string representing the current learner's completion state in a course
  """
  status: String

  """
  A string used as a get_string key for a longer completion status description
  """
  statuskey(format: core_format = PLAIN): String

  """
  A percentage describing how far the user has progressed through this course
  """
  progress: Float

  """The time the user completed this course"""
  timecompleted(format: core_date_format = TIMESTAMP): core_date

  """The user's grade in the course as an absolute value"""
  gradefinal: Float

  """The maximum achievable grade for the course"""
  grademax: Float

  """The user's grade in the course as a percentage of grademax"""
  gradepercentage: Float
}

"""
A single course criteria object. Criteria define the rules that determine whether a user has completed a course or activity.
"""
type core_course_criteria {
  """The id of the course module"""
  id: core_id!

  """The type of the criteria"""
  type: String

  """The aggregation used for this criteria type grouping"""
  typeaggregation(format: core_format = HTML): String

  """The name or descriptor of the criteria"""
  criteria(format: core_format = PLAIN): String

  """What needs to be done to complete the criteria"""
  requirement(format: core_format = HTML): String

  """How far the user is through the requirement"""
  status(format: core_format = HTML): String

  """Whether the current user has completed the criteria"""
  complete: Boolean

  """The date the current user completed the criteria"""
  completiondate(format: core_date_format = TIMESTAMP): core_date
}

"""GraphQL type for the course's format."""
type core_course_format {
  """
  The type name of course format, which can be any of the course's format plugin names.
  For example it can be any of the following:
  + topics
  + singleactivity
  + demo
  + none
  """
  format: String!

  """A human-readable label for the course format."""
  name: String!

  """
  Flag to identify whether the course format supports the course view page or not.
  """
  has_course_view_page: Boolean!
}

"""
A single course activity module. Activities are individual pieces of learning within a course.
"""
type core_course_module {
  """The id of the course module"""
  id: core_id!

  """The idnumber of the course module"""
  idnumber(format: core_format = PLAIN): String

  """The id in the instance, e.g. the id of the scorm in the scorm table"""
  instanceid: core_id!

  """The type of the module (assignment, quiz, etc)"""
  modtype(format: core_format = PLAIN): String!

  """The name of the course module"""
  name(format: core_format = PLAIN): String!

  """The view url of the course module"""
  viewurl(format: core_format = PLAIN): String

  """The completion settings of the course module"""
  completion: String

  """Whether completion is enabled or not for the course module"""
  completionenabled: Boolean!

  """The completion status of the current user in the course module"""
  completionstatus: String

  """The rpl completion status of the current user in the course module"""
  rpl: Boolean

  """
  The percentage completion progress of the current user in the course module
  """
  progress: Int

  """Whether the course module is available for the current user"""
  available: Boolean!

  """
  The reason for the course module not being available to the current user
  """
  availablereason(format: core_format = HTML): [String]!

  """Whether the course module displays the description or not"""
  showdescription: Boolean

  """The description of the course module"""
  description(format: core_format = HTML): String

  """The format of the description field."""
  descriptionformat: core_format

  """The user's grade in the course as an absolute value"""
  gradefinal: Float

  """The maximum achievable grade for the course"""
  grademax: Float

  """The user's grade in the course as a percentage of grademax"""
  gradepercentage: Float
}

"""
A single course section. Courses contain named sections to organise a set of activities.
"""
type core_course_section {
  """Course section id"""
  id: core_id!

  """Title of the course section"""
  title(format: core_format = PLAIN): String

  """The course modules in the section"""
  modules: [core_course_module]

  """Whether the course section is available to the viewing user"""
  available: Boolean!

  """
  The reason why the course section is not available to the viewing user. It
  will be empty if the course section is available.
  """
  availablereason(format: core_format = HTML): [String]

  """The summary of the course section"""
  summary(format: core_format = HTML): String
  summaryformat: core_format
}

"""Specify how a list of courses will be sorted."""
enum core_course_sort_order {
  """
  Sort in the order specified on the manage courses and categories page.
  """
  SORTORDER

  """Sort alphabetically by course fullname."""
  FULLNAME

  """Sort alphabetically by course shortname."""
  SHORTNAME

  """Sort alphabetically by course id number."""
  IDNUMBER
}

"""
Represents standard unix timestamps stored in database.

For input, use either an integer timestamp, numeric string or an ISO-8601 string.

Output can usually be selected via format argument. See core_date_format
enum for the list of supported formats.
"""
scalar core_date

"""
List of supported output formats for core_date scalar.

The actual format used for userdate() is:
get_string('strftime' . strtolower($arg['format']), 'langconfig')
"""
enum core_date_format {
  """A standard UNIX timestamp value. 0 will be replaced with null."""
  TIMESTAMP

  """
  ISO-8601 time string in current user timezone, null if no date. Example output: 2022-09-01T12:06:53+1200
  """
  ISO8601

  """Datetime string in the format: Thursday, 1 September 2022, 12:05 PM"""
  DAYDATETIME

  """Time string in the format: 12:08 PM"""
  TIME

  """Time string in the format: 12:08"""
  TIMESHORT

  """Date string in the format: 1 September 2022"""
  DATE

  """Date string in the format: 1 September"""
  DATESHORT

  """Date string in the format: 1/09/2022"""
  DATELONG

  """Datetime string in the format: 1 September 2022, 12:12 PM"""
  DATETIME

  """Datetime string in the format: 1/09/22, 12:12"""
  DATETIMESHORT

  """Datetime string in the format: 1/09/2022, 12:10"""
  DATETIMELONG

  """Datetime string in the format: 1 Sep 2022 at 12:12:07"""
  DATETIMESECONDS
}

type core_editor {
  """Name of the front-end module to load for this editor."""
  js_module(framework: param_alpha): String

  """The context's id where editor is being used."""
  context_id: Int!

  """The editor's name"""
  name: String!

  """Variant of the editor."""
  variant(
    """
    The variant name to find the variant metadata for editor.
    Default  to standard variant if none is provided.
    """
    variant_name: param_alphaext

    """
    The parameter to pass down to the variant, as it can be treated as
    extra data.
    """
    usage_identifier: core_editor_usage_identifier

    """
    A json encoded text string that the front-end want to pass to the server side for loading any other extra
    extension, for example: specific custom extension.
    
    The json content should look like:
    [
      {
        "name": "valid_extension_name",
        "options": {
          "some_key": "valid_extension_value"
        }
      },
      // And the list of extensions go on with the schema as same as object above.
    ]
    """
    extra_extensions: param_text
  ): core_editor_variant!
}

"""An input for usage identifier to pass to the editor."""
input core_editor_usage_identifier {
  component: param_component!
  area: param_area!

  """
  Sometimes the editor is used to create a new instance.
  Hence this instance_id field can be null-able.
  """
  instance_id: param_integer
}

type core_editor_variant {
  """JSON blob for extra options that the variant supports."""
  options: String

  """The variant name"""
  name: String!
}

"""Input schema for attempting an enrolment onto a course"""
input core_enrol_attempt_self_enrolment_input {
  """The id of the enrolement instance."""
  instanceid: core_id!

  """The id of the course"""
  courseid: core_id!

  """An optional password"""
  password: String
}

"""The return type for the enrolment attempt mutation"""
type core_enrol_attempt_self_enrolment_result {
  """Return whether the enrolment attempt was successful"""
  success: Boolean!

  """
  An optional string key to fetch for more information on unsuccessful attempts
  """
  msg_key: String
}

type core_enrol_course_info {
  """Whether the user has currently completed the course"""
  is_complete: Boolean!

  """Whether the user is currently enrolled in the course"""
  is_enrolled: Boolean!

  """Whether the course allows guest access"""
  guest_access: Boolean!

  """Whether the course has self-enrolment options for the user"""
  can_enrol: Boolean!

  """
  Whether the user has capabilities to access the course regardless of enrolment
  """
  can_view: Boolean!

  """information on any enabled guest or selfenrolment instances"""
  enrolment_options: [core_enrol_instance]!
}

type core_enrol_instance {
  """The id of the active course enrolment instance"""
  id: core_id!

  """The type of enrolment, i.e. guest, self"""
  type: String!

  """The name of the role that the enrolment would assign"""
  role_name: String

  """The name of the enrolment type"""
  custom_name: String

  """The sort order of the enrolment type"""
  sort_order: Int

  """Whether the enrolment requires a password or not"""
  password_required: Boolean
}

"""File area configuration for uploading files."""
type core_file_area {
  repository_id: Int!
  draft_id: Int!
  url: String!
}

"""File type information."""
type core_file_type {
  category: String!
  valid_extensions: [String!]!
}

"""
Rich-text output format. Note that some rich-text formats may not be renderable in other formats.
"""
enum core_format {
  """
  Outputs the stored value unchanged. Most commonly used when editing a value.
  """
  RAW

  """
  Outputs the stored value for display within an HTML page. Handles escaping of HTML entities.
  """
  HTML

  """Outputs the stored value in a way suitable for plain-text display."""
  PLAIN

  """Outputs the stored value in Markdown format."""
  MARKDOWN

  """
  Outputs the stored value in a JSON structure, suitable for use by a compatible JSON editor (e.g. Weka).
  """
  JSON_EDITOR

  """
  Outputs the stored value in a format suitable for use within the Totara mobile app.
  """
  MOBILE
}

"""Hashtag information."""
type core_hashtag {
  id: core_id!
  tag: String!
}

"""
Represents database id fields (numeric string). 0 is converted to NULL.
"""
scalar core_id

"""Language string for localisation."""
type core_lang_string {
  lang: String!
  identifier: String!
  component: String!
  string: String!
}

type core_link {
  title(format: core_format!): String
  description(format: core_format!): String
  url: String
  image: String
  videoheight: Int
  videowidth: Int
}

"""
Acceptable notification states, as defined in lib/classes/output/notification.php
note: message, problem and redirect are deprecated.
"""
enum core_notification_state {
  """State to use when an operation succeeds without any problems."""
  success

  """
  State to use for a notification to provide information, rather than the result of an action.
  """
  info

  """
  State to use for a notification when there was an issue that you want to warn about, but that is not an error.
  """
  warning

  """
  State to use for a notification about an error, when something has failed in some way.
  """
  error
}

"""
Represents a result that is broken up into 'pages' returning a subset of the data, an overall total record count plus
the next cursor containing the information needed to load the next page.
"""
interface core_pageable_result {
  """
  Total number of records returned by the request (not the number returned in this result/page, but the overall count).
  """
  total: Int!

  """
  Opaque string containing information to allow the system to identify the next set of results that should be returned
  after this one. This value can be passed into a query that uses core_pagination_input to fetch the next page.
  """
  next_cursor: String!
}

"""
Contains pagination information needed to load the next page of a query.
Note this input type supports both cursor-based and offset-based (page-based) pagination. The method to use will depend on
the implementation by the query.
"""
input core_pagination_input {
  """
  Next cursor. Opaque string obtained from the next_cursor property of core_pageable_result. Used by the query to
  identify which records to return.
  """
  cursor: String

  """Number of items to return."""
  limit: param_integer

  """Page number (only used by offset-based cursors)."""
  page: param_integer
}

"""Options available when specifying the direction of a sort."""
enum core_sort_direction_enum {
  """
  Sort column in ascending order. This refers to 0, 1, 2, 3 for numbers and A, B, C, D for strings.
  """
  ASC

  """
  Sort column in descending order. This refers to 3, 2, 1, 0 for numbers and D, C, B, A for strings.
  """
  DESC
}

"""Input type for specifying sorting of arbitrary data."""
input core_sort_input {
  """
  String containing either a single field or a comma-separated list of fields to be sorted by.
  Allowed fields are defined in the specific data provider and should be documented in the query,
  but typically column options will align with existing type field names.
  """
  column: String!

  """The sort direction of the column or columns."""
  direction: core_sort_direction_enum
}

"""String output format."""
enum core_string_format {
  """
  Outputs the stored value unchanged. Most commonly used when editing a value.
  """
  RAW

  """
  Outputs the stored value for display within an HTML page. Handles escaping of HTML entities.
  """
  HTML

  """Outputs the stored value in a way suitable for plain text display."""
  PLAIN
}

"""Multiline plain-text (textarea) output format."""
enum core_text_format {
  """
  Outputs the stored value unchanged. Most commonly used when editing a value.
  """
  RAW

  """
  Outputs the stored value for display within an HTML page. Handles escaping of HTML entities.
  """
  HTML

  """Outputs the stored value in a way suitable for plain text display."""
  PLAIN

  """
  Outputs the stored value in a format suitable for use within the Totara mobile app.
  """
  MOBILE
}

"""Category representing a bunch of properties."""
type core_theme_category {
  name: String!
  properties: [core_theme_property!]!
}

"""Input type for categories."""
input core_theme_category_input {
  name: param_alphanumext!
  properties: [core_theme_property_input!]!
}

"""File that can be set in theme settings."""
type core_theme_file {
  ui_key: String!
  type: core_file_type!
  default_url: String
  current_url: String
  file_area: core_file_area!
}

"""File input type."""
input core_theme_file_input {
  ui_key: param_alphanumext!
  draft_id: Int!
  action: core_theme_file_input_action!
}

"""Available actions to take on files."""
enum core_theme_file_input_action {
  """Save current file."""
  SAVE

  """Reset to default file."""
  RESET
}

"""Totara product flavours enabled."""
type core_theme_flavours {
  engage: Boolean!
  learn: Boolean!
  perform: Boolean!
}

"""CSS property."""
type core_theme_property {
  name: String!
  type: core_theme_property_type!
  value: String!
  selectors: [String!]
}

"""Input type for properties."""
input core_theme_property_input {
  name: param_alphanumext!
  type: core_theme_property_type!
  value: String!
  selectors: [param_alphanumext!]
}

"""Enum defining the valid property types."""
enum core_theme_property_type {
  boolean
  file
  image
  text
  value
  html
}

"""Query result object for theme settings."""
type core_theme_settings_result {
  categories: [core_theme_category!]!
  files: [core_theme_file!]!
  flavours: core_theme_flavours!
  context_id: core_id!
}

"""User type object, containing information about an individual user."""
type core_user {
  """Internal database id of the user."""
  id: core_id!

  """The id number of the user."""
  idnumber: String

  """
  Username for the user. This field is used in combination with the password for logging in with some authentication types.
  """
  username(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """
  Full name of the user. This field combines other name fields as specified by the site display settings.
  """
  fullname(format: core_format = PLAIN): String!

  """First name of the user."""
  firstname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Last name of the user."""
  lastname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Middle name of the user."""
  middlename(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Alternate name of the user."""
  alternatename(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Phonetic spelling of the user's first name."""
  firstnamephonetic: String

  """Phonetic spelling of the user's last name."""
  lastnamephonetic: String

  """Email address of the user."""
  email: String

  """The user's address."""
  address(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Primary phone number of the user."""
  phone1(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Secondary phone number of the user."""
  phone2(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Department the user belongs to."""
  department(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Institution (organisation) the user belongs to."""
  institution(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """City where the user is located."""
  city(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """
  Country of the user, displayed as a string, for example 'New Zealand'.
  """
  country: String

  """Description field for the user's profile."""
  description(
    """
    Output format this field should be formatted for.
    Note: if the system setting 'profilesforenrolledusersonly' is enabled, the profile description of a user who is not
    yet enrolled in any course will be hidden. Description could also be hidden
    until a user has at least one role assignment.
    (This is to prevent misuse of user profile information by spammers.)
    """
    format: core_format = HTML
  ): String

  """Format of the description field, as stored in the database."""
  descriptionformat: core_format

  """URL pointing to the main version of the user's profile image."""
  profileimageurl: String

  """URL pointing to a small version of the user's profile image."""
  profileimageurlsmall: String

  """
  Alternate text description of the profile image, for accessibility purposes.
  """
  profileimagealt(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Language of the user, for example 'en_us'."""
  lang: String

  """
  Theme setting for the user or an empty string if the user is using the site default theme.
  """
  theme: String

  """
  Whether this user is marked as suspended. Suspended users are unable to log in.
  """
  suspended: Boolean

  """
  Timezone of the user, as a string, for example 'Pacific/Auckland'.
  
  Note that if the admin setting 'forcetimezone' is configured, its value will be used here instead.
  """
  timezone: String

  """
  Comma-separated string of interests the user has or null if no interests are assigned.
  """
  interests: String

  """
  Timestamp of when this user first accessed the site (or null if never).
  """
  firstaccess(
    """Date format that firstaccess should be returned in."""
    format: core_date_format = TIMESTAMP
  ): core_date

  """
  Timestamp of when this user last accessed the site (or null if never).
  """
  lastaccess(
    """Date format that lastaccess should be returned in."""
    format: core_date_format = TIMESTAMP
  ): core_date

  """URL for the user's profile."""
  url(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Skype username for the user's profile."""
  skype(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """User profile summary card settings for this user."""
  card_display: core_user_card_display!

  """
  Custom fields are additional fields that can be defined by a Site Administrator to allow additional specific
  data to be connected to users. Hidden and restricted custom fields require 'moodle/user:viewalldetails' capability.
  """
  custom_fields: [core_user_custom_field!]

  """This user's job assignments."""
  job_assignments: [totara_job_job_assignment!]!
}

"""Metadata type for configuring the display user information component."""
type core_user_card_display {
  """
  Local url to point to the user's avatar, if this is null, then the viewer will definitely not able to view
  the profile picture.
  """
  profile_picture_url: String
  profile_picture_alt: String

  """
  Profile url can be null if the viewer cannot view the target user's profile.
  """
  profile_url: String
  display_fields: [core_user_card_display_field!]!
}

"""
Type to store the information related on how to display field of users.
"""
type core_user_card_display_field {
  """The value of the field that we are trying to display to the viewer."""
  value(format: core_format = PLAIN): String

  """
  Associate url field, if it is null then there is no associate url field with the value field.
  If there is then the value should be displayed as a link.
  """
  associate_url: String

  """Label string for the field."""
  label: String

  """Whether it is a custom field or not."""
  is_custom: Boolean!
}

"""Input provided when creating a user."""
input core_user_create_user_input {
  """
  Username for the user. This field is used in combination with the password for logging in with some authentication types.
  Username must be unique on the site.
  """
  username: String!

  """
  Email address of the user. Must be unique unless 'allowaccountssameemail' setting is enabled (not recommended).
  """
  email: param_email!

  """
  Initial password for user. This will only be used with certain auth methods such as 'manual'.
  This field is required unless you set generate_password to true.
  """
  password: String

  """First name of the user."""
  firstname: String!

  """Last name of the user."""
  lastname: String!

  """The id number of the user."""
  idnumber: String

  """Optional phonetic spelling of the user's first name."""
  firstnamephonetic: String

  """Optional phonetic spelling of the user's last name."""
  lastnamephonetic: String

  """Middle name of the user."""
  middlename: String

  """Alternate name of the user."""
  alternatename: String

  """
  City where the user is located. If not provided the system will use the admin setting 'defaultcity' if set.
  """
  city: String

  """Rich-text description field for the user's profile."""
  description: String

  """
  Format of the description field for the user's profile. See core_format for options.
  """
  descriptionformat: core_format

  """URL for the user's profile."""
  url: String

  """Skype username for the user's profile."""
  skype: String

  """
  Institution (organisation) the user belongs to, for the user's profile. This
  is not connected to job assignment organisation.
  """
  institution: String

  """Department the user belongs to."""
  department: String

  """Primary phone number of the user."""
  phone1: String

  """Secondary phone number of the user."""
  phone2: String

  """The user's address."""
  address: String

  """
  ISO-3166 two-letter country code of the user, e.g. 'NZ'. Country code list:
  https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
  """
  country: String

  """
  Timezone of the user, as a string, for example 'Pacific/Auckland'. If not
  provided the value from the admin setting 'timezone'
  will be used instead. We recommend using location-based timezones rather than UTC+1 etc. A list of available timezones can
  be found at https://www.php.net/manual/en/timezones.php.
  
  Note that if the admin setting 'forcetimezone' is configured, any value provided
  here will be stored but not displayed/used - the forcetimezone value will be used instead.
  """
  timezone: String

  """
  Language of the user, for example 'en_us'. Valid options depend on the site's installed language packs.
  """
  lang: String

  """
  Theme setting for the user. If the Totara system setting for 'allow user themes' is enabled, then a valid theme name
  will be accepted from this request, e.g. 'ventura'. If the system setting is
  disabled, then the theme value will be ignored.
  """
  theme: String

  """
  Authentication plugin for this user, for example 'manual'. The available options will depend on which authentication
  plugins are installed and enabled on the site.
  """
  auth: String

  """
  Calendar type for this user, for example 'gregorian'. The available options will depend on which calendar plugins are
  installed and enabled on the site.
  """
  calendartype: String

  """
  Whether this user should be completely prevented from receiving any email notifications. Default is false.
  """
  emailstop: Boolean = false

  """
  Whether this user should be marked as suspended. Suspended users are unable to log in. Default is false.
  """
  suspended: Boolean = false

  """
  A reference to a tenant that the user should be assigned to. The API client must be permitted to assign the specified
  tenant. If not given the user will be automatically assigned based on the API client's tenant, or to the System.
  
  Ignored if multitenancy is disabled.
  """
  tenant: totara_tenant_tenant_reference

  """
  Optional array of custom profile field data (each array element describes a single custom field value for this user).
  Hidden and restricted custom fields require 'moodle/user:viewalldetails' capability.
  """
  custom_fields: [core_user_custom_field_input!]

  """Prompt the user to change their password on their next login."""
  force_password_change: Boolean

  """
  Generate a random password for the user and send it to them via email.
  """
  generate_password: Boolean
}

"""
Type containing read-only custom field data. Each object of this type represents the
value of the field. The format of this string will depend on the custom field type it is representing but will
contain the field's stored value.
"""
type core_user_custom_field {
  """Shortname of the custom field the data relates to."""
  shortname: String!

  """
  The custom field data value for this user. Returns the value stored in the database for this user and
  field, without any processing (such as inserting field default when value is empty, or converting of
  timestamps to human-readable strings).
  """
  data: String!

  """
  Format of the stored value of the data field. Provided at the time the data is stored, see the
  `core_user_custom_field_input` input type for more information. Currently only used by the
  text area custom field type when rendering in the UI.
  
  Options are:
  * 1: HTML
  * 2: Plain text
  * 4: Markdown
  * 5: JSON
  """
  data_format: Int

  """Indicating data type of user profile custom field."""
  data_type: String!
}

"""Input type representing a single custom field for a particular user."""
input core_user_custom_field_input {
  """
  Shortname is used to uniquely identify the custom field the data is for. It must exactly match the shortname
  of a custom field that exists on the site or an error will be thrown. Note if the same shortname is provided
  multiple times in a request (not recommended) they will be applied in order so the last one will be used.
  """
  shortname: String!

  """
  Represents the value for the custom field for this user. This field is required unless the delete flag is set.
  The format of this data will depend on the field type of the field specified by shortname:
  
  * checkbox: string of 0 (unchecked) or 1 (checked).
  * menu: A string exactly matching one of the menu options (case sensitive).
  * text: A string of plain-text.
  * textarea: A string of formatted text, in the format specified via the data_format field (see below).
  * datetime: A string in the format YYYY-MM-DD or YYYY-MM-DD-HH-MM-SS
  (depending on if the field uses the 'Include time?' option).
  If the field defines a year range, the input will be validated to ensure it
  falls within that range. If only YYYY-MM-DD is provided for
  a field where 'Include time?' is enabled, midnight will be used for the time.
  Stored as a unix timestamp using the timezone of the client's service account.
  * date: A string in the format YYYY-MM-DD. Stored as a timestamp so uses noon UTC for time to ensure
    date displayed is consistent across most timezones.
  """
  data: String

  """
  Optional property, which must be provided textarea field types but should not
  be passed for other types. Used to record the format of the 'data' field so it
  can be correctly rendered.
  Options are:
  * 1: HTML
  * 2: Plain-text
  * 4: Markdown
  * 5: JSON
  """
  data_format: Int

  """
  Flag indicating that the data for this custom field should be deleted. This
  flag should only be set if not passing new or updated data for the field.
  """
  delete: Boolean
}

"""
Mutation result type returned after deletion of a user.

Returns the id of deleted user if it was deleted successfully.
"""
type core_user_delete_user_result {
  """
  Internal database id of the user that was just deleted from the system.
  """
  user_id: core_id!
}

"""Input provided when updating a user."""
input core_user_update_user_input {
  """
  Username for the user. This field is used in combination with the password for logging in with some authentication types.
  Username must be unique on the site.
  """
  username: param_username

  """First name of the user."""
  firstname: String

  """Last name of the user."""
  lastname: String

  """
  Email address of the user. Must be unique unless 'allowaccountssameemail' admin setting is enabled.
  """
  email: param_email

  """
  New password for the user. This will only be used with certain auth methods such as 'manual'.
  """
  password: String

  """The id number of the user."""
  idnumber: String

  """Optional phonetic spelling of the user's first name."""
  firstnamephonetic: String

  """Optional phonetic spelling of the user's last name."""
  lastnamephonetic: String

  """Middle name of the user."""
  middlename: String

  """Alternate name of the user."""
  alternatename: String

  """
  City where the user is located. If not provided the system will use the admin setting 'defaultcity' if set.
  """
  city: String

  """Rich-text description field for the user's profile."""
  description: String

  """Rich-text format of the description field."""
  descriptionformat: core_format

  """URL for the user's profile."""
  url: String

  """Skype username for the user's profile."""
  skype: String

  """
  Institution (organisation) the user belongs to, for the user's profile. This
  is not connected to job assignment organisation.
  """
  institution: String

  """Department the user belongs to."""
  department: String

  """Primary phone number of the user."""
  phone1: String

  """Secondary phone number of the user."""
  phone2: String

  """The user's address."""
  address: String

  """
  ISO-3166 two-letter country code of the user, e.g. 'NZ'. Country code list:
  https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2.
  """
  country: String

  """
  Timezone of the user, as a string, for example 'Pacific/Auckland'. We recommend using location-based timezones rather
  than UTC+1 etc. A list of available timezones can be found at https://www.php.net/manual/en/timezones.php.
  
  Note that if the admin setting 'forcetimezone' is configured, any value provided
  here will be stored but not displayed/used - the forcetimezone value will be used instead.
  """
  timezone: String

  """
  Language of the user, for example 'en_us'. Valid options depend on the site's installed language packs.
  """
  lang: String

  """
  Theme setting for the user. If the admin setting 'allowuserthemes' is enabled, then a valid theme name
  will be accepted from this request, e.g. 'ventura'. If that admin setting is
  disabled, then the theme value will be ignored.
  """
  theme: String

  """
  Authentication plugin for this user, for example 'manual'. The available options will depend on which authentication
  plugins are installed and enabled on the site.
  """
  auth: String

  """
  Calendar type for this user, for example 'gregorian'. The available options will depend on which calendar plugins are
  installed and enabled on the site.
  """
  calendartype: String

  """
  Whether this user should be completely prevented from receiving any email notifications. Default is false.
  """
  emailstop: Boolean

  """
  Whether this user should be marked as suspended. Suspended users are unable to log in. Default is false.
  """
  suspended: Boolean

  """
  A reference to a tenant that the user should be assigned to. The API client
  must be permitted to assign the specified tenant.
  To change tenant the API client must have 'totara/tenant:manageparticipants' capability in system context.
  """
  tenant: totara_tenant_tenant_reference

  """
  Optional array of custom profile field data (each array element describes a single custom field value for this user).
  Hidden and restricted custom fields require 'moodle/user:viewalldetails' capability.
  """
  custom_fields: [core_user_custom_field_input!]

  """Prompt the user to change their password on their next login."""
  force_password_change: Boolean

  """
  Generate a random password for the user and send it to them via email.
  """
  generate_password: Boolean
}

"""
Input for identifying a user.

The user must be specified by providing one of the following:

* The user's internal database id
* The user's idnumber
* The user's username
* The user's email address

A user reference must uniquely identify a single user to be valid. Deleted users are excluded, as are users not
accessible due to multitenancy restrictions.
"""
input core_user_user_reference {
  """Internal database id of the user."""
  id: core_id

  """Username of the user."""
  username: String

  """The id number of the user."""
  idnumber: String

  """Email address of the user."""
  email: String
}

"""
Mutation result type returned after creation of a new user or updates to an existing user.
Returns the user that was created or updated.
"""
type core_user_user_result {
  """
  User object for the user that was created or updated as part of the operation.
  """
  user: core_user!
}

"""
Input type used when querying for a list of users. Specifies pagination and sorting information that can impact the
structure of the results.
"""
input core_user_users_query {
  """
  Pagination information such as which page to return and the number of results requested.
  """
  pagination: core_pagination_input

  """
  The sort order of the query.
  Allowed entity fields for the sort column are 'id', 'firstname', 'lastname', 'username' and 'timemodified'.
  """
  sort: [core_sort_input!]
}

"""
Result returned from the core_user_users query. Contains a page of results along with pagination information.
"""
type core_user_users_result implements core_pageable_result {
  """Array of one page of users returned by the query."""
  items: [core_user!]!

  """Total number of users from this query (across all pages)."""
  total: Int!

  """Cursor to request the next set of results for this query."""
  next_cursor: String!
}

"""Filters for querying users."""
input core_users_filter {
  """Filters users by their record ids"""
  ids: [param_integer!]

  """Filters users by full names"""
  name: param_text
}

"""User list sort order."""
enum core_users_order_dir {
  ASC
  DESC
}

"""input type for querying users."""
input core_users_query {
  filters: core_users_filter
  order_by: String
  order_dir: core_users_order_dir
  result_size: param_integer
  cursor: String
}

"""User list query result."""
type core_users_result implements core_pageable_result {
  items: [core_user!]!
  total: Int!
  next_cursor: String!
}

type criteria_childcompetency_achievement_item {
  competency: totara_competency_competency!
  assigned: Boolean
  self_assignable: Boolean!
  value: totara_competency_scale_value
}

type criteria_childcompetency_achievements {
  current_user: Boolean!
  aggregation_method: Int!
  required_items: Int!
  items: [criteria_childcompetency_achievement_item!]
  is_valid: Boolean!
}

type criteria_coursecompletion_achievement_item {
  course: totara_core_learning_item
}

type criteria_coursecompletion_achievements {
  aggregation_method: Int!
  required_items: Int!
  items: [criteria_coursecompletion_achievement_item!]!
  is_valid: Boolean!
}

type criteria_linkedcourses_achievement_item {
  course: totara_core_learning_item
}

type criteria_linkedcourses_achievements {
  aggregation_method: Int!
  required_items: Int!
  items: [criteria_linkedcourses_achievement_item!]!
  is_valid: Boolean!
}

type criteria_othercompetency_achievement_item {
  competency: totara_competency_competency!
  assigned: Boolean
  self_assignable: Boolean!
  value: totara_competency_scale_value
}

type criteria_othercompetency_achievements {
  current_user: Boolean!
  aggregation_method: Int!
  required_items: Int!
  items: [criteria_othercompetency_achievement_item!]
  is_valid: Boolean!
}

type editor_weka_editor {
  extensions(
    """
    The component where the editor weka is used.
    Deprecated in favour of usage_identifier.
    """
    component: param_component

    """
    The specific area within the component where the editor weka is used.
    Deprecated in favour of usage_identifier.
    """
    area: param_area

    """
    Optional parameter to get the extensions. When the argument is passed, then it will
    superceed the component/area to get the list of extension. Otherwise, by default the
    list of extensions can be found by component/area
    """
    variant_name: param_alphaext

    """
    The parameter to pass down to the variant, as it can be treated as
    extra data.
    """
    usage_identifier: core_editor_usage_identifier

    """
    A json encoded text string that the front-end want to pass to the server side for loading any other extra
    extension, for example: specific custom extension.
    
    The json content should look like:
    [
      {
        "name": "valid_extension_name",
        "options": {
          "some_key": "valid_extension_value"
        }
      },
      // And the list of extensions go on with the schema as same as object above.
    ]
    """
    extra_extensions: param_text
  ): [editor_weka_extension!]!

  """To tell whether we are displaying toolbar or not."""
  showtoolbar(component: param_component, area: param_area): Boolean! @deprecated(reason: "The showtoolbar field had been deprecated and no longer needed")

  """The upload repository data"""
  repository_data: editor_weka_repository_data! @deprecated(reason: "The repository_data is now fetched from query editor_weka_repository_data")

  """
  The context's id where the editor is being used. This has to be done as part of constructing
  editor, most likely it can be context_system, if the component that is using editor is not providing one.
  """
  context_id: Int!

  """The current files within weka editor. If there are any."""
  files(
    """
    The component where the files are living.
    By default, this will be 'user'
    """
    component: param_component

    """
    The file area which identify the place within the component.
    By default, the value for this key will be 'draft'
    """
    file_area: param_area

    """The item's id - which should be the file draft id id."""
    item_id: param_integer
  ): [editor_weka_file!]! @deprecated(reason: "The files field got deprecated in favour of query editor_weka_draft_file")

  """The current draft files within weka editor. If there are any."""
  draft_files(
    """The id of the draft area"""
    draft_item_id: param_integer
  ): [editor_weka_file!]! @deprecated(reason: "The files field got deprecated in favour of query editor_weka_draft_file")
}

type editor_weka_extension {
  name: String!
  tuicomponent: String!

  """
  Options is an json_encoded string, this string should be decoded in the front-end and pass it to extension itself.
  """
  options: String
}

type editor_weka_file {
  filename: String!
  file_size: Int!
  mime_type: String!
  url(force_download: Boolean!): String!

  """
  If media_type is null, then this file is not a part of any embbedded-able media files.
  """
  media_type: editor_weka_media_type
  item_id: Int!
}

type editor_weka_file_draft_area {
  url: String!
  draftid: Int!
  repositoryid: Int!
}

enum editor_weka_media_type {
  IMAGE
  VIDEO
  AUDIO
}

type editor_weka_repository_data {
  url: String!
  repository_id: Int!

  """
  A numeric string that represent for bytes. We are using string instead of
  integer for this one because, graphql Integer does not support up to 64-bit integers but only 32-bit integers.
  """
  max_bytes: String!
}

type engage_article_article {
  id: core_id!
  resource: totara_engage_resource!
  content(format: core_format!): String!
  format: Int!
  topics: [totara_topic_topic!]!
  updateable: Boolean!
  sharedbycount: Int!
  owned: Boolean!
  timedescription: String!
  timeview: totara_engage_timeview
  bookmarked: Boolean!
  image: String

  """A status check of a user in session against the article"""
  reacted: Boolean!
}

type engage_article_draft_item {
  resourceid: core_id!
  format: Int!
  content: String

  """File draft's id"""
  file_item_id: Int!
}

type engage_survey_answer_option {
  id: core_id!
  questionid: core_id!
  value(format: core_format!): String!
}

type engage_survey_option_result {
  """Option's id"""
  id: Int!

  """Option's label text"""
  value(format: core_format!): String!
  questionid: Int!

  """The number of user(s) that had voted for this option."""
  votes: Int!
}

type engage_survey_question {
  id: core_id!
  value(format: core_format!): String!
  user: core_user!
  answertype: Int!
  options: [engage_survey_answer_option!]!
}

input engage_survey_question_parameter {
  """
  If id is null, then this is about adding new question. Otherwise updating the question with specific id.
  """
  id: core_id
  value: String!
  answertype: param_integer!
  options: [String!]!
}

type engage_survey_question_result {
  """Question's id"""
  id: Int!

  """Question's label text"""
  value(format: core_format!): String!

  """Question's type"""
  answertype: Int!

  """Number of participants"""
  participants: Int!

  """Collection of the voted option"""
  options: [engage_survey_option_result!]!

  """The number of user(s) that had attemted this question"""
  votes: Int!
}

type engage_survey_survey {
  id: core_id!
  timeexpired: String
  questions: [engage_survey_question!]!
  resource: totara_engage_resource!
  topics: [totara_topic_topic!]!
  questionresults: [engage_survey_question_result!]!
  shares: Int
  sharedbycount: Int
  bookmarked: Boolean!
  timedescription: String!
  owned: Boolean!
  voted: Boolean!
  reacted: Boolean!
  updateable: Boolean!
}

"""Goal scale value"""
type hierarchy_goal_goal_scale_value {
  id: core_id!

  """Human readable label for this scale value item"""
  name(format: core_format = PLAIN): String!

  """Rich text description of this scale value item"""
  description(format: core_format = HTML): String

  """ID of the scale this scale value is associated with"""
  scaleid: core_id!

  """
  Numeric sort order used to arrange the values in a scale relative to each other
  """
  sortorder: Int!

  """ID of the user who made the last change to this scale value record"""
  usermodified: core_id

  """
  True if the scale value is equal to or higher than the scale's minimum proficient value.
  """
  proficient: Boolean!
}

"""Parameters for goals status change mutation"""
input hierarchy_goal_perform_linked_goals_change_status_input {
  participant_instance_id: core_id!
  goal_assignment_id: core_id!
  goal_type: totara_hierarchy_goal_scope!
  scale_value_id: core_id!
  section_element_id: core_id!
}

type hierarchy_goal_perform_linked_goals_change_status_result {
  perform_status: hierarchy_goal_perform_status!
  already_exists: Boolean
}

"""Represents a status change made in the subject instance"""
type hierarchy_goal_perform_status {
  id: core_id!
  user_id: core_id!
  user: core_user!

  """
  If the activity got deleted we can't load the user that made the change or the role
  """
  status_changer_user: core_user
  status_changer_relationship: totara_core_relationship

  """
  Role of the user making the change with respect to the user viewing the rating.
  """
  status_changer_role(format: core_format = PLAIN): String!
  activity: mod_perform_activity

  """The scale value can be null"""
  scale_value: hierarchy_goal_goal_scale_value
  created_at(format: core_date_format = TIMESTAMP): core_date!
}

"""Input schema for marking popup messages as read mutation"""
input message_popup_mark_messages_read_input {
  message_ids: [core_id!]!
}

"""Output schema for marking popup messages as read mutation"""
type message_popup_mark_messages_read_result {
  read_message_ids: [core_id!]!
}

"""Popup notification message"""
type message_popup_message {
  """Message ID"""
  id: core_id!

  """Message subject line"""
  subject: String!

  """Message full message text"""
  fullmessage(format: core_format): String

  """Message full message html"""
  fullmessagehtml(format: core_format): String

  """Format of the full message text"""
  fullmessageformat: core_format

  """Context URL if provided, link to message subject"""
  contexturl: String

  """Message sent timestamp"""
  timecreated(format: core_date_format = TIMESTAMP): core_date!

  """Is message read?"""
  isread: Boolean!
}

type ml_recommender_cursor {
  total: Int!

  """Next cursor, if this is null, then we are at the end of the page."""
  next: String
}

"""Current learning item for mobile app."""
type mobile_currentlearning_item {
  """
  ID of the learning item
  NOTE: This can not use the core_id type because we are adding the type to ensure uniqueness.
  """
  id: String!

  """
  Type of the learning item
  (course, program, certification)
  """
  itemtype: String!

  """
  Component of the learning item
  (core_course, totara_program, totara_certification)
  """
  itemcomponent: String!

  """Learning item shortname"""
  shortname(format: core_format = PLAIN): String!

  """Learning item fullname"""
  fullname(format: core_format = PLAIN): String!

  """Learning item description"""
  description(format: core_format = MOBILE): String

  """The format of the learning item description"""
  description_format: core_format

  """
  Learning item progress, a percentage of how far
  through the item the user viewing it is.
  """
  progress: Float

  """Learning item URL, a link to view the learning item"""
  url_view: String!

  """
  Learning item duedate, the date the learning item
  is due for the viewing user.
  """
  duedate(format: core_date_format = TIMESTAMP): core_date

  """
  Learning item duedate status, as computed by server. One of
  "info", "warning", "danger", or "overdue".
  """
  duedate_state(format: core_format = PLAIN): String

  """Flag indicating whether item is suitable for native mobile display"""
  mobile_coursecompat: Boolean

  """A URL for the course image, but only if it isn't a default image"""
  mobile_image: String
}

"""A page of catalog items for mobile app."""
type mobile_findlearning_catalog_item {
  """Unique ID of the catalog item"""
  id: core_id!

  """The unique ID of of the itemtype i.e. the program id or course id"""
  itemid: core_id!

  """
  The type of learning item this catalog item is course, program, certification, playlist, engage_article
  """
  item_type: String

  """The name or fullname of the catalog item"""
  title(format: core_format = PLAIN): String

  """
  Whether the image is enabled for the mobile catalog - currently hardcoded true
  """
  image_enabled: Boolean!

  """The URL of the catalog items image"""
  image_url: String

  """The URL to view the item, i.e. course/view.php"""
  view_url: String

  """
  The rich text summary for the catalog items description - note that this is
  not the summary, it is a field designated in the catalog settings.
  """
  summary(format: core_format = MOBILE): String

  """The format of the catalog items summary as a string"""
  summary_format: core_format

  """The alt text associated with the catalog items image"""
  image_alt: String

  """
  Whether the description is enabled for the mobile catalog - currently hardcoded true
  """
  description_enabled: Boolean!

  """
  The catalog items description - note that this is not the summary, it is a field designated in the catalog settings.
  """
  description(format: core_format = PLAIN): String
}

"""A container object with catalog items and surrounding info"""
type mobile_findlearning_catalog_page {
  """
  The total amount of unchecked records i.e. could be 500 even if you can only see 100
  """
  max_count: Int

  """
  A pointer to pass through when requesting more records, i.e. start from record 45 and get the next 10
  """
  limit_from: Int

  """Whether or not this page contains the last of the viewable records"""
  final_records: Boolean

  """The catalog items"""
  items: [mobile_findlearning_catalog_item]!
}

"""filter parameters to retrieve a filtered page of data"""
input mobile_findlearning_filter_input {
  """The value for the full text search filter."""
  catalog_fts: String
}

"""The return type for the enrol attempt mutation."""
type mobile_findlearning_guest_access_result {
  """Return whether the enrolment attempt was successful"""
  success: Boolean!

  """
  An optional string key to fetch for more information on unsuccessful attempts
  """
  message: String
}

"""A generic input schema for attempting an enrolment onto a course"""
input mobile_findlearning_guest_password_input {
  """The id of the enrolement instance."""
  instanceid: core_id!

  """The id of the course"""
  courseid: core_id!

  """An optional password"""
  password: String
}

"""Input for filtering what users can be selected."""
input mod_approval_active_forms_filter_input {
  """Matches against the fullname of potential users"""
  title: String
}

"""Input for active form."""
input mod_approval_active_forms_input {
  """Pagination input"""
  pagination: core_pagination_input

  """Filter results"""
  filters: mod_approval_active_forms_filter_input

  """Sort by input"""
  sort_by: String
}

"""Input specifying an assignment and workflow_stage_id"""
input mod_approval_ancestor_assignment_approval_levels_input {
  assignment_id: core_id!
  workflow_stage_id: core_id!
}

"""
Result type for ancestor_assignment_approval_levels query, a collection of assignment_approval_levels
"""
type mod_approval_ancestor_assignment_approval_levels_result {
  items: [mod_approval_assignment_approval_level]!
}

"""An approval workflow application"""
type mod_approval_application {
  id: core_id!

  """Name of workflow type"""
  workflow_type: String!

  """Application name for display purposes"""
  title(format: core_format = PLAIN): String

  """Date created"""
  created(format: core_date_format = TIMESTAMP): core_date

  """Date submitted"""
  submitted(format: core_date_format = TIMESTAMP): core_date

  """User who submitted"""
  submitter: core_user

  """Date completed"""
  completed(format: core_date_format = TIMESTAMP): core_date

  """Overall progress ENUM"""
  overall_progress: mod_approval_application_overall_progress_states!

  """Overall progress label"""
  overall_progress_label: String!

  """Your progress ENUM"""
  your_progress: mod_approval_application_your_progress_states

  """Your progress label"""
  your_progress_label: String!

  """Latest published submission (excludes submissions saved as draft)"""
  last_published_submission: mod_approval_application_submission

  """Reference ID number"""
  id_number(format: core_format = PLAIN): String

  """Applicant user"""
  user: core_user!

  """User who created the application"""
  creator: core_user!

  """User who owns the application, initially the creator"""
  owner: core_user!

  """Stages and activities"""
  workflow_stages: [mod_approval_application_workflow_stage!]!

  """Interactor object for the current user"""
  interactor: mod_approval_application_interactor!

  """The current state of the application"""
  current_state: mod_approval_application_state

  """Last action for application"""
  last_action: mod_approval_application_action

  """Approvers of the current approval level"""
  approver_users: [core_user!]!

  """Application page URLs"""
  page_urls: mod_approval_application_page_urls!
}

"""Actions in application"""
type mod_approval_application_action {
  id: core_id!

  """Action taken (approved, rejected, withdrawn)"""
  label: String!

  """User who performed the action"""
  user: core_user!

  """Creation timestamp"""
  created(format: core_date_format = TIMESTAMP): core_date!
}

"""A list of possible actions"""
enum mod_approval_application_action_enum {
  APPROVE
  REJECT
  WITHDRAW_BEFORE_SUBMISSION
  WITHDRAW_IN_APPROVALS
}

"""Take an action on an application"""
input mod_approval_application_action_input {
  application_id: core_id!
  action: mod_approval_application_action_enum!
}

"""Activities in application"""
type mod_approval_application_activity {
  id: core_id!

  """Actor"""
  user: core_user

  """Time taken"""
  timestamp(format: core_date_format = TIMESTAMP): core_date

  """Internal activity type"""
  activity_type: Int!

  """Human readable activity type name"""
  activity_type_name(format: core_format = PLAIN): String!

  """Additional info"""
  description(format: core_format = RAW): String!

  """Workflow stage"""
  stage: mod_approval_workflow_stage

  """Approval level"""
  approval_level: mod_approval_workflow_stage_approval_level
}

"""Receive the application approvers"""
input mod_approval_application_approvers_input {
  application_id: Int!
  workflow_stage_approval_level_id: Int!
}

"""
Form schema for application - this is full definition of a form with sections and fields
"""
type mod_approval_application_form_schema {
  form_schema: String!
  form_data: String!
}

"""Generic application input"""
input mod_approval_application_input {
  application_id: core_id!
}

"""Application interactor"""
type mod_approval_application_interactor {
  """User can view this application"""
  can_view: Boolean!

  """User can edit this application"""
  can_edit: Boolean!

  """User can delete this application"""
  can_delete: Boolean!

  """User can mark approval in this application"""
  can_approve: Boolean!

  """User can clone this application"""
  can_clone: Boolean!

  """User can withdraw this application"""
  can_withdraw: Boolean!

  """User can edit application without invalidating"""
  can_edit_without_invalidating: Boolean!
}

"""
A list of possible overall_progress states that an application can be in
"""
enum mod_approval_application_overall_progress_states {
  DRAFT
  IN_PROGRESS
  FINISHED
  REJECTED
  WITHDRAWN
}

"""Page URLs"""
type mod_approval_application_page_urls {
  """Edit page"""
  edit: String!

  """Print preview page"""
  preview: String!

  """View page"""
  view: String!
}

"""Input for publish application"""
input mod_approval_application_publish_input {
  application_id: core_id!
  form_data: String!
  keep_approvals: Boolean
}

"""Output of application"""
type mod_approval_application_result {
  application: mod_approval_application!
}

"""Input for save application"""
input mod_approval_application_save_input {
  application_id: core_id!
  form_data: String!
}

"""Current state of application"""
type mod_approval_application_state {
  """Stage"""
  stage: mod_approval_workflow_stage!

  """Aproval level"""
  approval_level: mod_approval_workflow_stage_approval_level

  """Whether the state belongs to the "draft" stage"""
  is_draft: Boolean!

  """Whether the state belongs to a "finsihed" stage"""
  is_finished: Boolean!

  """Whether the application is in a state where it can be submitted"""
  is_before_submission: Boolean!

  """Whether the application is awaiting approvals"""
  is_in_approvals: Boolean!
}

"""Application submission"""
type mod_approval_application_submission {
  id: core_id!

  """Form data"""
  form_data: String!

  """Date submitted"""
  submitted(format: core_date_format = TIMESTAMP): core_date

  """Date last updated"""
  updated(format: core_date_format = TIMESTAMP): core_date

  """User submitted"""
  user: core_user!

  """Whether this submission is the first submission on the application"""
  is_first_submission: Boolean!
}

"""Workflow stage of application"""
type mod_approval_application_workflow_stage {
  """Associated stage"""
  stage: mod_approval_workflow_stage!

  """Actities in this stage"""
  activities: [mod_approval_application_activity!]!
}

"""
A list of possible your_progress states that an application can be filtered by
"""
enum mod_approval_application_your_progress_states {
  PENDING
  APPROVED
  REJECTED
  NA
}

"""Paginated list of applications for dashboards."""
type mod_approval_applications_page implements core_pageable_result {
  """List of applications"""
  items: [mod_approval_application!]!

  """Total number of applications"""
  total: Int!

  """Cursor to request the next set of results for this query"""
  next_cursor: String!
}

"""A single approver's entity."""
union mod_approval_approver_entity_union = core_user | totara_core_relationship

"""A single approver input."""
input mod_approval_approver_input {
  assignment_approver_type: mod_approval_approver_type!
  identifier: core_id!
}

"""Approver type enum."""
enum mod_approval_approver_type {
  RELATIONSHIP
  USER
}

"""Input for archive override assignment"""
input mod_approval_archive_override_assignment_input {
  """Assignment id to archive."""
  assignment_id: core_id!
}

"""Result for archiving an override assignment."""
type mod_approval_archive_override_assignment_result {
  """Result of operation"""
  success: Boolean!

  """Archived assignment"""
  assignment: mod_approval_workflow_assignment!
}

"""
Properties relating to an assignment and approval level, such as approvers.
"""
type mod_approval_assignment_approval_level {
  assignment: mod_approval_workflow_assignment!
  approval_level: mod_approval_workflow_stage_approval_level!
  approvers: [mod_approval_assignment_approver!]!
  approvers_with_inheritance: [mod_approval_assignment_approver!]!
  inherited_from_assignment_approval_level: mod_approval_assignment_approval_level
}

"""Input specifying an assignment approval level"""
input mod_approval_assignment_approval_level_input {
  assignment_id: core_id!
  workflow_stage_approval_level_id: core_id!
}

"""A single approver."""
type mod_approval_assignment_approver {
  id: core_id!

  """Approver type"""
  type: mod_approval_approver_type!

  """Approver's identity"""
  approver_entity: mod_approval_approver_entity_union!
}

"""Input for assignment_identifiers query"""
input mod_approval_assignment_identifiers_input {
  workflow_id: core_id!
  assignment_type: mod_approval_assignment_type!
}

"""Input for new/exists assignment."""
input mod_approval_assignment_manage_input {
  """Assignment type code (organisation|position|cohort)"""
  type: mod_approval_assignment_type!

  """ID of assignment database record"""
  identifier: Int!

  """Workflow stage id"""
  workflow_stage_id: core_id!
}

"""Workflow assignment result simple."""
type mod_approval_assignment_result {
  """Assignment."""
  assignment: mod_approval_workflow_assignment!

  """The approval levels, containing approvers, in the assignment."""
  assignment_approval_levels: [mod_approval_assignment_approval_level!]!
}

"""
The input for setting the approvers in one approval level of an assignment.
"""
input mod_approval_assignment_set_level_approvers_input {
  """Assignment id."""
  assignment_id: core_id!

  """Approval level id."""
  approval_level_id: core_id!

  """Approvers to set."""
  approvers: [mod_approval_approver_input!]!
}

"""Assignment type enum."""
enum mod_approval_assignment_type {
  ORGANISATION
  POSITION
  COHORT
}

"""Create a new application"""
input mod_approval_create_application_input {
  assignment_id: core_id!
  job_assignment_id: core_id
  applicant_id: core_id!
}

"""Mutation returns application after creating a new one"""
type mod_approval_create_application_result {
  application_id: core_id!
}

"""A user to create new application menu for"""
input mod_approval_create_new_application_menu_query {
  applicant_id: core_id
  workflow_type_id: core_id
}

"""Form"""
type mod_approval_form {
  """Form id"""
  id: core_id!

  """Plugin name"""
  plugin_name: String!

  """Form title"""
  title(format: core_format = PLAIN): String!

  """Active form."""
  active: Boolean!

  """Form created timestamp"""
  created(format: core_date_format = DATELONG): core_date!

  """Form last updated timestamp"""
  updated(format: core_date_format = DATELONG): core_date!

  """Latest version of form"""
  latest_version: mod_approval_form_version!

  """Active version of form"""
  active_version: mod_approval_form_version
}

"""Paginated forms."""
type mod_approval_form_page_result implements core_pageable_result {
  """List of forms on the page."""
  items: [mod_approval_form!]!

  """Total number of forms."""
  total: Int!

  """Cursor to the next form page."""
  next_cursor: String!
}

"""Output of form"""
type mod_approval_form_result {
  form: mod_approval_form!
}

"""Form version."""
type mod_approval_form_version {
  """Form version id"""
  id: core_id!

  """Version identifier"""
  version: String!

  """JSON form schema at this version"""
  json_schema: String!

  """Form version status (draft, active, archived)"""
  status: Int!

  """Form version created timestamp"""
  created(format: core_date_format = DATELONG): core_date!

  """Form version last updated timestamp"""
  updated(format: core_date_format = DATELONG): core_date!
}

"""Activities query result"""
type mod_approval_load_application_activities_result {
  activities: [mod_approval_application_activity!]
}

"""Application query result"""
type mod_approval_load_application_result {
  application: mod_approval_application!
}

"""Options for load_workflow_types query"""
input mod_approval_load_workflow_types_input {
  """Return only workflow_types where there is an active workflow"""
  require_active_workflow: Boolean!
}

"""Input filters for manageable workflows."""
input mod_approval_manageable_workflows_filters_input {
  """Filter by workflow status."""
  status: mod_approval_status_enum

  """Search for specific workflow name or idnumber."""
  name: String

  """Filter by assignment type."""
  assignment_type: mod_approval_assignment_type

  """Filter by workflow type id."""
  workflow_type_id: param_integer
}

"""Input for manageable paginated workflows."""
input mod_approval_manageable_workflows_input {
  """Pagination input"""
  pagination: core_pagination_input

  """Filter results"""
  filters: mod_approval_manageable_workflows_filters_input

  """Sort by input"""
  sort_by: mod_approval_manageable_workflows_sort_option_enums = UPDATED
}

"""Input sort options for manageable workflows."""
enum mod_approval_manageable_workflows_sort_option_enums {
  """Sort by name"""
  NAME

  """Sort by last updated"""
  UPDATED

  """Sort by idnumber"""
  ID_NUMBER

  """Sort by status"""
  STATUS
}

"""My applications dashboard filters"""
input mod_approval_my_applications_filters {
  application_id: [core_id!]
  overall_progress: [mod_approval_application_overall_progress_states!]
}

"""My applications dashboard query options"""
input mod_approval_my_applications_input {
  pagination: core_pagination_input
  filters: mod_approval_my_applications_filters
  sort_by: mod_approval_my_applications_sort_by_options
}

"""A list of possible sort_by options for my_applications"""
enum mod_approval_my_applications_sort_by_options {
  SUBMITTED
  WORKFLOW_TYPE_NAME
  ID_NUMBER
  TITLE
}

"""
Create new application menu item - used to select which assignment a new application should be created for
"""
type mod_approval_new_application_menu_item {
  """Assignment ID acts as a unique key"""
  assignment_id: core_id!

  """Workflow_type name"""
  workflow_type: String!

  """Job assignment name"""
  job_assignment: String

  """Job assignment ID"""
  job_assignment_id: core_id
}

"""Applications for Other dashboard filters"""
input mod_approval_others_applications_filters {
  application_id: [core_id!]
  workflow_type_name: String
  overall_progress: [mod_approval_application_overall_progress_states!]
  your_progress: mod_approval_application_your_progress_states
  applicant_name: String
}

"""Applications for Others dashboard query options"""
input mod_approval_others_applications_input {
  pagination: core_pagination_input
  filters: mod_approval_others_applications_filters
  sort_by: mod_approval_others_applications_sort_by_options
}

"""A list of possible sort_by options for others_applications"""
enum mod_approval_others_applications_sort_by_options {
  SUBMITTED
  WORKFLOW_TYPE_NAME
  APPLICANT_NAME
  ID_NUMBER
  TITLE
}

"""Input filters for override assignments."""
input mod_approval_override_assignments_filters_input {
  """Search for specific entity (e.g. organisation) name."""
  name: String
}

"""Input for override assignments."""
input mod_approval_override_assignments_input {
  workflow_stage_id: core_id!

  """Pagination input"""
  pagination: core_pagination_input

  """Filter results"""
  filters: mod_approval_override_assignments_filters_input

  """Sort by input"""
  sort_by: mod_approval_override_assignments_sort_option_enums = NAME_ASC
}

"""Paginated override assignments."""
type mod_approval_override_assignments_page_result implements core_pageable_result {
  """List of assignment overrides on the page."""
  items: [mod_approval_workflow_assignment_approvals!]!

  """Total number of override assignments."""
  total: Int!

  """Cursor to the next override assignment page."""
  next_cursor: String!
}

"""Input sort options for override assignments."""
enum mod_approval_override_assignments_sort_option_enums {
  """Sort by name ascending"""
  NAME_ASC

  """Sort by name descending"""
  NAME_DESC
}

"""Input for override_for_assignment_type query"""
input mod_approval_override_for_assignment_type_input {
  workflow_id: core_id!
  assignment_type: mod_approval_assignment_type!
  assignment_identifier: core_id!
}

"""Input for selectable_applicants query"""
input mod_approval_selectable_applicants_input {
  """Pagination input"""
  pagination: core_pagination_input!

  """Workflow optional"""
  workflow_id: core_id

  """Filters input"""
  filters: mod_approval_selectable_users_filter_input
}

"""Input for filtering what users can be selected."""
input mod_approval_selectable_users_filter_input {
  """Matches against the fullname of potential users"""
  fullname: String
}

"""Input for selectable users query"""
input mod_approval_selectable_users_input {
  """Pagination input"""
  pagination: core_pagination_input!

  """Workflow"""
  workflow_id: core_id!

  """Filters input"""
  filters: mod_approval_selectable_users_filter_input
}

"""Workflow version status enums."""
enum mod_approval_status_enum {
  """Draft status"""
  DRAFT

  """Active status"""
  ACTIVE

  """Archived status"""
  ARCHIVED
}

"""Report success."""
type mod_approval_success_result {
  success: Boolean!
}

"""Paginated list of selectable users."""
type mod_approval_user_page implements core_pageable_result {
  """List of users."""
  items: [core_user!]!

  """Total number of users."""
  total: Int!

  """Cursor to request the next set of results for this query"""
  next_cursor: String!
}

"""Workflow"""
type mod_approval_workflow {
  """Workflow id"""
  id: core_id!

  """Workflow idnumber"""
  id_number: String!

  """Workflow course context id"""
  context_id: core_id!

  """Workflow name"""
  name(format: core_format = PLAIN): String!

  """Workflow description"""
  description(format: core_format = PLAIN): String!

  """Workflow type"""
  workflow_type: mod_approval_workflow_type!

  """Latest workflow version."""
  latest_version: mod_approval_workflow_version!

  """Workflow created timestamp"""
  created(format: core_date_format = DATELONG): core_date!

  """Default assignment."""
  default_assignment: mod_approval_workflow_assignment!

  """Workflow last updated timestamp"""
  updated(format: core_date_format = DATELONG): core_date!

  """Interactor object for the current user"""
  interactor: mod_approval_workflow_interactor!
}

"""Results container for workflow approval level query"""
type mod_approval_workflow_approval_level_result {
  approval_level: mod_approval_workflow_stage_approval_level!
}

"""Workflow assigned to union."""
union mod_approval_workflow_assigned_to_union = totara_hierarchy_organisation | core_cohort | totara_hierarchy_position

"""Workflow assignment."""
type mod_approval_workflow_assignment {
  id: core_id!

  """Workflow assignment type."""
  assignment_type_label: String!

  """Status code"""
  status: Int!

  """Status label"""
  status_label: String!

  """Workflow assignment name."""
  name: String!

  """Module context id associated with this assignment"""
  contextid: Int

  """User group the assignment is for."""
  assigned_to: mod_approval_workflow_assigned_to_union!
}

"""Workflow assignment approvals."""
type mod_approval_workflow_assignment_approvals {
  """Workflow assignment."""
  assignment: mod_approval_workflow_assignment!

  """The approval levels, containing approvers, in the assignment."""
  assignment_approval_levels: [mod_approval_assignment_approval_level!]!
}

"""Input for clone workflow"""
input mod_approval_workflow_clone_input {
  workflow_id: core_id!
  name: param_text
  default_assignment: mod_approval_workflow_default_assignment_input
}

"""Result for clone workflow"""
type mod_approval_workflow_clone_result {
  workflow: mod_approval_workflow!
}

"""Input for create workflow"""
input mod_approval_workflow_create_input {
  """Workflow name"""
  name: String!

  """Workflow type id"""
  workflow_type_id: core_id!

  """Form id"""
  form_id: core_id!

  """Assignment type"""
  assignment_type: mod_approval_assignment_type!

  """Assignment identifier"""
  assignment_identifier: core_id!

  """Workflow description"""
  description: String

  """Workflow idnumber"""
  id_number: String
}

"""Input for default assignment"""
input mod_approval_workflow_default_assignment_input {
  """Assignment id"""
  id: core_id!

  """Assignment type enum"""
  type: mod_approval_assignment_type!
}

"""Input for edit workflow"""
input mod_approval_workflow_edit_input {
  """Workflow id"""
  workflow_id: param_integer!

  """Workflow idnumber"""
  id_number: String!

  """Workflow name"""
  name: String!

  """Workflow description"""
  description: String
}

"""Generic workflow input."""
input mod_approval_workflow_id_number_is_unique_input {
  workflow_id: param_integer
  id_number: String!
}

"""Generic workflow input."""
input mod_approval_workflow_input {
  workflow_id: param_integer!
}

"""Workflow interaction condition."""
type mod_approval_workflow_interaction_condition {
  condition_key: String
  condition_data: String
}

"""Workflow interactor."""
type mod_approval_workflow_interactor {
  can_edit: Boolean!
  can_clone: Boolean!
  can_archive: Boolean!
  can_unarchive: Boolean!
  can_activate: Boolean!
  can_delete: Boolean!
  can_publish: Boolean!
  can_upload_approver_overrides: Boolean!
  can_assign_roles: Boolean!
  can_view_applications_report: Boolean!
}

"""Paginated workflows."""
type mod_approval_workflow_page_result implements core_pageable_result {
  """List of workflows on the page."""
  items: [mod_approval_workflow!]!

  """Total number of workflows."""
  total: Int!

  """Cursor to the next workflow page."""
  next_cursor: String!
}

"""Input for shuffling approval levels."""
input mod_approval_workflow_reorder_levels_input {
  """Workflow stage id"""
  workflow_stage_id: core_id!

  """Approval level ids"""
  workflow_stage_approval_level_ids: [core_id!]!
}

"""Output of workflow"""
type mod_approval_workflow_result {
  workflow: mod_approval_workflow!
}

"""Workflow stage"""
type mod_approval_workflow_stage {
  """Workflow stage id"""
  id: core_id!

  """Workflow stage name"""
  name(format: core_format = PLAIN): String!

  """Stage number: 1, 2, 3, ..."""
  ordinal_number: Int!

  """Stage type"""
  type: mod_approval_workflow_stage_type!

  """Stage features"""
  features: [mod_approval_workflow_stage_feature!]!
  formviews: [mod_approval_workflow_stage_formview!]!

  """Workflow stage approval levels"""
  approval_levels: [mod_approval_workflow_stage_approval_level!]!

  """Workflow version"""
  workflow_version: mod_approval_workflow_version!

  """Created timestamp"""
  created(format: core_date_format = TIMESTAMP): core_date!

  """Updated timestamp"""
  updated(format: core_date_format = TIMESTAMP): core_date!

  """Workflow stage interactions"""
  interactions: [mod_approval_workflow_stage_interaction!]!
}

"""Input for adding an approval level to a workflow stage"""
input mod_approval_workflow_stage_add_approval_level_input {
  """Workflow stage id"""
  workflow_stage_id: param_integer!

  """Approval level name (optional)"""
  name: param_text
}

"""Workflow stage approval level"""
type mod_approval_workflow_stage_approval_level {
  """Workflow stage approval id"""
  id: core_id!

  """Approval level name"""
  name(format: core_format = PLAIN): String!

  """Level number: 1, 2, 3, ..."""
  ordinal_number: Int!

  """Active"""
  active: Boolean!

  """Workflow stage."""
  workflow_stage: mod_approval_workflow_stage!

  """Approvers"""
  approvers: [mod_approval_assignment_approver!]!

  """Created timestamp"""
  created(format: core_date_format = DATELONG): core_date!

  """Updated timestamp"""
  updated(format: core_date_format = DATELONG): core_date!
}

"""Update workflow stage formviews input"""
input mod_approval_workflow_stage_configure_formviews_input {
  """Stage id"""
  workflow_stage_id: param_integer!

  """Fields and their visibility to update"""
  updates: [mod_approval_workflow_stage_formview_update_input!]!
}

"""Input for deleting an approval level from a workflow stage"""
input mod_approval_workflow_stage_delete_approval_level_input {
  """Workflow stage approval level id"""
  workflow_stage_approval_level_id: core_id!
}

"""Input for editing an approval level from a workflow stage"""
input mod_approval_workflow_stage_edit_approval_level_input {
  """Workflow stage approval level id"""
  workflow_stage_approval_level_id: core_id!

  """Level name"""
  name: String!
}

"""Input for editing a workflow stage"""
input mod_approval_workflow_stage_edit_input {
  """Workflow stage id"""
  workflow_stage_id: param_integer!

  """Stage name"""
  name: String!
}

type mod_approval_workflow_stage_feature {
  label: String!
  enum: mod_approval_workflow_stage_feature_enum!
}

"""Workflow stage features enums"""
enum mod_approval_workflow_stage_feature_enum {
  """Form views feature enum."""
  FORMVIEWS

  """Approval level feature enum."""
  APPROVAL_LEVELS

  """Interactions feature enum."""
  INTERACTIONS
}

type mod_approval_workflow_stage_formview {
  """Form field key"""
  field_key: String!

  """Form field visibility"""
  visibility: mod_approval_workflow_stage_formview_visibility_enum!
}

input mod_approval_workflow_stage_formview_update_input {
  """Form field key"""
  field_key: String!

  """Visibility to set form field to"""
  visibility: mod_approval_workflow_stage_formview_visibility_enum!
}

"""Formviews visibility enums"""
enum mod_approval_workflow_stage_formview_visibility_enum {
  """Editable formview option"""
  EDITABLE

  """Editable & required formview option"""
  EDITABLE_AND_REQUIRED

  """Read-only formview option"""
  READ_ONLY

  """Hidden formview option"""
  HIDDEN
}

"""Input for getting a workflow stage"""
input mod_approval_workflow_stage_input {
  """Workflow stage id"""
  workflow_stage_id: param_integer!
}

"""Workflow stage interaction"""
type mod_approval_workflow_stage_interaction {
  """Workflow stage interaction id"""
  id: core_id!

  """Application action"""
  action_code: mod_approval_workflow_stage_interaction_application_action_enum!

  """Workflow stage interaction transitions"""
  conditional_transitions: [mod_approval_workflow_stage_interaction_transition!]!

  """Default workflow stage interaction transition"""
  default_transition: mod_approval_workflow_stage_interaction_transition!
}

"""Interaction application action enums"""
enum mod_approval_workflow_stage_interaction_application_action_enum {
  """Approve action"""
  APPROVE

  """Reject action"""
  REJECT

  """Reset approvals"""
  RESET_APPROVALS

  """Submit form action"""
  SUBMIT

  """Withdraw in a form stage action"""
  WITHDRAW_BEFORE_SUBMISSION

  """Withdraw in an approval stage action"""
  WITHDRAW_IN_APPROVALS
}

"""Workflow stage interaction transition"""
type mod_approval_workflow_stage_interaction_transition {
  """Workflow stage interaction transition id"""
  id: core_id!

  """Priority"""
  priority: Int!

  """Workflow interaction condition"""
  condition: mod_approval_workflow_interaction_condition

  """Workflow interaction transition"""
  transition: String!
}

"""Input for managing a transition."""
input mod_approval_workflow_stage_interaction_transition_input {
  """Workflow stage interaction id"""
  workflow_stage_interaction_id: param_integer!

  """
  Workflow stage interaction transition id, nullable for creating new transition
  """
  workflow_stage_interaction_transition_id: param_integer

  """
  Transition, either a workflow_stage id (careful, it's a string!) or the name of the transition to use
  """
  transition: String!
}

"""Results container for workflow stage interaction transition mutation"""
type mod_approval_workflow_stage_interaction_transition_result {
  transition: mod_approval_workflow_stage_interaction_transition!
}

"""Results container for workflow stage query"""
type mod_approval_workflow_stage_move_to_result {
  options: [mod_approval_workflow_transition_option!]!
}

"""Results container for workflow stage query"""
type mod_approval_workflow_stage_result {
  stage: mod_approval_workflow_stage!
}

"""Workflow stage type"""
type mod_approval_workflow_stage_type {
  """label identifying the stage type"""
  label: String!

  """Enum identifying the stage type"""
  enum: mod_approval_workflow_stage_type_enum!
}

"""Workflow stage type enums"""
enum mod_approval_workflow_stage_type_enum {
  """Form submission stage type."""
  FORM_SUBMISSION

  """Approvals stage type."""
  APPROVALS

  """Waiting stage type."""
  WAITING

  """Finished stage type."""
  FINISHED
}

"""Workflow status type."""
type mod_approval_workflow_status {
  """Workflow name."""
  name: String!

  """Workflow state code."""
  code: Int!
}

"""Workflow transition option."""
type mod_approval_workflow_transition_option {
  name: String!
  value: String!
  data: String
}

"""Workflow type"""
type mod_approval_workflow_type {
  """Workflow type id"""
  id: core_id!

  """Workflow type name"""
  name(format: core_format = PLAIN): String!

  """Workflow type created timestamp"""
  created(format: core_date_format = TIMESTAMP): core_date
}

"""Result container for workflow types."""
type mod_approval_workflow_type_result {
  """Workflow types."""
  workflow_types: [mod_approval_workflow_type!]!
}

"""Workflow version."""
type mod_approval_workflow_version {
  """Workflow version id"""
  id: core_id!

  """Workflow version status code"""
  status: Int!

  """Workflow version status label"""
  status_label(format: core_format = PLAIN): String!

  """Form version associated with the workflow version"""
  form_version: mod_approval_form_version!

  """Workflow version created timestamp"""
  created(format: core_date_format = DATELONG): core_date!

  """Workflow version last updated timestamp"""
  updated(format: core_date_format = DATELONG): core_date!

  """Workflow stages"""
  stages: [mod_approval_workflow_stage!]!
}

"""Input for adding a new stage to a workflow version"""
input mod_approval_workflow_version_add_stage_input {
  """Workflow version id"""
  workflow_version_id: param_integer!

  """Stage name"""
  name: String!

  """Stage type"""
  type: mod_approval_workflow_stage_type_enum!
}

"""Input for publish workflow version"""
input mod_approval_workflow_version_publish_input {
  workflow_version_id: core_id!
}

type mod_contentmarketplace_content_marketplace {
  """The instance's id."""
  id: core_id!

  """course_module"""
  course_module: core_course_module!
  course: core_course!
  name(format: core_format = PLAIN): String!
  intro(format: core_format = HTML): String

  """
  NULL means that this content marketplace activity does not have a completion condition.
  """
  completion_condition: totara_contentmarketplace_completion_condition
  interactor: mod_contentmarketplace_content_marketplace_interactor!
}

"""
An interface that help to put the content marketplace activity data
into a sort of partialy defined schema.
"""
interface mod_contentmarketplace_content_marketplace_activity {
  module: mod_contentmarketplace_content_marketplace!
  learning_object: totara_contentmarketplace_learning_object!
}

type mod_contentmarketplace_content_marketplace_interactor {
  """Whether the user is a admin or not."""
  has_view_capability: Boolean!

  """Whether the user can enroll or not."""
  can_enrol: Boolean!

  """Whether the user can launch the activity or not."""
  can_launch: Boolean!

  """Whether the user is a site guest or not"""
  is_site_guest: Boolean!

  """Whether user is enrolled to the course or not."""
  is_enrolled: Boolean!

  """Whether user can direct enrol via click button"""
  non_interactive_enrol_instance_enabled: Boolean!
  supports_non_interactive_enrol: Boolean!
}

"""Input type for activating an activity"""
input mod_perform_activate_activity_input {
  activity_id: core_id!
}

"""Mutation return type including an activity"""
type mod_perform_activate_activity_result {
  activity: mod_perform_activity!
}

"""Input type for activities list."""
input mod_perform_activities_input {
  sort_by: String
}

"""The overall performance activity, not a user-specific instance"""
type mod_perform_activity {
  id: core_id
  name(format: core_format = PLAIN): String!
  type: mod_perform_activity_type!
  description(format: core_format = PLAIN): String
  created_at(format: core_date_format = TIMESTAMP): core_date
  updated_at(format: core_date_format = TIMESTAMP): core_date

  """
  Whether the current user can view the participation tracking for the activity
  """
  can_view_participation_reporting: Boolean!

  """
  Whether this activity could be activated due to capability checks and current status, without checking further conditions
  """
  can_potentially_activate: Boolean!

  """
  Whether the current user can activate this activity, only if it satisfies all conditions
  """
  can_activate: Boolean!

  """Whether the current user can manage this activity"""
  can_manage: Boolean!

  """Whether the current user can clone this activity"""
  can_clone: Boolean!

  """The default track for the activity"""
  default_track: mod_perform_track
  sections: [mod_perform_section!]!

  """
  Provides details (name, code and human-readable string) about the current state of the activity
  """
  state_details: mod_perform_activity_state!
  settings: mod_perform_activity_settings!
  visibility_condition_options: [mod_perform_visibility_condition_option!]

  """If true all responses will be anonymized"""
  anonymous_responses: Boolean!
  manual_relationships: [mod_perform_manual_relationship!]!

  """Context ID of the course container used by this activity"""
  context_id: core_id!
}

"""Input type for activity deleting validation"""
input mod_perform_activity_deletion_validation_input {
  activity_id: core_id!
}

"""Filters input for paginated activity list."""
input mod_perform_activity_filters_input {
  """Activity ID to filter by."""
  type: core_id

  """Activity status state name to filter by."""
  status: mod_perform_activity_state_enums

  """Activity name to filter by."""
  name: String
}

"""
Input for selecting which relationship should nominate the participating users.
"""
input mod_perform_activity_manual_relationship_selection_input {
  """Relationship which requires selection of participants"""
  manual_relationship_id: core_id!

  """Relationship which will be doing the selecting for the relationship"""
  selector_relationship_id: core_id!
}

"""Paginated list of activities."""
type mod_perform_activity_page implements core_pageable_result {
  """List of manageable activities."""
  items: [mod_perform_activity!]!

  """Total number of activities."""
  total: Int!

  """Cursor to request the next set of results for this query"""
  next_cursor: String!
}

"""Input type for pagination and filtering the activity list page."""
input mod_perform_activity_page_input {
  """Pagination input"""
  pagination: core_pagination_input!

  """Filters input"""
  filters: mod_perform_activity_filters_input

  """Sort by input"""
  sort_by: String
}

"""Mutation return type including an activity"""
type mod_perform_activity_result {
  activity: mod_perform_activity!
}

"""Represents the activity settings."""
type mod_perform_activity_settings {
  close_on_completion: Boolean!
  close_on_due_date: Boolean!
  multisection: Boolean!
  visibility_condition: mod_perform_visibility_condition_option!
  override_global_participation_settings: Boolean!
  sync_participant_instance_creation: Boolean!
  sync_participant_instance_closure: Boolean!
}

"""Represents the state an activity is in (e.g. draft, active)"""
type mod_perform_activity_state {
  code: Int!
  name: mod_perform_activity_state_enums!
  display_name: String!
}

"""A list of possible states that a performance activity can be in"""
enum mod_perform_activity_state_enums {
  DRAFT
  ACTIVE
}

"""
Represents a specific activity type (system wide category of performance activity)
"""
type mod_perform_activity_type {
  id: core_id

  """
  Raw name field for this type. In future when we have system types this will be
  a key used to locate the type's language string.
  """
  name: String!

  """
  Human readable display name for the type to be used to describe it to end users.
  """
  display_name(format: core_format = PLAIN): String!
}

"""Participant object, used to add participants to a subject_instance."""
input mod_perform_add_participant_input {
  core_relationship_id: core_id!
  participant_id: core_id!
}

"""Add participants input type"""
input mod_perform_add_participants_input {
  subject_instance_ids: [core_id!]!
  participants: [mod_perform_add_participant_input!]!
}

"""Mutation return type including the participants just added"""
type mod_perform_add_participants_result {
  participant_instances: [mod_perform_participant_instance!]!
}

"""Input type for adding a new section to an activity"""
input mod_perform_add_section_input {
  """ID of the activity where the section is being added"""
  activity_id: core_id!

  """
  Sort order to add this section before, if 0 or null given section will be added at the end
  """
  add_before: Int
}

"""Mutation return type including the section just added"""
type mod_perform_add_section_result {
  section: mod_perform_section!
}

"""The reason for can not delete an activity, section or section element"""
type mod_perform_can_not_delete_reason {
  description(format: core_format = PLAIN): String
  data: [String!]
}

"""Child element configuration."""
type mod_perform_child_element_config {
  """If the element supports child elements."""
  supports_child_elements: Boolean!

  """If the element supports repeating child elements."""
  supports_repeating_child_elements: Boolean!

  """Repeating item identifier."""
  repeating_item_identifier: String

  """Child element responses identifier."""
  child_element_responses_identifier: String
}

"""Input type for cloning an activity"""
input mod_perform_clone_activity_input {
  activity_id: core_id!
}

"""Mutation return type including a clone activity"""
type mod_perform_clone_activity_result {
  activity: mod_perform_activity!
}

"""Input type for closing subject instances in an activity"""
input mod_perform_close_activity_subject_instances_input {
  activity_id: core_id!
}

input mod_perform_create_child_element_input {
  element: mod_perform_create_element_input!
  parent: core_id!
  after_sibling_element_id: core_id
}

"""Result for creating a child perform element."""
type mod_perform_create_child_element_result {
  parent_element: mod_perform_element!
}

"""Create an element within a section."""
input mod_perform_create_element_in_section_input {
  element: mod_perform_create_element_input!
  after_section_element_id: core_id
  section_id: core_id!
}

"""Input to create a new element"""
input mod_perform_create_element_input {
  plugin_name: param_text!
  element_details: mod_perform_element_details_input!
}

"""
Link to an existing element

Deprecated since Totara 14: Use the individual mutation inputs for creating element in section.
"""
input mod_perform_create_link_element_input {
  element_id: core_id!
  sort_order: param_integer!
}

"""
Create a new element and add it to a section

Deprecated since Totara 14: Use the individual mutation inputs for creating element in section.
"""
input mod_perform_create_new_element_input {
  plugin_name: param_text!
  title: String!
  is_required: param_boolean
  identifier: param_text!
  data: String
  sort_order: param_integer!
  parent: param_integer
}

"""
Deprecated since Totara 13.2
Use mod_perform_toggle_notification_input instead
"""
input mod_perform_create_notification_input {
  activity_id: core_id!
  class_key: param_text!
  active: param_boolean
}

"""
Deprecated since Totara 13.2
Use mod_perform_toggle_notification_result instead
"""
type mod_perform_create_notification_result {
  notification: mod_perform_notification!
}

"""Input type for deleting an activity"""
input mod_perform_delete_activity_input {
  activity_id: core_id!
}

"""Input for deleting a perform element."""
input mod_perform_delete_child_element_input {
  element_id: core_id!
}

"""Result for deleting a perform element."""
type mod_perform_delete_child_element_result {
  parent_element: mod_perform_element!
}

"""
Delete an existing section element

Deprecated since Totara 14: Use the individual mutation inputs for deleting a section element.
"""
input mod_perform_delete_section_element_input {
  section_element_id: core_id!
}

"""Input type for deleting a section"""
input mod_perform_delete_section_input {
  """ID of the section to delete"""
  section_id: core_id!
}

"""Information for can not delete check"""
type mod_perform_deletion_check {
  can_delete: Boolean!
  title(format: core_format = PLAIN): String!
  reason: mod_perform_can_not_delete_reason!
  warnings: [mod_perform_deletion_warning!]!
}

"""
Warning information about deleting an activity, section or section element
"""
type mod_perform_deletion_warning {
  description(format: core_format = PLAIN): String
  items: [mod_perform_deletion_warning_item!]!
}

"""One item that relates to a deletion warning, with optional url."""
type mod_perform_deletion_warning_item {
  item(format: core_format = PLAIN): String!
  url: String
}

"""Details about when an activity is due."""
type mod_perform_due_date {
  """
  Date the activity is expected to be completed by. Used for triggering notifications and displaying overdue notices.
  """
  due_date(format: core_date_format = DATE): core_date!

  """
  If true the due date has passed and the overall subject instance is not yet closed
  """
  is_overdue: Boolean!

  """Numeric count from now to the due date."""
  units_to_due_date: Int!

  """
  The duration label to use together with units_to_due_date, e.g. 'days'.
  """
  units_to_due_date_type: String!
}

"""
An object defining the information required to determine a real offset from a specific event trigger.
"""
type mod_perform_dynamic_date_offset {
  """
  Number indicating how far from the trigger event the calculated date will be
  """
  count: Int!

  """
  Unit of time used to convert the count into an actual period of time in seconds
  """
  unit: mod_perform_track_dynamic_unit_enums!

  """
  Direction to apply the count/unit time period to calculate a date relative to a trigger event
  """
  direction: mod_perform_track_dynamic_direction_enums
}

"""
Input parameters for setting the scheduling offset from an event for relative assignment scheduling
"""
input mod_perform_dynamic_date_offset_input {
  """
  Number indicating how far from the trigger event the calculated date will be
  """
  count: param_integer!

  """
  Unit of time used to convert the count into an actual period of time in seconds
  """
  unit: mod_perform_track_dynamic_unit_enums!

  """
  Direction to apply the count/unit time period to calculate a date relative to a trigger event
  """
  direction: mod_perform_track_dynamic_direction_enums
}

"""
Represents a pointer to a specific dynamic date source, where a date source is comprised of a dynamic
date resolver class and a option key.
"""
type mod_perform_dynamic_date_source {
  """Fully qualified class name of the date resolver for this source"""
  resolver_class_name: String!

  """Option key passed to the resolver to calculate the relevant result"""
  option_key: String

  """
  Display name of the option itself, used in cases when the resolver or option_key become unavailable and we still
  want to display a selected but deleted option.
  """
  display_name: String!

  """True when this source is currently available in code"""
  is_available: Boolean!

  """
  Optional Vue component path to be added into the relative scheduling settings
  Used to allow the source to collect additional data from the user (such as
  selecting a specific activity to schedule relative to).
  """
  custom_setting_component: String

  """Custom data passed to the source to assist with resolving the date"""
  custom_data: String

  """Return what the resolver is based on (user, job, etc)"""
  resolver_base: String!
}

"""
Input parameters for specifying a dynamic date source when setting scheduling on a track
"""
input mod_perform_dynamic_date_source_input {
  """Fully qualified classname of resolver that will calculate scheduling"""
  resolver_class_name: param_text!

  """Key used to identify instance being used as source"""
  option_key: param_text

  """Additional data to pass to resolver to assist with calculation"""
  custom_data: param_text
}

"""A single activity element"""
type mod_perform_element {
  id: core_id!
  element_plugin: mod_perform_element_plugin!

  """Element title (typically a question for respondable elements)"""
  title(format: core_format = PLAIN): String!

  """
  String identifier used to associate separate elements together for reporting purposes
  """
  identifier: String

  """Encoded data storing configuration information used by the element"""
  data(format: core_format = PLAIN): String
  children: [mod_perform_element!]!
  parent_element: mod_perform_element
  sort_order: Int

  """
  Whether a participant is required to respond to this element in order to submit a section
  """
  is_required: Boolean

  """Whether this element can be responded to by a participant"""
  is_respondable: Boolean!

  """Whether this element displayes respones or not"""
  displays_responses: Boolean!
}

"""Element details input"""
input mod_perform_element_details_input {
  title: String
  is_required: param_boolean
  identifier: param_text
  data: String
}

"""An element identifier"""
type mod_perform_element_identifier {
  id: core_id!

  """
  String identifier used to associate separate elements together for reporting purposes
  """
  identifier(format: core_format = PLAIN): String!
}

"""An element plugin which can be used to create an element"""
type mod_perform_element_plugin {
  plugin_name: String!
  name: String!

  """element configuration"""
  plugin_config: mod_perform_element_plugin_config!

  """
  Name of vue component used to display the element configuration form to the activity admin
  """
  admin_form_component: String! @deprecated(reason: "Use `admin_edit_component` instead.")

  """
  Name of vue component used to display the element configuration form to the activity admin
  """
  admin_edit_component: String!

  """
  Name of the vue component used to display the preview of a completed element to the activity admin
  """
  admin_display_component: String! @deprecated(reason: "Use `admin_view_component` instead.")

  """
  Name of the vue component used to display the preview of a completed element to the activity admin
  """
  admin_view_component: String!

  """
  Name of the vue component used to display a read-only view of an element when an activity is active
  """
  admin_read_only_display_component: String! @deprecated(reason: "Use `admin_summary_component` instead.")

  """
  Name of the vue component used to display a summary view of an element when an activity is active
  """
  admin_summary_component: String!

  """
  Name of the vue component used to display the form element to the participant when they are completing the activity
  """
  participant_form_component: String!

  """
  Name of the vue component used to display a participant's response to this element
  """
  participant_response_component: String

  """Name of the vue component used to display a response in print preview"""
  participant_print_component: String

  """
  Value indicating which group of elements this element is under (1 for question
  elements, 2 for other non-respondable elements)
  """
  group: String!

  """Child element configuration."""
  child_element_config: mod_perform_child_element_config!
  element_usage: mod_perform_element_usage!
}

"""An element plugin configuration"""
type mod_perform_element_plugin_config {
  """is_respondable config setting"""
  is_respondable: Boolean!

  """has title required when creating or updating element"""
  has_title: Boolean!

  """has reporting id required when creating or updating element"""
  has_reporting_id: Boolean!

  """title text when creating or updating element"""
  title_text: String!

  """title help text when creating or updating element"""
  title_help_text: String

  """is title required when creating or updating element"""
  is_title_required: Boolean!

  """is response required enabled when creating or updating element"""
  is_response_required_enabled: Boolean!

  """
  any extra static data the plugin needs to supply (json encoded)
  @deprecated since Totara 14 - please use data instead
  """
  extra_config_data: String!
}

"""Element usage, states where an element can be used."""
type mod_perform_element_usage {
  """If the element can be used as a child element."""
  can_be_child_element: Boolean!

  """If the element can be used as a top level element."""
  can_be_top_level_element: Boolean!
}

"""
Represents an activity belonging to the current viewing user from the legacy 'Appraisals' and 'Feedback 360' functionality
"""
type mod_perform_historic_activity {
  """Name of the activity"""
  activity_name: String

  """
  URL linking to the legacy activity (for appraisals) or to the My Feedback page (for feedback 360s)
  """
  activity_link: String

  """
  Human readable string describing the type of activity (Appraisal or 360 Feedback)
  """
  type: String

  """
  Status of the activity for the viewing user (e.g. Active, Completed, etc)
  """
  status: String
}

"""
Individual subject instance that can have the participants specified by the user for a particular activity.
"""
type mod_perform_manual_participant_selection_instance {
  """The subject instance where manual participant selection is occurring"""
  subject_instance: mod_perform_subject_instance!

  """
  List of relationships that require manual participant selection for this specific subject instance
  """
  manual_relationships: [totara_core_relationship!]!
}

"""
Input for a user (either internal or external)
Internal means system user with a record in the user table.
External means a non-system user with a record in the perform_participant_external table
"""
input mod_perform_manual_participant_user_input {
  """ID of an internal user. Do not provide for external users."""
  user_id: core_id

  """
  Name of an external user. Do not provide for internal users, give user_id instead.
  """
  name: String

  """
  Email address of an external user. Do not provide for internal users, give user_id instead.
  """
  email: String
}

"""
Manual relationship and it's associated calculated relationship for an activity.
"""
type mod_perform_manual_relationship {
  """Activity where manual selection of participants is taking place"""
  activity: mod_perform_activity!

  """
  Represents the relationship that requires selection of participants (for example Peer)
  """
  manual_relationship: totara_core_relationship!

  """
  Represents the relationship that is being asked to select the participants for
  this particular relationship in this activity
  """
  selector_relationship: totara_core_relationship!
}

"""Input for setting user roles to select manual relationships."""
input mod_perform_manual_relationship_selector_roles {
  """Parent activity id."""
  activity_id: core_id!

  """Selector roles."""
  roles: [mod_perform_activity_manual_relationship_selection_input!]
}

"""Input type to manually set participant instance availability."""
input mod_perform_manually_change_participant_instance_input {
  """ID of the participant instance to update"""
  participant_instance_id: core_id!

  """New value for availability for this participant instance"""
  availability: mod_perform_participant_instance_availability_status!
}

"""
Mutation return type when manually changing participant instance availability
"""
type mod_perform_manually_change_participant_instance_result {
  participant_instance: mod_perform_participant_instance!
}

"""Input type to manually set participant section availability."""
input mod_perform_manually_change_participant_section_input {
  """ID of the participant section to update"""
  participant_section_id: core_id!

  """New value for availability for this participant section"""
  availability: mod_perform_participant_section_availability_status!
}

"""
Mutation return type when manually changing participant section availability
"""
type mod_perform_manually_change_participant_section_result {
  participant_section: mod_perform_participant_section!
}

"""Input type to manually set subject instance availability."""
input mod_perform_manually_change_subject_instance_input {
  """ID of the subject instance to update"""
  subject_instance_id: core_id!

  """New value for availability for this subject instance"""
  availability: mod_perform_subject_instance_availability_status!
}

"""
Mutation return type when manually changing subject instance availability
"""
type mod_perform_manually_change_subject_instance_result {
  subject_instance: mod_perform_subject_instance!
}

"""Input type to delete participant instance."""
input mod_perform_manually_delete_participant_input {
  """ID of the participant instance to delete"""
  participant_instance_id: core_id!
}

"""Input type to delete a subject instance."""
input mod_perform_manually_delete_subject_input {
  """ID of the subject instance to delete"""
  subject_instance_id: core_id!
}

"""Input type for moving an element to another section"""
input mod_perform_move_element_to_section_input {
  """The element to move"""
  element_id: core_id!

  """ID of the section where the element is being moved from"""
  source_section_id: core_id!

  """ID of the section where the element is being moved to"""
  target_section_id: core_id!
}

"""Mutation return type when moving an element to another section"""
type mod_perform_move_element_to_section_result {
  """The updated source section elements, with the moved element removed."""
  source_section_elements: [mod_perform_section_element!]!

  """The updated source section elements, with the moved element removed."""
  target_section_elements: [mod_perform_section_element!]!
}

"""
Move an existing section element within the current section

Deprecated since Totara 14: Use the individual mutation inputs for reordering a section element.
"""
input mod_perform_move_section_element_input {
  section_element_id: core_id!
  sort_order: param_integer!
}

"""
Represents a notification, possibly an abstract / uncreated one (id may be null)
"""
type mod_perform_notification {
  id: core_id

  """Human readable name for this notification"""
  name(format: core_format = PLAIN): String!

  """
  Unqualified class name for the class that defines this notification type
  """
  class_key: String!

  """True if this notification is active"""
  active: Boolean!

  """
  Defines the behaviour of the trigger for this notification (e.g. BEFORE, AFTER)
  """
  trigger_type: mod_perform_notification_trigger_type

  """Human readable string representing what the trigger is relative to"""
  trigger_label(format: core_format = PLAIN): String

  """
  List of recipients for the notification. Note recipients are defined by relationships, not specific actual users
  """
  recipients: [mod_perform_notification_recipient!]

  """
  List of time periods (in seconds) that control when the notification is triggered (in combination with trigger_type)
  """
  triggers: [Int!]
}

"""Represents a notification recipient"""
type mod_perform_notification_recipient {
  """ID of the relationship this recipient holds"""
  relationship_id: core_id

  """
  Human readable string describing the recipient (e.g. 'Subject', 'Manager')
  """
  name(format: core_format = PLAIN): String!

  """True if the recipient is set to receive the notification"""
  active: Boolean!

  """The relationship this recipient holds"""
  relationship: totara_core_relationship
}

enum mod_perform_notification_trigger_type {
  """Used to trigger notifications some time before a specific trigger"""
  BEFORE

  """Used to trigger notifications some time after a specific trigger"""
  AFTER
}

"""
Represents an activity belonging to another user (not the viewing user) from the
legacy 'Appraisals' and 'Feedback 360' functionality
"""
type mod_perform_other_historic_activity {
  """Name of the activity"""
  activity_name: String

  """
  URL linking to the legacy activity (for appraisals) or to the My Feedback page (for feedback 360s)
  """
  activity_link: String

  """
  Human readable string describing the type of activity (Appraisal or 360 Feedback)
  """
  type: String

  """Name of the subject of the legacy activity"""
  subject_user: String

  """
  String giving the relationship between the viewing user and the subject of the activity
  """
  relationship_to: String

  """
  Status of the activity for the viewing user (e.g. Active, Completed, etc)
  """
  status: String
}

"""Input type for override global settings"""
input mod_perform_override_global_participation_settings_input {
  activity_id: core_id!
  override_global_participation_settings: param_boolean
  sync_participant_instance_creation: param_boolean
  sync_participant_instance_closure: param_boolean
}

"""Participant user."""
type mod_perform_participant {
  """
  Identifies if the user is a system user (INTERNAL) or external to the system (EXTERNAL).
  """
  source: mod_perform_participant_source_enum!
  id: core_id!

  """User's fullname"""
  fullname(format: core_format = PLAIN): String

  """User's email address"""
  email: String

  """Alternative text of the user's profile image"""
  profileimagealt: String

  """URL of the user's profile image"""
  profileimageurlsmall: String

  """Metadata for the 'display user information' component"""
  card_display: core_user_card_display
}

"""Details about a participant_instance"""
type mod_perform_participant_instance {
  id: core_id!

  """
  ID from either 'user' table (internal) or 'perform_participant_external' table (external)
  """
  participant_id: core_id

  """
  True if the user requesting the participant instance record is also the participant (they are viewing their own instance)
  """
  is_for_current_user: Boolean!

  """
  List of sections this participant is involved in. This includes sections where
  they are a respondant as well as view-only sections.
  """
  participant_sections: [mod_perform_participant_section!]!

  """Detailed information about the participant of this instance"""
  participant: mod_perform_participant

  """
  Status representing this participant's progress in the subject instance (e.g. not started, in progress, complete)
  """
  progress_status: mod_perform_participant_instance_progress_status!

  """
  Status representing this participant's availability for the subject instance (e.g. open or closed)
  """
  availability_status: mod_perform_participant_instance_availability_status!

  """
  If true the due date has passed and this specific participant instance is not yet closed
  """
  is_overdue: Boolean!

  """
  Represents how this participant is related to the subject (e.g. manager, appraiser, etc.)
  """
  core_relationship: totara_core_relationship

  """Identifies the subject instance this participant instance relates to."""
  subject_instance: mod_perform_subject_instance

  """Time of creation of the participant instance record"""
  created_at(format: core_date_format = DATE): core_date!
}

"""
A list of possible availability states that a participant instance can be in
"""
enum mod_perform_participant_instance_availability_status {
  OPEN
  CLOSED
  AVAILABILITY_NOT_APPLICABLE
}

"""
A list of possible progress states that a participant instance can be in
"""
enum mod_perform_participant_instance_progress_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
  NOT_SUBMITTED
  PROGRESS_NOT_APPLICABLE
}

"""
A participant section represents a single participant's involvement in a specific activity section
"""
type mod_perform_participant_section implements participant_section_response {
  id: core_id!

  """Section of an activity that this participant section relates to"""
  section: mod_perform_section!

  """The participant instance of the participant involved in this section"""
  participant_instance: mod_perform_participant_instance!

  """
  All participant instances the linked user (participant_instance) can answer as
  """
  answerable_participant_instances: [mod_perform_participant_instance!]!
  section_element_responses: [mod_perform_section_element_response!]!

  """The participant's progress in this section"""
  progress_status: mod_perform_participant_section_progress_status!

  """The availability of this section for this participant"""
  availability_status: mod_perform_participant_section_availability_status!

  """
  True if the due date has passed and this section is not closed for this participant
  """
  is_overdue: Boolean!

  """True if the participant can answer this section"""
  can_answer: Boolean!

  """
  List of relationships who will be able to view this participant's responses in this section
  """
  responses_are_visible_to: [totara_core_relationship!]!
}

"""
A list of possible availability status states that a user participant section can be in
"""
enum mod_perform_participant_section_availability_status {
  """The section is open so can be responded to by the participant"""
  OPEN

  """
  The section is closed meaning it can't be responded to by the participant
  """
  CLOSED

  """
  The section availability is not relevant for this participant, perhaps because
  the participant has a view-only relationship
  """
  AVAILABILITY_NOT_APPLICABLE
}

"""
A list of possible progress status states that a user participant section can be in
"""
enum mod_perform_participant_section_progress_status {
  """The section has been submitted"""
  COMPLETE

  """
  The section has been viewed or draft answers have been saved but is not yet been submitted
  """
  IN_PROGRESS

  """The section has never been viewed by the participant"""
  NOT_STARTED

  """
  The section has been manually closed without it being completed by the participant
  """
  NOT_SUBMITTED

  """
  The participant's progress on this activity is not relevant (for example it is view-only so they have no progress to make)
  """
  PROGRESS_NOT_APPLICABLE
}

"""Mutation return type including a participant section"""
type mod_perform_participant_section_result {
  participant_section: mod_perform_section!
}

"""Available sources of a participant user."""
enum mod_perform_participant_source_enum {
  """System user with an account (record in the user table)"""
  INTERNAL

  """
  Represents a participant who doesn't have a system account, instead they are
  identified by a record in the perform_participant_external table
  """
  EXTERNAL
}

"""Input to reorder a perform element within it's parent element."""
input mod_perform_reorder_child_element_input {
  element_id: core_id!
  after_sibling_element_id: core_id
}

"""Result for reordering an element within it's parent element."""
type mod_perform_reorder_child_element_result {
  parent_element: mod_perform_element!
}

"""Reorder an existing section element within the current section"""
input mod_perform_reorder_section_element_input {
  section_element_id: core_id!
  move_to_after_section_element_id: core_id
}

"""
A relationship and set of participants that have responded to a particular section element in relation to a participant
"""
type mod_perform_responder_group {
  """
  The name of the "other responder" group, the relationship name (manager/apraiser)
  """
  relationship_name: String!

  """This can be empty if no-one satisfied the relationship to the subject"""
  responses: [mod_perform_section_element_response!]!
}

"""Return type for mod_perform_update_section_responses mutation"""
type mod_perform_response_update_section_result {
  participant_section: mod_perform_participant_section!
}

"""A section"""
type mod_perform_section {
  id: core_id!

  """Raw title field assigned to this section"""
  title: String!

  """
  Displays the title string if provided, otherwise gives a string placeholder to use instead (Untitled Section)
  """
  display_title(format: core_format = PLAIN): String!

  """The activity this section is part of"""
  activity: mod_perform_activity!

  """
  Section order, used for arranging sections relative to others within the activity
  """
  sort_order: Int!

  """List of section elements within this section"""
  section_elements: [mod_perform_section_element!]!

  """List of respondable section elements within this section"""
  respondable_section_elements: [mod_perform_section_element!]!

  """List of aggregatable section elements within this section"""
  aggregatable_section_elements: [mod_perform_section_element!]!

  """
  List of relationships involved in this section, and the abilities those relationships have within the section
  """
  section_relationships: [mod_perform_section_relationship!]!

  """
  Summary information about the number and types of elements contained within this section
  """
  section_elements_summary: mod_perform_section_elements_summary

  """Time of creation of the section"""
  created_at(format: core_date_format = DATETIME): core_date!

  """Time the section metadata was last updated"""
  updated_at(format: core_date_format = DATETIME): core_date
}

"""Input type for section deleting validation"""
input mod_perform_section_deletion_validation_input {
  section_id: core_id!
}

"""An element used in a section"""
type mod_perform_section_element {
  id: core_id!

  """Reference to the section this element is in"""
  section: mod_perform_section!

  """Reference to the element being used"""
  element: mod_perform_element!

  """
  Number used to sort this element relative to other elements within this section
  """
  sort_order: Int!
}

"""Input type for section element deleting validation"""
input mod_perform_section_element_deletion_validation_input {
  section_element_id: core_id!
}

"""
A section element from the view of a participant section response,
from the view perspective of the logged in user/participant.
The elements are not necessarily respondable.
"""
type mod_perform_section_element_response implements section_element_response {
  section_element_id: core_id!
  participant_instance: mod_perform_participant_instance

  """Generic element in use in this section"""
  element: mod_perform_element!

  """
  List of participant instance the viewing user's responses will be visible to
  """
  visible_to: [mod_perform_participant_instance!]!

  """
  Numeric value used to order this section element relative to other elements in this section
  """
  sort_order: Int!

  """
  Other participant's responses grouped by relationship types (Manager/Appraiser)
  """
  other_responder_groups: [mod_perform_responder_group!]!

  """
  Can the main participant respond to this element (it could be the case that only other relationships/groups can)
  """
  can_respond: Boolean

  """JSON encoded answer, format is specific to the element type"""
  response_data(format: core_format): String

  """
  The response data formatted ready to be displayed to the user. Each array entry represents a line or sub-response.
  """
  response_data_formatted_lines(format: core_format): [String!]!

  """List of validation errors from this specific section_element"""
  validation_errors: [mod_perform_validation_error!]!
}

"""An element statistics in a section"""
type mod_perform_section_elements_summary {
  """
  Number of question elements within the section that must be answered by responding participants
  """
  required_question_count: Int!

  """
  Number of question elements within the section that are optional for responding participants
  """
  optional_question_count: Int!

  """Number of other (non-respondable) elements within the section"""
  other_element_count: Int!
}

"""Details about an activity section and their participants"""
type mod_perform_section_participants {
  can_participate: Boolean!
  section: mod_perform_section!
  participant_sections: [mod_perform_participant_section!]!
}

"""A relationship within a section"""
type mod_perform_section_relationship {
  id: core_id!

  """True if the relationship can respond to this section"""
  can_answer: Boolean!

  """True if the relationship can view this section"""
  can_view: Boolean!

  """True if this relationship represents the subject"""
  is_subject: Boolean!

  """Core relationship object that defines this relationship"""
  core_relationship: totara_core_relationship!
}

"""Mutation return type including a section"""
type mod_perform_section_result {
  section: mod_perform_section!

  """
  This field returns some information about potentially failed validation checks
  when trying to update the section, i.e. removing a relationship fails
  """
  validation_info: mod_perform_deletion_check
}

"""Input for filtering what users can be selected."""
input mod_perform_selectable_users_filters {
  """Matches against the fullname of potential users"""
  fullname: String

  """List of user ids to exclude from the results"""
  exclude_users: [core_id!]
}

"""Input for selecting users linked to the manual relationship."""
input mod_perform_set_manual_participants_input {
  """Relationship which requires selection of participants"""
  manual_relationship_id: core_id!

  """List of users who have been identified to participate"""
  users: [mod_perform_manual_participant_user_input!]
}

"""Set participant users return type."""
type mod_perform_set_manual_participants_result {
  """True if the manual participants were successfully set"""
  success: Boolean!
}

"""
Details about perform activity that a user is involved with (either the subject or an answering participant)
"""
type mod_perform_subject_instance {
  id: core_id!
  activity: mod_perform_activity!

  """
  Status representing the overall progress of the subject instance (e.g. not started, in progress, complete)
  """
  progress_status: mod_perform_subject_instance_progress_status!

  """
  Status representing the availability of the subject instance (e.g. open or closed)
  """
  availability_status: mod_perform_subject_instance_availability_status!
  created_at(format: core_date_format = DATE): core_date!

  """Participant data on the subject of this instance"""
  subject_user: mod_perform_participant!

  """List of participant instances involved in this subject instance"""
  participant_instances: [mod_perform_participant_instance!]!

  """
  Optional job assignment indicating which of the subject's jobs this instance is about
  """
  job_assignment: totara_job_assignment

  """
  A numeric incrementing counter of the subject instance's associated with this
  particular user assignment. May be more than one when repeating is enabled.
  """
  instance_count: Int

  """
  Static user metadata stored at the time of subject instance creation, used to
  provide a permanent record of the subject's details that this activity was
  """
  static_instances: [totara_job_assignment!]!

  """
  Date the activity is expected to be completed by. If this is null, then there is no due date and it is not overdue
  """
  due_on: mod_perform_due_date

  """@deprecated since Totara 15: Use the due_on attribute instead."""
  due_date(format: core_date_format = DATETIME): core_date @deprecated(reason: "Use the due_on attribute instead.")

  """@deprecated since Totara 15: Use the due_on attribute instead."""
  is_overdue: Boolean! @deprecated(reason: "Use the due_on attribute instead.")
}

"""
Options for filtering the subject instance list.
SELF for activities about viewing user, OTHERS for activities about other users that I am participating in.

@deprecated since Totara 15: Use the about_role filter instead.
"""
enum mod_perform_subject_instance_about_filter {
  SELF
  OTHERS
}

"""
A list of possible availability states that a subject instance can be in
"""
enum mod_perform_subject_instance_availability_status {
  OPEN
  CLOSED
  AVAILABILITY_NOT_APPLICABLE
}

"""Activity subject instance filters"""
input mod_perform_subject_instance_filters {
  about_role: core_id
  activity_type: [core_id!]
  exclude_complete: param_boolean
  overdue: param_boolean
  participant_progress: [mod_perform_participant_instance_progress_status!]
  search_term: param_text

  """@deprecated since Totara 15: Use the about_role filter instead."""
  about: [mod_perform_subject_instance_about_filter!]
}

input mod_perform_subject_instance_options {
  sort_by: String
}

"""A list of possible progress states that a subject instance can be in"""
enum mod_perform_subject_instance_progress_status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETE
  NOT_SUBMITTED
  PROGRESS_NOT_APPLICABLE
}

"""
Details about perform activity that a user is involved with associated activity
sections.
"""
type mod_perform_subject_sections {
  subject: mod_perform_subject_instance!
  sections: [mod_perform_section_participants!]!
}

"""
Paginated details about perform activity that a user is involved with associated activity
sections.
"""
type mod_perform_subject_sections_page implements core_pageable_result {
  """List of subjects sections"""
  items: [mod_perform_subject_sections!]!

  """Total number of subject sections"""
  total: Int!

  """Cursor to request the next set of results for this query"""
  next_cursor: String!

  """The total number of completed instances"""
  completed_count: Int!

  """The number of overdue activities"""
  overdue_count: Int!
}

"""Input type for toggling a notification"""
input mod_perform_toggle_notification_input {
  notification_id: core_id!
  active: param_boolean!
}

"""Input type for toggling a notification recipient"""
input mod_perform_toggle_notification_recipient_input {
  notification_id: core_id!
  relationship_id: core_id!
  active: param_boolean!
}

"""
A specific track

Tracks are containers within activities that store assignment groups and scheduling information.
Currently activities always have exactly 1 track but in future we may support multiple tracks within the same activity.
"""
type mod_perform_track {
  id: core_id!

  """Optional track description. Not currently used in interface."""
  description(format: core_format = HTML): String!

  """Status of the track, e.g. ACTIVE, PAUSED"""
  status: Int!
  subject_instance_generation: mod_perform_track_subject_instance_generation_enums!

  """
  True if the schedule is open ended (start date only), false for limited scheduling (start and end date)
  """
  schedule_is_open: Boolean!

  """
  True if schedule is using fixed dates (admin specifies an actual date), false
  for relative scheduling (dates calculated relative to events)
  """
  schedule_is_fixed: Boolean!

  """Start of scheduling period for fixed dates"""
  schedule_fixed_from: totara_core_date_time_setting

  """End of scheduling period for limited scheduling with fixed dates"""
  schedule_fixed_to: totara_core_date_time_setting

  """
  Offset from trigger for start of scheduling period with relative dates
  """
  schedule_dynamic_from: mod_perform_dynamic_date_offset

  """
  Offset from trigger for end of scheduling period for limited scheduling with relative dates
  """
  schedule_dynamic_to: mod_perform_dynamic_date_offset

  """Source of trigger for relative scheduling"""
  schedule_dynamic_source: mod_perform_dynamic_date_source

  """
  If true, if user's calculated start date is in the past on assignment, use the
  next anniversary of the reference date instead of the actual reference date
  """
  schedule_use_anniversary: Boolean!

  """True if due date options should be enabled for this track"""
  due_date_is_enabled: Boolean!

  """True if scheduling is using fixed dates"""
  due_date_is_fixed: Boolean

  """Value for fixed due date"""
  due_date_fixed: totara_core_date_time_setting

  """
  Offset from trigger (currently only option is 'time since creation of instance') for relative due date
  """
  due_date_offset: mod_perform_dynamic_date_offset

  """True if repeating should be enabled for this track"""
  repeating_is_enabled: Boolean!

  """Trigger for repeat instance creation"""
  repeating_trigger_interval: mod_perform_track_repeating_trigger_interval_enums

  """Trigger for repeat instance creation"""
  repeating_trigger_type: mod_perform_track_repeating_trigger_type_enums

  """
  Trigger for repeat instance creation
  @deprecated since Totara 16 - use repeating_trigger_type/repeating_trigger_interval combination instead.
  This value will be UNSET if mapping back from the CLOSURE or COMPLETION_CLOSURE values in
  mod_perform_track_repeating_trigger_type_enums
  
  Note: cannot use @deprecated + reason tag after this field because the Behat tests fail!
  """
  repeating_type: mod_perform_track_repeating_type_enums

  """Offset from trigger for repeat instance creation"""
  repeating_offset: mod_perform_dynamic_date_offset

  """
  If true number of repeating instances that will be created will be limited to
  a specific number. Otherwise no limit is used
  """
  repeating_is_limited: Boolean

  """
  Number of subject instances that will be created for this user assignment, if repeating_is_limited is enabled
  """
  repeating_limit: Int

  """List of assignments attached to this track"""
  assignments: [mod_perform_track_assignment!]!

  """Whether viewing user has permission to assign positions"""
  can_assign_positions: Boolean!

  """Whether viewing user has permission to assign organisations"""
  can_assign_organisations: Boolean!
}

"""
A track assignment represents a set of items of a particular type that represent users assigned to an activity track
"""
type mod_perform_track_assignment {
  """ID of the track the group is assigned to"""
  track_id: core_id!

  """
  Type of assignment group. Options are 1 (audience), 2 (organisation), 3 (position) or 4 (individual)
  """
  type: Int!

  """Data about the specific group"""
  group: mod_perform_user_grouping!
}

"""Input parameters for setting the assignments to use on a track"""
input mod_perform_track_assignments_input {
  """ID of the track to add groups to"""
  track_id: core_id!

  """Type of group to add"""
  type: Int!

  """List of groups to add"""
  groups: [mod_perform_user_grouping_input!]!
}

"""
A list of possible directions which can be used for relative dynamic date schedules
"""
enum mod_perform_track_dynamic_direction_enums {
  AFTER
  BEFORE
}

"""
A list of possible units which can be used for relative dynamic date schedules
"""
enum mod_perform_track_dynamic_unit_enums {
  DAY
  WEEK
}

"""Interval type before repeating trigger fires"""
enum mod_perform_track_repeating_trigger_interval_enums {
  """
  Future subject instance created after a minimum interval has passed since the creation of the previous instance
  """
  MINIMUM_TIME_SINCE_CREATION

  """
  Future subject instance created at an interval relative to the setting of a value in the previous instance
  """
  TIME_SINCE
}

"""
A list of possible repeating triggers which can be used for repeating schedules
"""
enum mod_perform_track_repeating_trigger_type_enums {
  """Future instance triggered after the creation of a previous instance"""
  CREATION

  """
  Future subject instance created at a time relative to the completion of a previous instance
  """
  COMPLETION

  """
  Future subject instance created at a time relative to the closure of a previous instance
  """
  CLOSURE

  """
  Future subject instance created at a time relative to the completion OR closure of a previous instance
  """
  COMPLETION_CLOSURE
}

"""
A list of possible repeating types which can be used for repeating schedules
Deprecated since Totara 16; replaced by repeating_trigger_interval_enums/track_repeating_trigger_type_enums
combination
"""
enum mod_perform_track_repeating_type_enums {
  """
  Creation of future instances will occur some time after the creation of the previous instance
  """
  AFTER_CREATION

  """
  Creation of future instances will occur some time after the creation of the previous instance but only once it is complete
  """
  AFTER_CREATION_WHEN_COMPLETE

  """
  Creation of future instances will occur some time relative to the completion of the previous instance
  """
  AFTER_COMPLETION

  """
  Temporary option; returned when mapping back from the CLOSURE or COMPLETION_CLOSURE values
  in mod_perform_track_repeating_trigger_type_enums
  """
  UNSET
}

"""
Input parameters required for open-ended track schedule period using fixed dates
"""
input mod_perform_track_schedule_input {
  track_id: core_id!
  subject_instance_generation: mod_perform_track_subject_instance_generation_enums!

  """
  True if the schedule is open ended (start date only), false for limited scheduling (start and end date)
  """
  schedule_is_open: param_boolean!

  """
  True if schedule is using fixed dates (admin specifies an actual date), false
  for relative scheduling (dates calculated relative to events)
  """
  schedule_is_fixed: param_boolean!

  """Start of scheduling period for fixed dates"""
  schedule_fixed_from: param_date_time_setting

  """End of scheduling period for limited scheduling with fixed dates"""
  schedule_fixed_to: param_date_time_setting

  """
  Offset from trigger for start of scheduling period with relative dates
  """
  schedule_dynamic_from: mod_perform_dynamic_date_offset_input

  """
  Offset from trigger for end of scheduling period for limited scheduling with relative dates
  """
  schedule_dynamic_to: mod_perform_dynamic_date_offset_input

  """Source of trigger for relative scheduling"""
  schedule_dynamic_source: mod_perform_dynamic_date_source_input

  """
  If true, if user's calculated start date is in the past on assignment, use the
  next anniversary of the reference date instead of the actual reference date
  """
  schedule_use_anniversary: param_boolean

  """True if due date options should be enabled for this track"""
  due_date_is_enabled: param_boolean!

  """True if scheduling is using fixed dates"""
  due_date_is_fixed: param_boolean

  """Value for fixed due date"""
  due_date_fixed: param_date_time_setting

  """
  Offset from trigger (currently only option is 'time since creation of instance') for relative due date
  """
  due_date_offset: mod_perform_dynamic_date_offset_input

  """True if repeating should be enabled for this track"""
  repeating_is_enabled: param_boolean!

  """Trigger for repeat instance creation"""
  repeating_trigger_interval: mod_perform_track_repeating_trigger_interval_enums

  """Trigger for repeat instance creation"""
  repeating_trigger_type: mod_perform_track_repeating_trigger_type_enums

  """
  Trigger for repeat instance creation
  @deprecated since Totara 16 - use repeating_trigger_type/repeating_trigger_interval combination instead.
  This value will be UNSET if mapping back from the CLOSURE or COMPLETION_CLOSURE values in
  mod_perform_track_repeating_trigger_type_enums
  """
  repeating_type: mod_perform_track_repeating_type_enums

  """Offset from trigger for repeat instance creation"""
  repeating_offset: mod_perform_dynamic_date_offset_input

  """
  If true number of repeating instances that will be created will be limited to
  a specific number. Otherwise no limit is used
  """
  repeating_is_limited: param_boolean

  """
  Number of subject instances that will be created for this user assignment, if repeating_is_limited is enabled
  """
  repeating_limit: param_integer
}

"""
A list of possible job behaviours for subject instance generation which a track can be set to
"""
enum mod_perform_track_subject_instance_generation_enums {
  """
  When selected one subject instance will be created for each matching user.
  The subject instance will refer to the user as a whole rather than any particular job.
  """
  ONE_PER_SUBJECT

  """
  When selected one subject instance will be created for each job assignment of each matching user.
  The subject instance will refer to the specific job assignment as being the topic of the activity.
  """
  ONE_PER_JOB
}

"""Update a child element."""
input mod_perform_update_child_element_input {
  element_details: mod_perform_element_details_input!
  element_id: core_id!
}

"""Result for updating a perform element."""
type mod_perform_update_child_element_result {
  element: mod_perform_element!
}

"""Input for updating element in a section."""
input mod_perform_update_element_in_section_input {
  element_details: mod_perform_element_details_input!
  section_element_id: core_id!
}

"""
Update an existing element

Deprecated since Totara 14: Use the individual mutation inputs for updating element in section.
"""
input mod_perform_update_element_input {
  element_id: core_id!
  title: String!
  identifier: param_text
  is_required: param_boolean
  data: String!
}

"""Update the response for a question"""
input mod_perform_update_element_response_input {
  """ID of the section element to update"""
  section_element_id: core_id!

  """JSON encoded answer, format is specific to the element type"""
  response_data: String!
}

"""Input type for updating notification trigger's value"""
input mod_perform_update_notification_triggers_input {
  notification_id: core_id!
  values: [param_integer!]!
}

"""
Generic return type for manual relationship mutations.
Can be replaced in mutations.
"""
type mod_perform_update_relationship_result {
  activity: mod_perform_activity!
}

"""
Update a section

Deprecated since Totara 14: Use the individual mutation inputs for managing section elements.
"""
input mod_perform_update_section_elements_input {
  """ID of the section to update"""
  section_id: core_id!

  """
  List of elements that did not exist that now need to be created and linked to this section
  """
  create_new: [mod_perform_create_new_element_input!]

  """
  List of elements that already exist, but now need to be linked to this section
  """
  create_link: [mod_perform_create_link_element_input!]

  """
  List of elements where some of the element metadata has changed and therefore need to be updated
  """
  update: [mod_perform_update_element_input!]

  """
  List of elements that are no longer used in this section and should be unlinked and deleted if no longer used
  """
  delete: [mod_perform_delete_section_element_input!]

  """
  List of elements which should be moved to a new location within the current section
  """
  move: [mod_perform_move_section_element_input!]
}

"""Update a section's responses for an external participant"""
input mod_perform_update_section_responses_external_participant_input {
  """ID of the participant section to update"""
  participant_section_id: core_id!

  """True if the section is being saved as a draft (rather than submitted)"""
  is_draft: param_boolean

  """Data to use to update the participant section response"""
  update: [mod_perform_update_element_response_input!]!

  """
  Secret token used to authenticate the external user instead of a user session
  """
  token: String!
}

"""Update a section's responses for an internal participant"""
input mod_perform_update_section_responses_input {
  """ID of the participant section to update"""
  participant_section_id: core_id!

  """True if the section is being saved as a draft (rather than submitted)"""
  is_draft: param_boolean

  """Data to use to update the participant section response"""
  update: [mod_perform_update_element_response_input!]!
}

"""Return type for mod_perform_update_track_schedule"""
type mod_perform_update_track_schedule_result {
  track: mod_perform_track!
}

"""Data about a specific group assigned to an activity track"""
type mod_perform_user_grouping {
  id: core_id!

  """
  Type of assignment group. Options are 1 (audience), 2 (organisation), 3 (position) or 4 (individual)
  """
  type: Int!

  """Human readable label describing the group type"""
  type_label: String!

  """Name of this specific group"""
  name: String

  """Number of members in this specific group"""
  size: Int!

  """Additional/optional group type specific json encoded data."""
  extra: String
}

"""Input for adding or removing groups to tracks"""
input mod_perform_user_grouping_input {
  """ID identifying the group instance"""
  id: core_id!

  """Integer identifying which group type is being added or removed"""
  type: Int!
}

"""A validation error"""
type mod_perform_validation_error {
  """An error code representing this particular class of error"""
  error_code: String!

  """Human readable string describing the error"""
  error_message: String!
}

"""A view only version of a specific section of a subject instance"""
type mod_perform_view_only_section implements participant_section_response {
  """The participant section ID"""
  id: core_id!

  """The section being viewed"""
  section: mod_perform_section!

  """Responses to this section from other participants"""
  section_element_responses: [mod_perform_view_only_section_element_response!]!

  """
  List of other sections in this section's activity (includes current section)
  """
  siblings: [mod_perform_section]
}

"""
A section element from the view a view-only participant or someone who is not a participant at all
"""
type mod_perform_view_only_section_element_response implements section_element_response {
  section_element_id: core_id!

  """Generic element in use in this section"""
  element: mod_perform_element!

  """
  Numeric value used to order this section element relative to other elements in this section
  """
  sort_order: Int!

  """
  Other participant's responses grouped by relationship types (Manager/Appraiser)
  """
  other_responder_groups: [mod_perform_responder_group!]!
}

"""Represents the response visibility condition option"""
type mod_perform_visibility_condition_option {
  name: String!
  value: Int!
  participant_description: String
  view_only_participant_description: String!
}

"""More in depth module information for a resource (file)."""
type mod_resource_resource {
  """The id of the resource"""
  id: core_id!

  """The mimetype of the associated file"""
  mimetype: String!

  """The size of the associated file in bytes"""
  size: Int!

  """The url of the resources file"""
  fileurl(format: core_format = PLAIN): String!
}

"""SCORM offline attempt"""
input mod_scorm_attempt {
  """Time when attempt was started in offline player"""
  timestarted: Int!

  """Tracks for all scoes in this attempt."""
  tracks: [mod_scorm_track!]!
}

"""
Lightweight info for status update after one or more attempts is submitted
"""
type mod_scorm_current_status {
  """The maximum number of times a user can attempt the scorm."""
  maxattempt: Int

  """The current user's number of attempts at the scorm."""
  attempts_current: Int

  """Activity completion tracking"""
  completion: String!

  """Require view for completion"""
  completionview: Boolean!

  """Require a particular status for completion"""
  completionstatusrequired: Int

  """Require a minimum score for completion"""
  completionscorerequired: Int

  """Require all scos to return 'completed' status"""
  completionstatusallscos: Boolean!

  """The completion status of the current user in the course module"""
  completionstatus: String

  """The user's grade in the course as an absolute value"""
  gradefinal: Float

  """The maximum achievable grade for the course"""
  grademax: Float

  """The user's grade in the course as a percentage of grademax"""
  gradepercentage: Float
}

"""Mutation return type for mod_scorm_save_offline_attempts"""
type mod_scorm_save_offline_attempts_result {
  """Offline attempts accepted"""
  attempts_accepted: [Boolean!]!

  """The maximum number of times a user can attempt the scorm."""
  maxattempt: Int

  """The current user's number of attempts at the scorm."""
  attempts_current: Int

  """Activity completion tracking"""
  completion: String!

  """Require view for completion"""
  completionview: Boolean!

  """Require a particular status for completion"""
  completionstatusrequired: Int

  """Require a minimum score for completion"""
  completionscorerequired: Int

  """Require all scos to return 'completed' status"""
  completionstatusallscos: Boolean!

  """The completion status of the current user in the course module"""
  completionstatus: String

  """The user's grade in the course as an absolute value"""
  gradefinal: Float

  """The maximum achievable grade for the course"""
  grademax: Float

  """The user's grade in the course as a percentage of grademax"""
  gradepercentage: Float
}

"""More in depth module information for scorm"""
type mod_scorm_scorm {
  """The id of the scorm"""
  id: core_id!

  """The id of the course containing the scorm"""
  courseid: core_id!

  """The showgrades (show gradebook to learners) flag for the course"""
  showgrades: Boolean!

  """The name of the scorm"""
  name(format: core_format = HTML): String!

  """The type of scorm package: local, external, or repository"""
  scormtype: String!

  """Package filename or URL"""
  reference: String

  """The description of the scorm module"""
  intro(format: core_format = HTML): String
  introformat: core_format

  """Package SCORM version"""
  version(format: core_format = PLAIN): String!

  """The maximum grade for this activity"""
  maxgrade: Float!

  """
  How to calculate the attempt grade when multiple learning objects (scos) are present
  """
  grademethod: String!

  """How to calculate the activity grade when multiple attempts are made"""
  whatgrade: String!

  """The maximum number of times a user can attempt the scorm."""
  maxattempt: Int

  """If enabled, the status of the current attempt is forced to completed"""
  forcecompleted: Boolean!

  """If enabled, each new access of this scorm is considered a new attempt"""
  forcenewattempt: Boolean!

  """
  If enabled, this scorm cannot be launched after a user's final attempt
  """
  lastattemptlock: Boolean!

  """
  If enabled and a mastery score is provided, then status will be calculated and override any status provided by the scorm
  """
  masteryoverride: Boolean!

  """Whether to display the course structure on the entry page"""
  displaycoursestructure: Boolean!

  """
  Whether and how the content structure page of a multiple-sco scorm should be skipped
  """
  skipview: Int!

  """Whether and how to show navigation in the player"""
  nav: Int!

  """Position of navigation from left edge"""
  navpositionleft: Int

  """Position of navigation from top edge"""
  navpositiontop: Int

  """
  Determines whether a Continue button is used to advance to the next learning object
  """
  auto: Boolean!

  """Ideal player width"""
  width: Int

  """Ideal player height"""
  height: Int

  """Date (unixtime) scorm activity becomes available"""
  timeopen(format: core_date_format = TIMESTAMP): core_date

  """Date (unixtime) scorm activity becomes unavailable"""
  timeclose(format: core_date_format = TIMESTAMP): core_date

  """Whether the activity name is displayed or not"""
  displayactivityname: Boolean!

  """Whether the scorm auto commits data or not"""
  autocommit: Boolean!

  """
  True indicates trainer says the package is compatible with mobile offline and
  users are allowed to make offline attempts.
  """
  allowmobileoffline: Boolean!

  """Activity completion tracking"""
  completion: Int!

  """Require view for completion"""
  completionview: Boolean!

  """Require a particular status for completion"""
  completionstatusrequired: Int

  """Require a minimum score for completion"""
  completionscorerequired: Int

  """Require all scos to return 'completed' status"""
  completionstatusallscos: Boolean!

  """
  The URL to download the scorm package, only local is really supported here.
  """
  package_url(format: core_format = PLAIN): String

  """The URL to webview launch the scorm activity with a new attempt"""
  launch_url(format: core_format = PLAIN): String

  """The URL to webview launch the scorm activity with the same attempt"""
  repeat_url(format: core_format = PLAIN): String

  """The current user's number of attempts at the scorm."""
  attempts_current: Int

  """The grade of the current user for the scorm"""
  calculated_grade: String

  """Download link for SCORM 1.2 package, NULL for SCORM 2004 and AICC."""
  offline_package_url: String

  """
  SHA1 hash of SCORM package file contents, change indicates the package needs to be
  downloaded and parsed again.
  """
  offline_package_contenthash: String

  """
  List of internal SCO identifiers from the SCORM package, this is intended
  for validation of manifest parsing to prevent errors during submission of attempts.
  """
  offline_package_sco_identifiers: [String!]

  """The defaults for a new attempt encoded as json."""
  attempt_defaults: String!

  """List of current user's attempts at the scorm"""
  attempts: [mod_scorm_scorm_attempt]
}

type mod_scorm_scorm_attempt {
  """Attempt number"""
  attempt: Int!

  """
  Time when attempt was started in offline player, or null if new attempt
  """
  timestarted(format: core_date_format = TIMESTAMP): core_date

  """Reported grade for this attempt, or null if new attempt"""
  gradereported: Int

  """Defaults for the scoes in this attempt, as JSON data"""
  defaults: String!

  """Objectives for the scoes in this attempt, as JSON data"""
  objectives: String!

  """Interactions for the scoes in this attempt, as JSON data"""
  interactions: String!
}

"""SCORM track info"""
input mod_scorm_track {
  """
  Database field scorm_scoes.identifier, oranisation identifier from the manifest file.
  """
  identifier: String!

  """
  Element name such as 'cmi.core.lesson_status' or 'cmi.core.score.raw'
  See https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/#section-2
  """
  element: String!

  """Element value"""
  value: String!

  """Time when value was saved in offline player"""
  timemodified: Int!
}

"""Input parameter equivalent to PARAM_ALPHA."""
scalar param_alpha

"""Input parameter equivalent to PARAM_ALPHAEXT."""
scalar param_alphaext

"""Input parameter equivalent to PARAM_ALPHANUM."""
scalar param_alphanum

"""Input parameter equivalent to PARAM_ALPHANUMEXT."""
scalar param_alphanumext

"""Input parameter equivalent to PARAM_AREA, '' is converted to NULL."""
scalar param_area

"""Input parameter equivalent to PARAM_BOOL, '' is converted to NULL."""
scalar param_boolean

"""
Input parameter equivalent to PARAM_COMPONENT, '' is converted to NULL.
"""
scalar param_component

"""Represents a date setting with optional time and timezone parts."""
input param_date_time_setting {
  iso: String!
  timezone: String
}

"""Input parameter equivalent to PARAM_EMAIL, '' is converted to NULL."""
scalar param_email

"""Input parameter equivalent to PARAM_FILE, '' is converted to NULL."""
scalar param_file

"""Input parameter equivalent to PARAM_INT, '' is converted to NULL."""
scalar param_integer

"""Input parameter equivalent to PARAM_LANG, '' is converted to NULL."""
scalar param_lang

"""Input parameter equivalent to PARAM_PATH, '' is converted to NULL."""
scalar param_path

"""Input parameter equivalent to PARAM_PLUGIN, '' is converted to NULL."""
scalar param_plugin

"""Input parameter equivalent to PARAM_SAFEDIR, '' is converted to NULL."""
scalar param_safedir

"""
Input parameter equivalent to PARAM_SAFEPATH, '' is converted to NULL.
"""
scalar param_safepath

"""
Input parameter equivalent to PARAM_STRINGID, '' is converted to NULL.
"""
scalar param_stringid

"""Input parameter equivalent to PARAM_TEXT."""
scalar param_text

"""Input parameter equivalent to PARAM_THEME, '' is converted to NULL."""
scalar param_theme

"""Input parameter equivalent to PARAM_URL, '' is converted to NULL"""
scalar param_url

"""
Input parameter equivalent to PARAM_USERNAME, '' is converted to NULL.
"""
scalar param_username

"""
Shared values between a normal participant section (for a participant) and a view only section response
(viewing as a view only participant or as someone who is not a participant)
"""
interface participant_section_response {
  id: core_id!
  section: mod_perform_section!
}

"""A criteria group pathway"""
type pathway_criteria_group_achievement {
  """Instance of a single criteria"""
  instance_id: Int!

  """Type of criteria, e.g. linkedcourses, childcompetency, etc."""
  type: String!
}

"""A Learning plan pathway"""
type pathway_learning_plan_competency_plan {
  """List of learning plans this competency is in"""
  learning_plans: [totara_plan_learning_plan]

  """Scale value given"""
  scale_value: totara_competency_scale_value

  """Time when the value was given"""
  date_assigned(format: core_date_format = TIMESTAMP): core_date
}

"""
A competency framework group with scale values and rateable competencies
"""
type pathway_manual_framework_group {
  """The competency framework object"""
  framework: totara_competency_competency_framework!

  """List of values from the competency scale"""
  values: [totara_competency_scale_value!]!

  """List of rateable competencies"""
  competencies: [pathway_manual_rateable_competency]!

  """Number of rateable competencies"""
  count: Int!
}

"""A competency that can be rated"""
type pathway_manual_rateable_competency {
  """The competency object"""
  competency: totara_competency_competency!

  """The most recent rating made for this competency"""
  latest_rating: pathway_manual_rating
}

"""Information about a user that can be manually rated"""
type pathway_manual_rateable_user {
  """User object"""
  user: core_user!

  """Number of competencies"""
  competency_count: Int!

  """Most recent rating"""
  latest_rating: pathway_manual_rating
}

"""Filters that have been chosen to filter by for rateable users."""
input pathway_manual_rateable_users_filters {
  """Text match against the user's fullname"""
  user_full_name: String
}

"""An individual rating for a competency made by a user for a user"""
type pathway_manual_rating {
  """User object for the person doing the rating"""
  rater: core_user

  """ID of scale value given during rating"""
  scale_value: totara_competency_scale_value

  """Time the rating was made"""
  timestamp(format: core_date_format = TIMESTAMP): core_date!

  """Comment provided by rater"""
  comment(format: core_format = PLAIN): String
}

"""Input type for individual rating"""
input pathway_manual_rating_input {
  """ID of competency being rated"""
  competency_id: core_id!

  """ID of scale value given during rating"""
  scale_value_id: core_id

  """Optional text comment about the rating"""
  comment: String
}

"""A role a user might have for another user, e.g. manager"""
type pathway_manual_role {
  """Role short name"""
  name: String!

  """Human readable role label"""
  display_name(format: core_format = PLAIN): String!

  """Numeric value for ordering this role relative to others"""
  display_order: Int!

  """True if the viewing user has this role"""
  has_role: Boolean!
}

"""A role that can rate a competency"""
type pathway_manual_role_rating {
  """The role doing the rating"""
  role: pathway_manual_role!

  """Most recent rating by the role"""
  latest_rating: pathway_manual_rating

  """URL of picture to use if there is no rating"""
  default_profile_picture: String

  """Custom role name text"""
  role_display_name: String
}

"""All rateable competencies for a specific user, grouped by framework"""
type pathway_manual_user_competencies {
  """The user object for the user we are rating competencies for"""
  user: core_user!

  """Frameworks groups (set of competencies grouped by a framework)"""
  framework_groups: [pathway_manual_framework_group!]!

  """List of things that the list can be filtered by"""
  filters: pathway_manual_user_competencies_filter_options

  """The total amount of competencies available to rate"""
  count: Int!
}

"""The filter options that are available to filter by."""
type pathway_manual_user_competencies_filter_options {
  """Filter by whether they have already been rated by the user or not"""
  rating_history: Boolean

  """Filter by competency types"""
  competency_type: [totara_competency_competency_type]

  """Filter by reasons for assignment"""
  assignment_reason: [totara_competency_assignment_reason]
}

"""Filters that have been chosen to filter by for rateable competencies."""
input pathway_manual_user_rateable_competencies_filters {
  """Filter by whether they have already been rated by the user or not"""
  rating_history: Boolean

  """Filter by competency types"""
  competency_type: core_id

  """Filter by reasons for assignment"""
  assignment_reason: [core_id!]
}

input pathway_perform_rating_linked_competencies_rate_input {
  participant_instance_id: core_id!
  competency_id: core_id!
  scale_value_id: core_id
  section_element_id: core_id!
}

type pathway_perform_rating_linked_competencies_rate_result {
  rating: pathway_perform_rating_perform_rating!
  already_exists: Boolean
}

input pathway_perform_rating_linked_competencies_rating_input {
  competency_id: core_id!
  user_id: core_id!
}

type pathway_perform_rating_linked_competencies_rating_result {
  rating: pathway_perform_rating_perform_rating
  default_profile_picture: String!
}

"""Represents a rating given in the subject instance"""
type pathway_perform_rating_perform_rating {
  id: core_id!
  user_id: core_id!
  user: core_user!

  """If the activity got deleted we can't load the rater or the role"""
  rater_user: core_user
  rater_relationship: totara_core_relationship

  """Role of the rater with respect to the user viewing the rating."""
  rater_role(format: core_format = PLAIN): String!
  activity: mod_perform_activity

  """
  The scale value can be null if the rater explicit gave "no rating"
  """
  scale_value: totara_competency_scale_value
  created_at(format: core_date_format = TIMESTAMP): core_date!
}

"""Result for aggregatable question elements."""
type performelement_aggregation_aggregatable_question_elements_result {
  sections: [mod_perform_section!]!
}

"""Represents a single content item"""
type performelement_linked_review_content_item {
  id: core_id!
  content_id: core_id!
  content: String
  selector_id: core_id!
  selector: core_user!
  meta_data: String
  created_at(format: core_date_format = TIMESTAMP): core_date!
}

"""Input type for query to load content items"""
input performelement_linked_review_content_items_input {
  section_element_id: core_id!
  participant_section_id: core_id
  subject_instance_id: core_id!
  token: String
}

"""Result for the content items query"""
type performelement_linked_review_content_items_result {
  items: [performelement_linked_review_content_item!]!
}

"""A content type e.g. competency, goal that can be linked."""
type performelement_linked_review_content_type {
  identifier: String!
  display_name(format: core_format = PLAIN): String!
  is_enabled: Boolean!
  available_settings: String!
  admin_settings_component: String
  admin_view_component: String
  content_picker_component: String!
  participant_content_component: String!
  participant_content_footer_component: String!
}

"""Represents a user who selects content and related relationship"""
type performelement_linked_review_content_update_check {
  can_update: Boolean!
  description(format: core_format = PLAIN): String
}

"""Input required for updating the linked content."""
input performelement_linked_review_update_linked_content_input {
  content: String!

  """@deprecated since Totara 15.0, please pass content only"""
  content_ids: [core_id!]
  section_element_id: core_id!
  participant_instance_id: core_id!
}

"""Represents a result for updating content"""
type performelement_linked_review_update_linked_review_content_result {
  validation_info: performelement_linked_review_content_update_check
}

"""Result for source activity question elements."""
type performelement_redisplay_source_activity_question_elements_result {
  sections: [mod_perform_section!]!
}

"""Result for subject instance's previous responses."""
type performelement_redisplay_subject_instance_previous_responses_result {
  title: String!
  your_response: mod_perform_section_element_response
  other_responder_groups: [mod_perform_responder_group!]!
  is_anonymous: Boolean!
}

"""
Shared values between a normal participant section_element_response (for a
participant) and a view only section element response
(viewing as a view only participant or as someone who is not a participant)
"""
interface section_element_response {
  section_element_id: core_id!

  """Generic element in use in this section"""
  element: mod_perform_element!

  """
  Numeric value used to order this section element relative to other elements in this section
  """
  sort_order: Int!

  """
  Other participant's responses grouped by relationship types (Manager/Appraiser)
  """
  other_responder_groups: [mod_perform_responder_group!]!
}

"""Input type for source activity question elements."""
input source_activity_question_elements_input {
  activity_id: param_integer!
}

input subject_instance_previous_responses_input {
  token: String
  participant_section_id: param_integer
  subject_instance_id: param_integer!
  section_element_id: param_integer!
}

"""Input for activity settings toggle."""
input toggle_activity_setting {
  activity_id: core_id!
  setting: Boolean!
}

"""
A client is used to access the API, it controls authentication and stores settings relating to API usage.
"""
type totara_api_client {
  id: core_id!

  """
  Clients can be at the system level or within a tenant. If provided this
  identifies the tenant, otherwise it is a system client.
  """
  tenant_id: core_id

  """Name used to identify the client."""
  name(format: core_string_format = HTML): String!

  """User defined description of the purpose/use for this client."""
  description(format: core_text_format = HTML): String

  """Internal OAuth2 client providers for this client."""
  oauth2_client_providers: [totara_oauth2_client_provider!]!

  """The enabled status of the client."""
  status: Boolean

  """The service account for the API user linked to this API client."""
  service_account: totara_api_client_service_account
}

"""Input provided when creating a new client."""
input totara_api_client_input {
  """Name used to identify the client."""
  name: String!

  """The API service account user for the client."""
  user_id: core_id!

  """User defined description of the purpose/use for this client."""
  description: String

  """
  If not provided, client will be created as a system tenant. Tenant users can only create clients in their own tenant.
  """
  tenant_id: core_id

  """The enabled status of the client. Default value is enabled"""
  status: Boolean
}

"""Constant representing debug response type."""
enum totara_api_client_response_debug {
  NONE
  NORMAL
  DEVELOPER
}

"""Client result."""
type totara_api_client_result {
  client: totara_api_client!
}

"""Service account information for the API user."""
type totara_api_client_service_account {
  """User type containing data about the service account user."""
  user: core_user

  """
  True if the real-time validation checks indicate the user is suitable to be a
  service account for this client, false otherwise.
  """
  is_valid: Boolean!

  """Status about the user and service account if invalid."""
  status: totara_api_client_service_account_status!
}

"""Constant representing cause of an validation issue."""
enum totara_api_client_service_account_status {
  VALID
  NO_USER
  DELETED
  SUSPENDED
  GUEST
  ADMIN
  WRONG_TENANT
  TENANT_SUSPENDED
}

"""Input provided when updating an existing API client setting."""
input totara_api_client_setting_input {
  client_id: core_id!

  """It used to set complexity for an API client"""
  client_rate_limit: Int

  """It used to set default token expiry time for an API client"""
  default_token_expiry_time: Int

  """Set the type of response debug for an API client"""
  response_debug: totara_api_client_response_debug
}

"""
Client settings are used to configure api client, it stores settings relating to API client.
"""
type totara_api_client_settings {
  id: core_id!
  client_id: core_id!

  """It used to set complexity for an API client"""
  client_rate_limit: Int!

  """It used to set default token expiry time for an API client"""
  default_token_expiry_time: Int!

  """Used to set the type of response debug for an API client"""
  response_debug: totara_api_client_response_debug
}

"""
Return client settings result including global level and client level.
"""
type totara_api_client_settings_result {
  """Client level client settings"""
  client_settings: totara_api_client_settings!

  """Global level client settings"""
  global_settings: totara_api_global_client_settings!
}

"""
Input provided when requesting clients - specifies pagination or other request specific information.
"""
input totara_api_clients_input {
  """Pagination input"""
  pagination: core_pagination_input

  """
  If not provided, it will return system tenants. Tenant users can only view clients in their own tenant.
  """
  tenant_id: core_id
}

"""Paginated return result when requesting a list of clients."""
type totara_api_clients_result implements core_pageable_result {
  """List of api clients."""
  items: [totara_api_client!]!

  """Total number of api clients from this query."""
  total: Int!

  """Cursor to request the next set of results for this query."""
  next_cursor: String!
}

type totara_api_global_client_settings {
  """It used to set global rate limit for an API client"""
  site_rate_limit: Int

  """It used to set global client rate limit for an API client"""
  client_rate_limit: Int

  """It used to set global query depth for an API client"""
  max_query_depth: Int

  """It used to set global complex cost for an API client"""
  max_complexity_cost: Int

  """It used to set global token expiry time for an API client"""
  default_token_expiry_time: Int

  """Used to set the type of response debug for an API client"""
  response_debug: totara_api_client_response_debug
}

"""Input provided when searching for a user"""
input totara_api_search_users_input {
  """Tenant id."""
  tenant_id: core_id

  """User search text."""
  pattern: param_text
}

"""Returned user search result."""
type totara_api_search_users_result {
  users: [core_user]!
}

"""Input provided when updating an existing API client."""
input totara_api_update_client_input {
  id: core_id!

  """Name used to identify the client."""
  name: String

  """User defined description of the purpose/use for this client."""
  description: String

  """The enabled status of the client."""
  status: Boolean

  """The API service account user for the client."""
  user_id: core_id
}

"""Certification type"""
type totara_certification_certification {
  """ID of the prog record for the certification"""
  id: core_id!

  """ID of the certif record for the certification"""
  certifid: core_id!

  """Certification fullname"""
  fullname(format: core_format = PLAIN): String!

  """Certification shortname"""
  shortname(format: core_format = PLAIN): String!

  """Certification idnumber"""
  idnumber: String

  """Certification summary"""
  summary(format: core_format = HTML): String

  """The format of the certification summary"""
  summaryformat: core_format

  """Certification endnnote to be displayed on completion"""
  endnote(format: core_format = HTML): String

  """The date the current user is due in the certification"""
  duedate(format: core_date_format = TIMESTAMP): core_date

  """The state of the duedate"""
  duedate_state(format: core_format = PLAIN): String

  """The date/time the certification is available from"""
  availablefrom(format: core_date_format = TIMESTAMP): core_date

  """The date/time the certification is available until"""
  availableuntil(format: core_date_format = TIMESTAMP): core_date

  """The category this certification is in"""
  category: core_category

  """Certification content coursesets"""
  coursesets: [totara_program_program_courseset!]!

  """Current users completion information within the certification"""
  completion: totara_certification_completion

  """The time (e.g. "1 Month") that the certification is active for."""
  activeperiod: String
}

type totara_certification_completion {
  """
  The id of the completion record for the current user within the certification
  """
  id: core_id!

  """
  The integer status of the current user within the certification
  possible values: 0, 1
  """
  status: Int

  """
  The string status of the current user within the certification
  possible values: assigned, inprogress, complete, expired
  """
  statuskey: String

  """
  The integer status of the current users renewal state within the certiication
  """
  renewalstatus: Int

  """
  The string status of the current users renewal state within the certifications
  possible values: notdue, due, expired
  """
  renewalstatuskey: String

  """The time the user completed the program"""
  timecompleted(format: core_date_format = TIMESTAMP): core_date

  """The progress (as a percentage) that the user has made in the program"""
  progress: Float
}

"""
Mainly being used for fetching the editor weka. To see whether it is for comment or reply.
"""
enum totara_comment_area {
  COMMENT
  REPLY
}

type totara_comment_comment {
  id: core_id!
  user: core_user!
  content(format: core_format! = HTML): String!
  timedescription: String!
  totalreplies: Int!
  totalreactions: Int!
  edited: Boolean!
  deleted: Boolean!
  reasondeleted: Int

  """
  Interactor against this comment. If user_id is provided, then it will run check against that user.
  Otherwise user in session will be used.
  """
  interactor(user_id: param_integer): totara_comment_comment_interactor!
}

"""
Interactor type for checking all the available actions
of a single user against the comment instance.
"""
type totara_comment_comment_interactor {
  user_id: Int!
  comment_id: Int!
  can_update: Boolean!
  can_delete: Boolean!
  can_report: Boolean!
  can_reply: Boolean!
  can_react: Boolean!
  can_view_author: Boolean!
  reacted: Boolean!
}

"""Type of the cursor. A generic one."""
type totara_comment_cursor {
  """The total number of the comments or replies."""
  total: Int!

  """
  The next cursor. If it is null, meaning that we are at the end of the list.
  """
  next: String
}

type totara_comment_draft_item {
  id: Int!
  content: String!
  format: Int!
  component: String!
  area: String!

  """To identify whether this draft item is for comment or for reply."""
  comment_area: totara_comment_area!

  """The file draft's id where all the area files are moved to here."""
  file_draft_id: Int!
}

type totara_comment_reply {
  id: core_id!
  user: core_user!
  content(format: core_format! = HTML): String!
  commentid: core_id!
  timedescription: String!
  edited: Boolean!
  deleted: Boolean!
  reasondeleted: Int
  totalreactions: Int

  """
  Interactor against this reply. If user_id is provided, then it will run check against that user.
  Otherwise user in session will be used.
  """
  interactor(user_id: param_integer): totara_comment_reply_interactor!
}

"""
Interactor type for checking all the available actions of a single user
against the reply instance
"""
type totara_comment_reply_interactor {
  user_id: Int!
  reply_id: Int!
  can_update: Boolean!
  can_delete: Boolean!
  can_report: Boolean!
  can_react: Boolean!
  can_follow_reply: Boolean!
  can_view_author: Boolean!
  reacted: Boolean!
}

"""Achievement configuration"""
type totara_competency_achievement_configuration {
  """ID of competency being configured"""
  competency_id: core_id!

  """Aggregation method used between pathways"""
  overall_aggregation: totara_competency_overall_aggregation!

  """List of pathways in use"""
  paths: [totara_competency_pathway!]!
}

"""Competency details achievement path"""
type totara_competency_achievement_path {
  """Type of pathway classification, e.g. SINGLEVALUE, MULTIVALUE"""
  class: totara_competency_pathway_classification!

  """Type of achievement path, e.g. 'manual', 'learning_plan', null"""
  type: String

  """Human readable name for the achievement path"""
  name: String!
}

"""Input type for filtering competency activity log"""
input totara_competency_activity_log_filters {
  """ID of the assignment to filter by"""
  assignment_id: core_id
}

"""A row from the competency activity log of a particular user"""
type totara_competency_activity_log_row {
  """Time the event occurred"""
  timestamp(format: core_date_format = TIMESTAMP): core_date

  """Human readable description of the event"""
  description(format: core_format = PLAIN): String

  """Human readable comment, e.g. for manual rating"""
  comment(format: core_format = PLAIN): String

  """
  Whether the user is deemed proficient in this competency after the event
  """
  proficient_status: Boolean

  """The assignment object which the event is related to"""
  assignment: totara_competency_assignment

  """
  The action for this activity log event, e.g. 'assigned' or 'tracking_started'
  See ACTION constants in competency_assignment_user_log for full list
  """
  assignment_action: String

  """
  The type of activity log event that this entry refers to, e.g. 'assignment'
  'competency_achievement', 'configuration_change' or 'competency_achieved_via'
  See classes within totara_competency\models\activity_log for a full list
  """
  type: String
}

"""Result holder for an archived user assignment."""
type totara_competency_archive_user_assignment_result {
  archived_assignment: totara_competency_assignment!
}

"""
Competency assignment - a relationship between a specific competency and a group of users who are assigned to it.

NOTE: The query is responsible for ensuring the user can see the assignment.
"""
type totara_competency_assignment {
  id: core_id!

  """Assignment type (one of 'admin', 'self', 'system' or 'other')"""
  type: String!

  """
  Human readable label for the type. NOTE: These do not map directly to the
  assignment type, some types return more specific strings based on group type
  """
  type_name: String!

  """ID of the competency being assigned"""
  competency_id: core_id!

  """
  Type of group being assigned (one of 'user', 'position', 'organisation' or 'cohort')
  """
  user_group_type: String!

  """ID of group instance being assigned"""
  user_group_id: core_id!

  """True if the assignment is optional (rather than mandatory)"""
  optional: Boolean

  """
  Assignment status code matching one of the totara_competency\entity\assignment
  STATUS_ constants (e.g. 0 => 'draft', 1 => 'active', 2 => 'archived')
  """
  status: Int!

  """ID of user who created this assignment"""
  created_by: Int

  """Time of assignment record creation"""
  created_at(format: core_date_format = TIMESTAMP): core_date!

  """Time of last modification to the assignment record"""
  updated_at(format: core_date_format = TIMESTAMP): core_date!

  """Time the assignment was archived - not set if not yet archived"""
  archived_at(format: core_date_format = TIMESTAMP): core_date

  """The competency object this assignment relates to"""
  competency: totara_competency_competency!

  """The user group object this assignment relates to"""
  user_group: totara_competency_user_group!

  """
  Human readable name which includes the actual group name for position, organisation and cohorts.
  For self, other and system assignments it will return a fixed string
  """
  progress_name(format: core_format = PLAIN): String

  """
  Gets human readable reason for assignment, we show:
  - the fullname of the assigner and role
  - a fixed string for self and other
  - the actual name of the user group + type for position, organisation and audience
  """
  reason_assigned(format: core_format = PLAIN): String

  """User object for the user doing the assigning"""
  assigner: core_user

  """True if current user is permitted to archive this assignment"""
  can_archive: Boolean

  """
  The scale for the associated competency, with proficient flags on the values adjusted
  if there is an assignment specific min proficient value override.
  """
  assignment_specific_scale: totara_competency_scale

  """Whether the user is currently assigned"""
  is_assigned(user_id: core_id!): Boolean!

  """
  If the user is not assigned then this returns the date the user got unassigned last
  """
  unassigned_at(format: core_date_format = TIMESTAMP, user_id: core_id!): core_date
}

input totara_competency_assignment_min_proficiency_override_input {
  assignment_ids: [core_id!]!
  scale_value_id: core_id
}

type totara_competency_assignment_min_proficiency_override_result {
  assignments: [totara_competency_assignment!]!
}

"""
Unique human readable reason as to why a competency was assigned.
- the fullname of the assigner and role
- a fixed string for self and other
- the actual name of the user group + type for position, organisation and audience
"""
type totara_competency_assignment_reason {
  """Human readable reason"""
  reason: String!

  """List of assignments using this reason"""
  assignments: [totara_competency_assignment!]!

  """A unique key that refers to this unique assignment reason."""
  key: String!
}

type totara_competency_competency implements totara_competency_competency_interface {
  id: core_id!

  """Competency fullname"""
  fullname(format: core_format = PLAIN): String!

  """Competency idnumber"""
  idnumber(format: core_format = PLAIN): String

  """Competency shortname"""
  shortname(format: core_format = PLAIN): String

  """
  Display name is a unified display name that can be used across different types of hierarchy item. Equivalent to fullname
  """
  display_name(format: core_format = PLAIN): String

  """Human readable rich-text description of this competency"""
  description(format: core_format = HTML): String

  """Time of competency creation"""
  timecreated(format: core_date_format = TIMESTAMP): core_date

  """Time when this competency record was last modified"""
  timemodified(format: core_date_format = TIMESTAMP): core_date

  """ID of framework that this competency belongs to"""
  frameworkid: core_id

  """Framework that this competency belongs to"""
  framework: totara_competency_competency_framework

  """
  Slash separated list of ancestors of this competency including the competency's own ID. E.g. '/1/2/6/18'
  """
  path: String!

  """True if the competency is set to be visible"""
  visible: Boolean!

  """ID of this competency's parent"""
  parentid: core_id

  """
  Competency that this competency is a child of, or null for top level competency
  """
  parent: totara_competency_competency

  """List of competencies that are direct children of this competency"""
  children: [totara_competency_competency]!

  """ID of this competency's type"""
  typeid: core_id

  """Type object for this competency's type"""
  type: totara_competency_competency_type

  """
  List of assignments related to this competency (groups of users assigned to it)
  """
  assignments: [totara_competency_assignment]

  """
  Array of integers representing ways the competency can be assigned (1 = assign to self, 2 = assign to others)
  """
  assign_availability: [Int]

  """List of custom field metadata associated with the current competency"""
  display_custom_fields: [totara_competency_competency_custom_field]

  """
  Legacy aggregation method used only in previous Totara versions for aggregating child competencies and linked courses
  """
  aggregation_method: Int
}

"""Metadata for a single competency's custom field data"""
type totara_competency_competency_custom_field {
  """The custom field type this data is for"""
  type: String

  """Human readable title of the custom field name"""
  title(format: core_format = PLAIN): String

  """Value for the custom field"""
  value: String
}

"""
Competency framework

NOTE: The query is responsible for ensuring the user can see the competency framework
"""
type totara_competency_competency_framework {
  id: core_id!

  """
  Generic display name for this competency framework (standardized name that can
  be used across group types, but currently returns fullname)
  """
  display_name(format: core_format = PLAIN): String

  """Competency framework fullname"""
  fullname(format: core_format = PLAIN): String!

  """Competency framework shortname"""
  shortname(format: core_format = PLAIN): String

  """Competency framework idnumber"""
  idnumber(format: core_format = PLAIN): String

  """Competency framework rich-text description"""
  description(format: core_format = HTML): String

  """List of competencies belonging to this framework"""
  competencies: [totara_competency_competency]

  """Scale that belongs to this competency"""
  scale: totara_competency_scale
}

"""
Competency

NOTE: The query is responsible for ensuring the user can see the competency.
"""
interface totara_competency_competency_interface {
  id: core_id!

  """Competency fullname"""
  fullname(format: core_format = PLAIN): String!

  """Competency idnumber"""
  idnumber(format: core_format = PLAIN): String

  """Competency shortname"""
  shortname(format: core_format = PLAIN): String

  """
  Display name is a unified display name that can be used across different types of hierarchy item. Equivalent to fullname
  """
  display_name(format: core_format = PLAIN): String

  """Human readable rich-text description of this competency"""
  description(format: core_format = HTML): String

  """Time of competency creation"""
  timecreated(format: core_date_format = TIMESTAMP): core_date

  """Time when this competency record was last modified"""
  timemodified(format: core_date_format = TIMESTAMP): core_date

  """ID of framework that this competency belongs to"""
  frameworkid: core_id

  """Framework that this competency belongs to"""
  framework: totara_competency_competency_framework

  """
  Slash separated list of ancestors of this competency including the competency's own ID. E.g. '/1/2/6/18'
  """
  path: String!

  """True if the competency is set to be visible"""
  visible: Boolean!

  """ID of this competency's parent"""
  parentid: core_id

  """
  Competency that this competency is a child of, or null for top level competency
  """
  parent: totara_competency_competency

  """List of competencies that are direct children of this competency"""
  children: [totara_competency_competency]!

  """ID of this competency's type"""
  typeid: core_id

  """Type object for this competency's type"""
  type: totara_competency_competency_type

  """
  List of assignments related to this competency (groups of users assigned to it)
  """
  assignments: [totara_competency_assignment]

  """
  Legacy aggregation method used only in previous Totara versions for aggregating child competencies and linked courses
  """
  aggregation_method: Int
}

"""
Competency type

NOTE: The query is responsible for ensuring the user can see the competency type
"""
type totara_competency_competency_type {
  id: core_id!

  """
  Generic display name for this competency type (standardized name that can be
  used across group types, but currently returns fullname)
  """
  display_name(format: core_format = PLAIN): String

  """Competency type fullname"""
  fullname(format: core_format = PLAIN): String!

  """Competency type idnumber"""
  idnumber(format: core_format = PLAIN): String

  """Competency type shortname"""
  shortname(format: core_format = PLAIN): String

  """Competency type rich-text description"""
  description(format: core_format = HTML): String
}

input totara_competency_copy_pathway_input {
  source_competency_id: core_id!
  target_competency_ids: [core_id!]!
  allowed_competency_frameworks: [core_id!]!
}

type totara_competency_copy_pathway_result implements totara_competency_result {
  """True if the copy was successful"""
  success: Boolean!

  """Validation errors if any."""
  error: totara_competency_error

  """total copy count"""
  copied_count: Int!

  """need review count"""
  need_review_count: Int
}

"""Represents an error that occurs when processing competencies."""
type totara_competency_error {
  """Error message."""
  message(format: core_format = PLAIN): String!

  """Optional error code if any."""
  code: String
}

"""Linked course metadata"""
type totara_competency_linked_course {
  """ID of the course that is linked to a competency"""
  course_id: core_id!

  """Fullname for the linked course"""
  fullname(format: core_format = PLAIN): String!

  """
  True if the linked course is mandatory (must be completed), false otherwise
  """
  is_mandatory: Boolean!
}

"""This is the order direction"""
enum totara_competency_order_dir {
  ASC
  DESC
}

"""
How achievement values are aggregated
None of the strings are retrieved from user input - therefore no formatting requirement
"""
type totara_competency_overall_aggregation {
  """Type of aggregation"""
  aggregation_type: String!

  """Human readable string describing aggregation type"""
  title: String!

  """Human readable description of aggregration type"""
  description: String
}

"""
This is the generic pathway type. Each plugin must define its specific type with name pathway_<pathway_type>_instance
These should be retrieved separately and should contain the plugin specific detail
None of the strings are retrieved from user input - therefore no formatting requirement
"""
type totara_competency_pathway {
  id: core_id!
  pathway_type: String!
  instance_id: core_id
  title: String!
  sortorder: Int!
  status: totara_competency_pathway_status!
  classification: totara_competency_pathway_classification!
  scale_value(format: core_format = PLAIN): String
  error(format: core_format = PLAIN): String
  criteria_summary: [totara_competency_summarized_pathway_criteria!]
}

"""A single pathway achievement for a user"""
type totara_competency_pathway_achievement {
  """Pathway ID"""
  id: core_id!

  """The pathway object"""
  pathway: totara_competency_pathway!

  """The user object for the user"""
  user: core_user!

  """Scale value object"""
  scale_value: totara_competency_scale_value

  """True if there is a scale value attached to this pathway"""
  has_scale_value: Boolean!

  """Time the pathway was achieved"""
  date_achieved(format: core_date_format = TIMESTAMP): core_date

  """Time the pathway was last aggregated"""
  last_aggregated(format: core_date_format = TIMESTAMP): core_date

  """Status of pathway, e.g. is it current or archived"""
  status: totara_competency_pathway_achievement_status!

  """
  This is a meta field which indicates if the user achieved this pathway
  """
  achieved: Boolean!
  related_info: String
}

"""The status of a pathway achievement"""
enum totara_competency_pathway_achievement_status {
  """This is the current achievement for a user"""
  CURRENT

  """Every outdated record is marked as archived"""
  ARCHIVED
}

"""
Pathway classification indicates whether completing a pathway results in a
specific scale value or can result in any of the scale values
"""
enum totara_competency_pathway_classification {
  """Completing the pathway can result in any scale value"""
  MULTIVALUE

  """Completing the pathway will result in a specific scale value"""
  SINGLEVALUE
}

"""Possible pathway statuses"""
enum totara_competency_pathway_status {
  """The pathway is in use"""
  ACTIVE

  """The pathway has been archived"""
  ARCHIVED
}

"""Competency profile assignment filter option"""
type totara_competency_profile_assignment_filter_option {
  name(format: core_format = PLAIN): String!

  """
  Type of group to filter by (one of 'user', 'position', 'organisation' or 'cohort')
  """
  user_group_type: String!

  """ID of group instance to filter by"""
  user_group_id: Int!

  """Assignment type (one of 'admin', 'self', 'system' or 'other')"""
  type: String!

  """
  Filter by assignment status. Code matching one of the
  totara_competency\entity\assignment STATUS_ constants (e.g. 0 => 'draft', 1 =>
  'active', 2 => 'archived')
  """
  status: Int!

  """Human readable string describing status"""
  status_name(format: core_format = PLAIN): String!
}

"""Competency profile assignment filters"""
input totara_competency_profile_assignment_filters {
  """
  Type of group being filtered by (one of 'user', 'position', 'organisation' or 'cohort')
  """
  user_group_type: String

  """ID of group instance being filtered by"""
  user_group_id: Int

  """Assignment type (one of 'admin', 'self', 'system' or 'other')"""
  type: String

  """
  Filter by assignment status. Code matching one of the
  totara_competency\entity\assignment STATUS_ constants (e.g. 0 => 'draft', 1 =>
  'active', 2 => 'archived')
  """
  status: Int

  """Filter to only assignments with a specific proficiency"""
  proficient: Boolean

  """
  Text string to search with LIKE against competency fullname and description
  """
  search: String

  """An array of competency ids for querying the selected competenies"""
  ids: [core_id!]
}

"""Competency profile progress item per assignment,"""
type totara_competency_profile_assignment_progress {
  """The ID of the assignment"""
  id: core_id!

  """The assignment for which progress is being displayed"""
  assignment: totara_competency_assignment

  """The competency the assignment is related to"""
  competency: totara_competency_competency

  """True if the user is considered proficient, false otherwise"""
  proficient: Boolean @deprecated(reason: "This field returns null no matter what. Use `my_value.proficient` instead.")

  """The value currently held by the user"""
  my_value: totara_competency_profile_scale_value_progress

  """The minimum required proficiency for this competency"""
  min_value: totara_competency_profile_scale_value_progress!

  """The reason why assignment is assigned"""
  reason_assigned: String

  """Whether the user is currently assigned"""
  is_assigned(user_id: core_id!): Boolean!

  """
  If the user is not assigned then this returns the date the user got unassigned last
  """
  unassigned_at(format: core_date_format = TIMESTAMP, user_id: core_id!): core_date
}

"""
Competency profile progress item per competency, with a list of assignments (for a given user)
"""
type totara_competency_profile_competency_progress {
  """The competency progress is shown for"""
  competency: totara_competency_competency

  """List of items that make up the progress"""
  items: [totara_competency_profile_assignment_progress]
}

"""Competency profile overall progress"""
type totara_competency_profile_overall_progress {
  """User object for the target user"""
  user: core_user

  """List of progress items"""
  items: [totara_competency_profile_progress_item!]

  """String identifying the user's most recent achieved competency"""
  latest_achievement(format: core_format = PLAIN): String

  """Optional set of filters to restrict the items returned"""
  filters: [totara_competency_profile_assignment_filter_option!]
}

"""
Competency profile overall progress individual items
To simplify, it is a list of assignments grouped by assignment type, user group type and user group id
"""
type totara_competency_profile_progress_item {
  """Overall progress as a percentage (0 to 100)"""
  overall_progress: Int!

  """Name of the progress item"""
  name(format: core_format = PLAIN): String!

  """List of items that make up the progress"""
  items: [totara_competency_profile_assignment_progress]
}

"""
Competency profile scale_value progress type that includes extra details (the percentage towards competency progress)
"""
type totara_competency_profile_scale_value_progress {
  """ID of the scale value achieved"""
  id: core_id

  """ID of the scale this scale value belongs to"""
  scale_id: core_id

  """Name for the scale value"""
  name(format: core_format = PLAIN): String!

  """
  Relative percentage for the current proficient value where 0% is no value (value not achieved)
  and a 100% is the highest value on the scale
  """
  percentage: Int

  """True if the scale value is proficient"""
  proficient: Boolean
}

"""Represents competency processing result."""
interface totara_competency_result {
  """True if the copy was successful"""
  success: Boolean!

  """Validation errors if any."""
  error: totara_competency_error
}

"""Competency scale"""
type totara_competency_scale {
  id: core_id!

  """Human readable scale name"""
  name(format: core_format = PLAIN): String!

  """Rich text description of the scale"""
  description(format: core_format = HTML): String

  """Time the scale record was last updated"""
  timemodified(format: core_date_format = TIMESTAMP): core_date!

  """User ID of the last user to modify the scale"""
  usermodified: core_id

  """ID of the default scale value"""
  defaultid: core_id

  """List of scale values associated with this scale"""
  values: [totara_competency_scale_value!]!
}

"""Returns items for each scale value, which could be criteria groups"""
type totara_competency_scale_achievement {
  """Specific scale value to return pathways for"""
  scale_value: totara_competency_scale_value

  """List of pathways for this scale value"""
  items: [totara_competency_pathway_achievement]
}

"""
This represents an item which is shown under within a specific scale.
The pathway_type can be any type which supports single scale values, i.e. criteria_group
"""
type totara_competency_scale_achievement_item {
  instance_id: core_id!
  pathway_type: String
}

"""Competency scale value"""
type totara_competency_scale_value {
  id: core_id!

  """Human readable label for this scale value item"""
  name(format: core_format = PLAIN): String!

  """The id number to identify the scale value item programmatically"""
  idnumber(format: core_format = PLAIN): String

  """Rich text description of this scale value item"""
  description(format: core_format = HTML): String

  """ID of the scale this scale value is associated with"""
  scaleid: core_id!

  """Optional numeric score associated with this scale value"""
  numericscore: Float

  """
  Numeric sort order used to arrange the values in a scale relative to each other
  """
  sortorder: Int!

  """Time this scale value record was last changed"""
  timemodified(format: core_date_format = TIMESTAMP): core_date!

  """ID of the user who made the last change to this scale value record"""
  usermodified: core_id

  """
  True if the scale value is equal to or higher than the scale's minimum proficient value.
  A user with a scale value that is proficient is considered proficient in the competency.
  """
  proficient: Boolean!
}

"""
Competency object for a competency that can be self assigned by the viewing user
"""
type totara_competency_self_assignable_competency implements totara_competency_competency_interface {
  id: core_id!

  """Competency fullname"""
  fullname(format: core_format = PLAIN): String!

  """Competency idnumber"""
  idnumber(format: core_format = PLAIN): String

  """Competency shortname"""
  shortname(format: core_format = PLAIN): String

  """
  Display name is a unified display name that can be used across different types of hierarchy item. Equivalent to fullname
  """
  display_name(format: core_format = PLAIN): String

  """Human readable rich-text description of this competency"""
  description(format: core_format = HTML): String

  """Time of competency creation"""
  timecreated(format: core_date_format = TIMESTAMP): core_date

  """Time when this competency record was last modified"""
  timemodified(format: core_date_format = TIMESTAMP): core_date

  """ID of framework that this competency belongs to"""
  frameworkid: core_id

  """Framework that this competency belongs to"""
  framework: totara_competency_competency_framework

  """
  Slash separated list of ancestors of this competency including the competency's own ID. E.g. '/1/2/6/18'
  """
  path: String!

  """True if the competency is set to be visible"""
  visible: Boolean!

  """ID of this competency's parent"""
  parentid: core_id

  """
  Competency that this competency is a child of, or null for top level competency
  """
  parent: totara_competency_competency

  """List of competencies that are direct children of this competency"""
  children: [totara_competency_competency]!

  """ID of this competency's type"""
  typeid: core_id

  """Type object for this competency's type"""
  type: totara_competency_competency_type

  """
  List of assignments related to this competency (groups of users assigned to it)
  """
  assignments: [totara_competency_assignment]

  """
  List of user assignments related to this competency (actual users assigned to it)
  """
  user_assignments: [totara_competency_assignment]
  aggregation_method: Int
}

"""
Filter input type used when filtering the list of competencies that can be self assigned
"""
input totara_competency_self_assigned_competencies_filter {
  """
  Text to match (via LIKE) against fullname, shortname, idnumber and description
  """
  text: param_text

  """
  Filter by one or more assignment types by providing an array of strings
  matching one or more of the totara_competency\entity\assignment TYPE_
  constants (e.g. 'admin', 'self', 'system', 'other' or 'legacy')
  """
  assignment_type: [param_alphaext]

  """Filter by a specific competency framework ID"""
  framework: param_integer

  """
  Filter by assignment status. Code matching one of the
  totara_competency\entity\assignment STATUS_ constants (e.g. 0 => 'draft', 1 =>
  'active', 2 => 'archived')
  """
  assignment_status: param_integer

  """Filter by parent competency ID"""
  parent: param_integer

  """
  Filter to children of a specific competency e.g. given a competency ID will
  find all competencies below it by using its path
  """
  path: param_integer

  """Filter by one or more competency type ID"""
  type: [param_integer]

  """Filter down to a specific set of competency IDs"""
  ids: [param_integer]
}

"""
Result type returned when requesting a list of self assignable competencies
"""
type totara_competency_self_assigned_competencies_result implements core_pageable_result {
  """A list of self assignable competency objects"""
  items: [totara_competency_self_assignable_competency]

  """Total number of competencies available"""
  total: Int!

  """Cursor to request the next set of results for this query"""
  next_cursor: String!
}

"""Summarized pathway criteria detail"""
type totara_competency_summarized_pathway_criteria {
  item_type: String!
  item_aggregation: String
  error(format: core_format = PLAIN): String
  items: [totara_competency_summarized_pathway_criterion_item!]
}

"""Summarized pathway criteria item"""
type totara_competency_summarized_pathway_criterion_item {
  """Human readable string describing this criterion"""
  description(format: core_format = PLAIN): String

  """Error string displayed if there are issues with this criterion"""
  error(format: core_format = PLAIN): String
}

"""Input for the user assignments query."""
input totara_competency_user_assignments_input {
  user_id: core_id
  filters: totara_competency_profile_assignment_filters
  result_size: Int
  cursor: String
}

"""Result for the user assignments query."""
type totara_competency_user_assignments_result implements core_pageable_result {
  items: [totara_competency_profile_assignment_progress!]

  """Optional set of filters to restrict the items returned"""
  filters: [totara_competency_profile_assignment_filter_option!]
  total: Int!
  next_cursor: String!
}

"""Details about a specific competency user group"""
type totara_competency_user_group {
  id: ID!

  """Human readable name for the group"""
  name(format: core_format = PLAIN): String!

  """
  Type of group being assigned (one of 'user', 'position', 'organisation' or 'cohort')
  """
  type: String!

  """True if the group has been deleted"""
  is_deleted: Boolean!
}

enum totara_contentmarketplace_completion_condition {
  """
  Whether marking the completion base on the condition from content marketplace provider.
  """
  CONTENT_MARKETPLACE
}

"""
Common external course data for all content marketplaces.
Aligns with the summary_provider interface.
"""
interface totara_contentmarketplace_learning_object {
  id: core_id!
  name(format: core_format = PLAIN): String!
  language: String!
  image_url: String
}

type totara_core_date_time_setting {
  iso: String!
  timezone: String
}

type totara_core_delete_draft_file_result {
  success: Boolean!
}

"""Generic learning item data"""
type totara_core_learning_item {
  """
  ID of the learning item
  NOTE: there is potential overlap of course/prog/cert ids
        this field can not be assumed to be unique
  """
  id: core_id!

  """
  Type of the learning item
  (course, program, certification)
  """
  itemtype: String!

  """
  Component of the learning item
  (core_course, totara_program, totara_certification)
  """
  itemcomponent: String!

  """Learning item shortname"""
  shortname(format: core_format = PLAIN): String!

  """Learning item fullname"""
  fullname(format: core_format = PLAIN): String!

  """Learning item description"""
  description(format: core_format = HTML): String

  """The format of the learning item description"""
  description_format: core_format

  """
  Learning item progress, a percentage of how far
  through the item the user viewing it is.
  """
  progress: Float

  """Learning item URL, a link to view the learning item"""
  url_view: String!

  """
  Learning item duedate, the date the learning item
  is due for the viewing user.
  """
  duedate(format: core_date_format = TIMESTAMP): core_date

  """
  Learning item duedate status, as computed by server. One of
  "info", "warning", "danger", or "overdue".
  """
  duedate_state: String

  """Learning item image URL"""
  image_src: String

  """Unique identifier, a composite of id and type"""
  unique_id: String!

  """Progress summary text"""
  progress_summary: String
}

type totara_core_learning_type_filter_option {
  """Learning type (one of 'course', 'program', 'certification')"""
  type: String!
}

"""Represents a way that a user is related to other users."""
type totara_core_relationship {
  """Relationship ID."""
  id: core_id!

  """Unique human understandable way of identifying the relationship."""
  idnumber(format: core_format = PLAIN): String!

  """Type of relationship, ex: standard = 0, manual = 1"""
  type: Int!

  """Order that the relationship should appear in lists."""
  sort_order: Int!

  """Name of the relationship."""
  name(format: core_format = PLAIN): String!

  """The plural version of the name of the relationship."""
  name_plural(format: core_format = PLAIN): String!

  """When this relationship was created."""
  created_at(format: core_date_format = TIMESTAMP): core_date!
}

"""Result wrapper for the totara_core_settings_navigation_tree query"""
type totara_core_settings_navigation_tree {
  trees: [totara_core_tui_tree_node!]!
  open_ids: [String!]!
}

"""
Represents a recursive tree node with a link and children for use in the tui tree component.
"""
type totara_core_tui_tree_node implements totara_core_tui_tree_node_interface {
  id: String!
  label(format: core_format = PLAIN): String!
  linkUrl: String
  children: [totara_core_tui_tree_node!]!
}

"""
If you need to return custom content, then you will need to define a new type that implements this interface.
"""
interface totara_core_tui_tree_node_interface {
  id: String!
  label(format: core_format = PLAIN): String!
  linkUrl: String
}

enum totara_core_user_learning_item_progress {
  COMPLETED
  IN_PROGRESS
  NOT_STARTED
  NOT_TRACKED
}

enum totara_core_user_learning_item_type {
  COURSE
  PROGRAM
  CERTIFICATION
}

input totara_core_user_learning_items_filters {
  ids: [ID!]
  search: String
  type: totara_core_user_learning_item_type
  progress: totara_core_user_learning_item_progress
}

input totara_core_user_learning_items_input {
  user_id: core_id
  filters: totara_core_user_learning_items_filters
  result_size: Int
  cursor: String
}

type totara_core_user_learning_items_result implements core_pageable_result {
  items: [totara_core_learning_item!]!
  total: Int!
  next_cursor: String!
}

enum totara_engage_access {
  PUBLIC
  PRIVATE
  RESTRICTED
}

type totara_engage_access_option {
  value: totara_engage_access!
  label: String!
}

type totara_engage_advanced_features {
  library: Boolean!
  recommenders: Boolean!
  workspaces: Boolean!
}

type totara_engage_card {
  instanceid: core_id!
  name(format: core_format!): String
  summary: String
  user: core_user!
  component: String!
  tuicomponent: String!
  imagetuicomponent: String!
  image(theme: param_component, preview_mode: String): String
  access: totara_engage_access!
  timecreated: String!
  extra(theme: param_component): String!
  comments: Int!
  reactions: Int!
  sharedbycount: Int!
  bookmarked: Boolean!
  owned: Boolean!
  topics: [totara_topic_topic!]
  footnotes(type: param_text, item_id: core_id, area: param_area, component: param_component): [totara_engage_footnote!]
  url(source: String, search: param_text): String
  interactor: totara_engage_resource_interactor!
}

type totara_engage_cards {
  cursor: totara_engage_cursor!
  cards: [totara_engage_card!]
}

type totara_engage_cursor {
  total: Int!

  """
  Next cursor, if this is null, then we are at the end of the result set.
  """
  next: String
}

input totara_engage_filter {
  """Specify the query template to use - 'null' would use default."""
  page: param_integer
  access: totara_engage_access
  type: param_component
  topic: param_integer
  sort: param_integer
  search: param_text
  section: param_integer
  saved: param_boolean
  shared: param_boolean
  owned: param_boolean
  adder: param_boolean
}

type totara_engage_filter_option {
  value: String
  id: String
  label: String!
}

type totara_engage_filter_option_map {
  options: [totara_engage_filter_option!]!
  type: totara_engage_filter_type!
  label: String!
}

enum totara_engage_filter_type {
  ACCESS
  TYPE
  TOPIC
  SORT
  SECTION
}

type totara_engage_footnote {
  component: String!
  tuicomponent: String!
  props: String!
}

input totara_engage_footnotes {
  type: param_text
  item_id: core_id
  area: param_area
  component: param_component
}

type totara_engage_modal {
  component: String!
  expandable: Boolean!
  label: String!
  id: String!
  can_share: Boolean!
}

type totara_engage_navigation_panel_section {
  component: String!
  tuicomponent: String!
  showcontribute: Boolean!
  can_share: Boolean
}

type totara_engage_people {
  id: Int!
  fullname: String!
}

type totara_engage_rating {
  """Item id"""
  itemid: Int!

  """Total rates"""
  count: Int!

  """Star value"""
  rating: Float!

  """Check the item is rated or not"""
  rated: Boolean!
}

input totara_engage_recipient_in {
  instanceid: param_integer!
  component: param_component!
  area: param_area!
}

type totara_engage_recipient_out {
  component: String!
  area: String!
  instanceid: Int!
  alreadyshared: Boolean!
  summary: String!
  minimum_access: totara_engage_access!

  """Will contain user information if type is user."""
  user: core_user

  """Will contain information about recipients other than users."""
  other: totara_engage_share_recipient
}

type totara_engage_resource {
  id: core_id!
  instanceid: core_id!
  name(format: core_format!): String
  user: core_user!
  access: totara_engage_access!
  time: String!
  context_id: Int!
}

"""Capabilities of the user interacting with the resource."""
type totara_engage_resource_interactor {
  user_id: Int!
  can_bookmark: Boolean!
  can_comment: Boolean!
  can_react: Boolean!
  can_share: Boolean!
}

input totara_engage_share_item {
  itemid: param_integer!
  component: param_component!
}

type totara_engage_share_recipient {
  id: Int!
  category: String!
  fullname: String!
  imageurl: String
  imagealt: String
  email: String
}

type totara_engage_share_recipient_totals {
  area: String!
  label: String!
  total: Int!
}

type totara_engage_share_totals {
  sharedbycount: Int!
  totalrecipients: Int!
  recipients: [totara_engage_share_recipient_totals!]!
}

enum totara_engage_source {
  SELF
  OTHER
}

type totara_engage_time_view_option {
  value: totara_engage_timeview!
  label: String!
}

enum totara_engage_timeview {
  LESS_THAN_FIVE
  FIVE_TO_TEN
  MORE_THAN_TEN
}

type totara_engage_topic {
  id: Int!
  name: String!
}

"""Represents the evidence item"""
type totara_evidence_evidence_item {
  """The id of the evidence item"""
  id: core_id!

  """The name of the evidence item"""
  name(format: core_format = PLAIN): String!

  """The evidence type that the evidence item associated with"""
  type: totara_evidence_evidence_type!

  """The date the evidence item was created"""
  created_at(format: core_date_format = DATELONG): core_date!

  """The custom field data of the evidence item"""
  fields: [totara_evidence_evidence_item_field!]!
}

type totara_evidence_evidence_item_field {
  label(format: core_format = PLAIN): String!
  type: String!
  content: String!
}

"""Represents the evidence type"""
type totara_evidence_evidence_type {
  """The id of the evidence type"""
  id: core_id!

  """The name of the evidence type"""
  name(format: core_format = PLAIN): String!
}

"""Filters input for the user evidence item adder query."""
input totara_evidence_user_evidence_item_filters {
  search: String
  type_id: core_id
  ids: [core_id]
}

"""Input for the user evidence items query."""
input totara_evidence_user_evidence_items_input {
  filters: totara_evidence_user_evidence_item_filters
  user_id: core_id
  result_size: Int
  cursor: String
}

"""Result for the user evidence items query."""
type totara_evidence_user_evidence_items_result implements core_pageable_result {
  items: [totara_evidence_evidence_item!]!
  total: Int!
  next_cursor: String!
}

"""Input for the user evidence types query."""
input totara_evidence_user_evidence_types_input {
  user_id: core_id
}

"""Result for the user evidence types query."""
type totara_evidence_user_evidence_types_result {
  items: [totara_evidence_evidence_type!]!
}

"""Details of a company goal"""
type totara_hierarchy_company_goal {
  """Unique company goal identifier"""
  id: core_id!

  """Company goal name"""
  full_name(format: core_format = PLAIN): String

  """Company goal name"""
  short_name(format: core_format = PLAIN): String

  """Domain specific alternative to company goal id"""
  id_number: String

  """Company goal description"""
  description(format: core_format = HTML): String

  """Goal completion target date if any."""
  target_date(format: core_date_format = DATE): core_date

  """Goal scope."""
  goal_scope: totara_hierarchy_goal_scope!

  """Goal type name"""
  type_name(format: core_format = HTML): String
}

"""Details of a company goal assigned to a specific user"""
type totara_hierarchy_company_goal_assignment {
  """Unique company goal/assignment combination identifier"""
  id: core_id!

  """User to whom the company goal was assigned"""
  user_id: core_id!

  """Assigned company goal"""
  goal: totara_hierarchy_company_goal!

  """
  Indicates how the company goal was assigned to the user, e.g. cohort, manager,
  etc. NB the same company goal can be assigned to the same user in multiple
  ways.
  """
  assignment_types: [totara_hierarchy_goal_assignment_type_extended]!

  """Goal status."""
  scale_value: totara_hierarchy_goal_scale_value
}

"""Parameters to filter a set of retrieved company goal assignments."""
input totara_hierarchy_company_goal_assignment_filter {
  """Company goal assignment ids to look up"""
  ids: [param_integer]

  """User whose company goal assignments are to be retrieved"""
  user_id: param_integer

  """Company goal name to look up"""
  goal_name: param_text

  """company goal framework id to look up"""
  framework_id: param_integer

  """company goal type to look up"""
  type_id: param_integer
}

"""Parameters to retrieve a set of company goal assignments."""
input totara_hierarchy_company_goal_assignment_input {
  """Filter values"""
  filters: totara_hierarchy_company_goal_assignment_filter

  """Attribute on which to sort retrieved company goal assignments"""
  order_by: totara_hierarchy_company_goal_assignment_order_field

  """
  Whether to sort retrieved company goal assignments in ascending or descending
  order.
  """
  order_dir: totara_hierarchy_goal_order_dir

  """No of company goal assignments to retrieve at a time"""
  result_size: param_integer

  """Pointer to next page of personal goals"""
  cursor: String
}

"""Field on which to sort retrieved company goal assignments."""
enum totara_hierarchy_company_goal_assignment_order_field {
  ID
  USER_ID
  GOAL_ID
  GOAL_NAME
  TARGET_DATE
}

"""Paginator holding a set of retrieved company goal assignments."""
type totara_hierarchy_company_goal_assignment_result implements core_pageable_result {
  """Retrieved company goal assignments"""
  items: [totara_hierarchy_company_goal_assignment!]!

  """Total number of company goal assignments retrieved across all pages"""
  total: Int!

  """Pointer to next page of company goal assignments"""
  next_cursor: String!
}

type totara_hierarchy_company_goal_framework implements totara_hierarchy_framework {
  id: core_id!
  fullname(format: core_format = PLAIN): String!
  idnumber: String
  shortname(format: core_format = PLAIN): String
  description(format: core_format = HTML): String
}

type totara_hierarchy_company_goal_frameworks_result {
  items: [totara_hierarchy_company_goal_framework!]!
}

"""Goal type"""
type totara_hierarchy_company_goal_type implements totara_hierarchy_type {
  id: core_id!
  fullname(format: core_format = PLAIN): String!
  idnumber: String
  shortname(format: core_format = PLAIN): String
  description(format: core_format = HTML): String
}

type totara_hierarchy_company_goal_types_result {
  items: [totara_hierarchy_company_goal_type!]!
}

"""Details of a competency"""
type totara_hierarchy_competency {
  """Unique competency identifier"""
  id: core_id!

  """Competency name"""
  name(format: core_format = PLAIN): String!

  """achievement path"""
  achievement_path: [totara_hierarchy_competency_achievement_path!]!

  """parents items"""
  parents: [totara_hierarchy_competency!]!

  """return if this competency have child"""
  has_children: Boolean!
}

"""achievent path data type"""
type totara_hierarchy_competency_achievement_path {
  id: core_id
  type(format: core_format = PLAIN): String
  name(format: core_format = PLAIN): String
  instance_id: core_id
}

"""Parameters to filter a set of retrieved competencies."""
input totara_hierarchy_competency_filter {
  """Competency ids to look up"""
  ids: [param_integer]

  """Competency ids to be excluded"""
  excluded_ids: [param_integer]

  """Competency name to look up"""
  name: param_text

  """Competency framework are to be retrieved"""
  framework_id: param_integer

  """Without achievement paths"""
  no_path: param_boolean

  """no hierarchy"""
  no_hierarchy: param_boolean

  """parent id"""
  parent_id: param_integer
}

"""Parameters to retrieve a set of competencies."""
input totara_hierarchy_competency_input {
  """Filter values"""
  filters: totara_hierarchy_competency_filter

  """Attribute on which to sort retrieved competencies"""
  order_by: totara_hierarchy_competency_order_field

  """
  Whether to sort retrieved competencies in ascending or descending order.
  """
  order_dir: totara_hierarchy_competency_order_dir

  """Pagination"""
  pagination: totara_hierarchy_competency_pagination
}

"""Retrieved data sort order"""
enum totara_hierarchy_competency_order_dir {
  ASC
  DESC
}

"""Field on which to sort retrieved competency assignments."""
enum totara_hierarchy_competency_order_field {
  COMPETENCY_NAME
  HIERARCHY
  ACHIEVEMENT_PATH
}

"""Pagination"""
input totara_hierarchy_competency_pagination {
  """Number of competencies to retrieve at a time"""
  limit: param_integer

  """Pointer to next page of competencies"""
  cursor: String

  """Page number - only used by offset-based cursors"""
  page: param_integer
}

"""Paginator holding a set of retrieved competencies."""
type totara_hierarchy_competency_result implements core_pageable_result {
  """Retrieved competencies"""
  items: [totara_hierarchy_competency!]!

  """parents of given id"""
  parents: [totara_hierarchy_competency]

  """current competency"""
  current_level: totara_hierarchy_competency

  """Total number of competencies retrieved across all pages"""
  total: Int!

  """Pointer to next page of competencies"""
  next_cursor: String!
}

"""
Hierarchy framework interface. Defines standard fields available in all hierarchy frameworks. A framework is a collection
of hierarchy items arranged in a tree.
"""
interface totara_hierarchy_framework {
  """Internal database id of the framework."""
  id: core_id!

  """Full name of the framework."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the framework across multiple systems.
  """
  idnumber: String

  """
  The short name of the framework. Only used as additional information if admin
  setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the framework."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String
}

"""Indicates how a goal was assigned to a user"""
type totara_hierarchy_goal_assignment_type {
  """Assignment type name."""
  name: String!

  """Assignment type value."""
  value: Int!

  """Assignment type display label."""
  label(format: core_format = PLAIN): String!
}

"""
Extends totara_hierarchy_goal_assignment_type to include details of the group or
person that assigned a goal to a user
"""
type totara_hierarchy_goal_assignment_type_extended {
  """Raw assignment type"""
  type: totara_hierarchy_goal_assignment_type!

  """Assignment description"""
  description(format: core_format = PLAIN): String!
}

"""Parameters to retrieve a set of goal assignment types."""
input totara_hierarchy_goal_assignment_types_input {
  """
  Indicates whether to retrieve company or personal goal assignment types
  """
  scope: totara_hierarchy_goal_scope
}

"""Personal goal type"""
input totara_hierarchy_goal_filter_input {
  check_goal_exist: param_boolean
}

"""Retrieved data sort order"""
enum totara_hierarchy_goal_order_dir {
  ASC
  DESC
}

"""Describes a goal scale value."""
type totara_hierarchy_goal_scale_value {
  """Scale value id"""
  id: core_id!

  """Scale value name"""
  name(format: core_format = PLAIN): String!
}

"""
Goal "class"
"""
enum totara_hierarchy_goal_scope {
  COMPANY
  PERSONAL
}

"""
Hierarchy item interface. Defines standard fields available in all hierarchy items. A hierarchy item is a single node
in a tree-like hierarchy of items.
"""
interface totara_hierarchy_item {
  """Internal database id of the hierarchy item."""
  id: core_id!

  """Full name of the hierarchy item."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the hierarchy item across multiple systems.
  """
  idnumber: String

  """
  The short name of the hierarchy item. Only used as additional information if
  admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the hierarchy item."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String

  """
  The internal database id of the hierarchy framework this item belongs to.
  """
  frameworkid: core_id

  """The hierarchy framework this item belongs to."""
  framework: totara_hierarchy_framework

  """
  An ordered list of parent database ids for this hierarchy item, indicating the hierarchy of parent items. Includes the
  current item and separated by forward slashes, e.g. item with id=6 might be: /1/4/6
  This is a computed value.
  """
  path: String!

  """
  Flag determining whether the hierarchy item is visible to end users or not.
  """
  visible: Boolean!

  """
  The id of this hierarchy item's immediate parent in the framework hierarchy. Set to 0 if this is a top-level item.
  """
  parentid: core_id

  """The parent item in the hierarchy. Null if a top-level item."""
  parent: totara_hierarchy_item

  """
  Collection of hierarchy items that are immediately below this one in the framework hierarchy. Empty if this item
  has no children.
  """
  children: [totara_hierarchy_item!]!

  """The id of the hierarchy item type, or 0 if this is a generic item."""
  typeid: core_id

  """Hierarchy item type object."""
  type: totara_hierarchy_type
}

"""Order direction options"""
enum totara_hierarchy_order_dir {
  ASC
  DESC
}

"""
Organisation item object.

The organisation structure defines the regions, departments, groups, areas, or teams that a company has defined.
"""
type totara_hierarchy_organisation implements totara_hierarchy_item {
  """Internal database id of the organisation."""
  id: core_id!

  """Full name of the organisation."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the organisation across multiple systems.
  """
  idnumber: String

  """
  The short name of the organisation. Only used as additional information if
  admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the organisation."""
  description(
    """
    Output format this field should be formatted for.
    Please note: RAW format is only available to users with the capability 'totara/hierarchy:updateorganisation' in the
    system context, as its purpose is for editing.
    """
    format: core_format = HTML
  ): String

  """
  The internal database id of the organisation framework this organisation belongs to.
  """
  frameworkid: core_id

  """The organisation framework this organisation belongs to."""
  framework: totara_hierarchy_organisation_framework

  """
  An ordered list of parent database ids for this organisation, indicating the hierarchy of parent items. Includes the
  current item and separated by forward slashes, e.g. item with id=6 might be: /1/4/6
  This is a computed value.
  """
  path: String!

  """
  Flag determining whether the organisation is visible to end users or not.
  """
  visible: Boolean!

  """
  The id of this organisation's immediate parent in the framework hierarchy. Set to 0 if this is a top-level organisation.
  """
  parentid: core_id

  """The parent organisation in the hierarchy. Null if a top-level item."""
  parent: totara_hierarchy_organisation

  """
  Collection of organisations that are immediately below this one in the framework hierarchy. Empty if this organisation
  has no children.
  """
  children: [totara_hierarchy_organisation!]!

  """
  The id of the organisation type, or 0 if this is a generic organisation.
  """
  typeid: core_id

  """Organisation type object."""
  type: totara_hierarchy_organisation_type
}

"""
Organisation filter

Properties to filter out organisations.
"""
input totara_hierarchy_organisation_filter {
  framework_id: param_integer
  parent_id: param_integer
  ids: [param_integer!]
  name: param_text
  type_id: param_integer
}

"""
Organisation framework object. An organisation framework is a collection of organisations arranged in a tree.
"""
type totara_hierarchy_organisation_framework implements totara_hierarchy_framework {
  """Internal database id of the organisation framework."""
  id: core_id!

  """Full name of the organisation framework."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the organisation framework across multiple systems.
  """
  idnumber: String

  """
  Short name of the organisation framework, only used if admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the organisation framework."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String
}

"""
Input type for organisation query conditions.

Properties to control the order and amount of the requested organisations.
"""
input totara_hierarchy_organisation_query {
  filters: totara_hierarchy_organisation_filter
  order_by: String
  order_dir: totara_hierarchy_order_dir
  result_size: param_integer
  cursor: String
}

"""
Input for identifying an organisation.

The organisation must be identified by providing one of the following:

* The organisation's internal database id
* The organisation's idnumber

An organisation reference must uniquely identify a single organisation to be valid.
"""
input totara_hierarchy_organisation_reference {
  """Identify an organisation by internal database id."""
  id: core_id

  """
  Identify an organisation by its idnumber. idnumber is a unique reference used
  to represent the organisation across multiple systems.
  """
  idnumber: String
}

"""
Organisation result

Result type for a collection of organisations.
"""
type totara_hierarchy_organisation_result implements core_pageable_result {
  items: [totara_hierarchy_organisation!]!
  total: Int!
  next_cursor: String!
}

"""
Organisation type object. An organisation type is a user-defined classification which can be assigned to organisations
leading to certain custom fields being available on that organisation.
"""
type totara_hierarchy_organisation_type implements totara_hierarchy_type {
  """Internal database id of the organisation type."""
  id: core_id!

  """Organisation type full name."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the organisation type across multiple systems.
  """
  idnumber: String

  """
  The short name of the organisation type. Only used as additional information
  if admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the organisation type."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String
}

"""Details of a personal goal"""
type totara_hierarchy_personal_goal {
  """Unique personal goal identifier"""
  id: core_id!

  """User to whom the personal goal was assigned"""
  user_id: core_id!

  """Personal goal name"""
  name(format: core_format = PLAIN): String!

  """Personal goal description if any"""
  description(format: core_format = HTML): String

  """
  Indicates how a personal goal was assigned to the user, e.g. self, manager, etc.
  """
  assignment_type: totara_hierarchy_goal_assignment_type_extended!

  """Goal completion target date if any."""
  target_date(format: core_date_format = DATE): core_date

  """Goal status."""
  scale_value: totara_hierarchy_goal_scale_value

  """Goal scope."""
  goal_scope: totara_hierarchy_goal_scope!

  """Goal type name"""
  type_name(format: core_format = HTML): String
}

"""Parameters to filter a set of retrieved personal goals."""
input totara_hierarchy_personal_goal_filter {
  """Personal goal ids to look up"""
  ids: [param_integer]

  """Personal goal name to look up"""
  name: param_text

  """
  Personal goal assignment type to match. NB this must be the name of a personal
  goal assignment type - see the personal_goal_assignment_type class
  """
  assignment_type: param_text

  """User whose personal goals are to be retrieved"""
  user_id: param_integer

  """personal goal type to look up"""
  type_id: param_integer
}

"""Parameters to retrieve a set of personal goals."""
input totara_hierarchy_personal_goal_input {
  """Filter values"""
  filters: totara_hierarchy_personal_goal_filter

  """Attribute on which to sort retrieved personal goals"""
  order_by: totara_hierarchy_personal_goal_order_field

  """
  Whether to sort retrieved personal goals in ascending or descending order.
  """
  order_dir: totara_hierarchy_goal_order_dir

  """No of personal goals to retrieve at a time"""
  result_size: param_integer

  """Pointer to next page of personal goals"""
  cursor: String
}

"""Field on which to sort retrieved personal goal assignments."""
enum totara_hierarchy_personal_goal_order_field {
  ASSIGNMENT_TYPE
  GOAL_ID
  GOAL_NAME
  TARGET_DATE
}

"""Paginator holding a set of retrieved personal goals."""
type totara_hierarchy_personal_goal_result implements core_pageable_result {
  """Retrieved personal goals"""
  items: [totara_hierarchy_personal_goal!]!

  """Total number of personal goals retrieved across all pages"""
  total: Int!

  """Pointer to next page of personal goals"""
  next_cursor: String!
}

type totara_hierarchy_personal_goal_type implements totara_hierarchy_type {
  id: core_id!
  fullname(format: core_format = PLAIN): String!
  idnumber: String
  shortname(format: core_format = PLAIN): String
  description(format: core_format = HTML): String
}

type totara_hierarchy_personal_goal_types_result {
  items: [totara_hierarchy_personal_goal_type!]!
}

"""
Position item object.

The position structure defines the job roles that a company has defined.
"""
type totara_hierarchy_position implements totara_hierarchy_item {
  """Internal database id of the position."""
  id: core_id!

  """Full name of the position."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the position across multiple systems.
  """
  idnumber: String

  """
  The short name of the position. Only used as additional information if admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the position."""
  description(
    """
    Output format this field should be formatted for.
    Please note: RAW format is only available to users with the capability 'totara/hierarchy:updateorganisation' in the
    system context, as its purpose is for editing.
    """
    format: core_format = HTML
  ): String

  """
  The internal database id of the position framework this position belongs to.
  """
  frameworkid: core_id

  """The position framework this position belongs to."""
  framework: totara_hierarchy_position_framework

  """
  An ordered list of parent database ids for this position, indicating the hierarchy of parent items. Includes the
  current item and separated by forward slashes, e.g. item with id=6 might be: /1/4/6
  This is a computed value.
  """
  path: String!

  """Flag determining whether the position is visible to users or not."""
  visible: Boolean!

  """
  The id of this position's immediate parent in the framework hierarchy. Set to 0 if this is a top-level position.
  """
  parentid: core_id

  """The parent position in the hierarchy. Null if a top-level item."""
  parent: totara_hierarchy_position

  """
  Collection of positions that are immediately below this one in the framework hierarchy. Empty if this position
  has no children.
  """
  children: [totara_hierarchy_position!]!

  """The id of the position type, or 0 if this is a generic position."""
  typeid: core_id

  """Position type object."""
  type: totara_hierarchy_position_type
}

"""
Position filter

Properties to filter out positions.
"""
input totara_hierarchy_position_filter {
  framework_id: param_integer
  parent_id: param_integer
  ids: [param_integer!]
  name: param_text
  type_id: param_integer
}

"""
Position framework object. A position framework is a collection of positions arranged in a tree.
"""
type totara_hierarchy_position_framework implements totara_hierarchy_framework {
  """Internal database id of the position framework."""
  id: core_id!

  """Full name of the position framework."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the position framework across multiple systems.
  """
  idnumber: String

  """
  Short name of the position framework, only used if admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the position framework."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String

  """Positions that belong to this position framework."""
  positions: [totara_hierarchy_position!]!
}

"""
Input type for position query conditions.

Properties to control the order and amount of the requested positions.
"""
input totara_hierarchy_position_query {
  filters: totara_hierarchy_position_filter
  order_by: String
  order_dir: totara_hierarchy_order_dir
  result_size: param_integer
  cursor: String
}

"""
Input for identifying a position.

The position must be identified by providing one of the following:

* The position's internal database id
* The position's idnumber

A position reference must uniquely identify a single position to be valid.
"""
input totara_hierarchy_position_reference {
  """Identify a position by internal database id."""
  id: core_id

  """
  Identify a position by its idnumber. idnumber is a unique reference used to
  represent the position across multiple systems.
  """
  idnumber: String
}

"""
Position result

Result type for a collection of positions.
"""
type totara_hierarchy_position_result implements core_pageable_result {
  items: [totara_hierarchy_position!]!
  total: Int!
  next_cursor: String!
}

"""
Position type object. A position type is a user-defined classification which can be assigned to positions
leading to certain custom fields being available on that position.
"""
type totara_hierarchy_position_type implements totara_hierarchy_type {
  """Internal database id of the position type."""
  id: core_id!

  """Position type full name."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """
  Unique reference used to represent the position type across multiple systems.
  """
  idnumber: String

  """
  The short name of the position type. Only used as additional information if
  admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the position type."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String
}

"""
Hierarchy type interface. Defines standard fields available in all hierarchy types.
A hierarchy type is a user-defined classification which can be assigned to hierarchy items
leading to certain custom fields being available on that item.
"""
interface totara_hierarchy_type {
  """Internal database id of the hierarchy type."""
  id: core_id!

  """Type full name."""
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String!

  """Unique reference used to represent the type across multiple systems."""
  idnumber: String

  """
  The short name of the type. Only used as additional information if admin setting 'showhierarchyshortnames' is enabled.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """Rich-text description of the type."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String
}

"""
Job assignment type

NOTE: for privacy reasons the query is responsible of filtering only job assignments that are allowed to be seen
"""
type totara_job_assignment {
  id: core_id!
  userid: core_id!
  user: core_user!
  fullname(format: core_format = PLAIN): String
  shortname(format: core_format = PLAIN): String
  idnumber: String!
  description(format: core_format = HTML): String
  startdate: core_date
  enddate: core_date
  positionid: core_id
  position: totara_hierarchy_position
  organisationid: core_id
  organisation: totara_hierarchy_organisation
  managerjaid: core_id
  managerja: totara_job_assignment
  tempmanagerjaid: core_id
  tempmanagerja: totara_job_assignment
  tempmanagerexpirydate(format: core_date_format = TIMESTAMP): core_date
  appraiserid: core_id
  appraiser: core_user
  staffcount: Int!
  tempstaffcount: Int!
}

"""Input data for creating a job assignment."""
input totara_job_create_job_assignment_input {
  """
  A unique reference used to represent the job assignment across multiple systems.
  If the reference value is not unique, this can be combined with the job_assignment id and user_id in queries to behave
  like a unique compound reference value in order to refer to a single job_assignment.
  """
  idnumber: String!

  """The full name of the job assignment."""
  fullname: String

  """The short name of the job assignment."""
  shortname: String

  """The user to create the job assignment for."""
  user: core_user_user_reference!

  """Date that the user started in this job assignment."""
  start_date: core_date

  """Date that the user ends in this job assignment."""
  end_date: core_date

  """Position (job role) that applies to this job assignment."""
  position: totara_hierarchy_position_reference

  """Organisation in which the user holds this job assignment."""
  organisation: totara_hierarchy_organisation_reference

  """Job assignment that defines the management relationship."""
  manager: totara_job_job_assignment_reference

  """Appraiser for this assignment."""
  appraiser: core_user_user_reference

  """Job assignment that defines the temporary management relationship."""
  temp_manager: totara_job_job_assignment_reference

  """Date the temporary manager assignment will expire."""
  temp_manager_expiry_date: core_date
}

"""
Mutation result type returned after creating a job assignment. Returns
information about the job assignment that was created.
"""
type totara_job_create_job_assignment_result {
  """The newly created job assignment."""
  job_assignment: totara_job_job_assignment!
}

"""Mutation result type returned after deletion of a job assignment."""
type totara_job_delete_job_assignment_result {
  """Database id of the job assignment."""
  job_assignment_id: core_id!
}

"""
Job assignment type object, containing information about an individual job assignment.
"""
type totara_job_job_assignment {
  """Internal database id of the job assignment."""
  id: core_id!

  """User id of the user the job assignment is associated with."""
  userid: core_id!

  """User record of the user the job assignment is associated with."""
  user: core_user!

  """
  The full name of the job assignment. Used when job assignment is displayed and for selecting job assignments in dialogs.
  """
  fullname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """
  The short name of the job assignment. Only used as additional information.
  """
  shortname(
    """Output format this field should be formatted for."""
    format: core_format = PLAIN
  ): String

  """
  Used when syncing job assignment data from external sources.
  Must be unique for each user (but two users could have the same job assignment idnumber).
  If the reference value is not unique, this can be combined with the job_assignment id and user_id in queries to behave
  like a unique compound reference value in order to refer to a single job_assignment.
  """
  idnumber: String!

  """Rich-text description of the job assignment."""
  description(
    """Output format this field should be formatted for."""
    format: core_format = HTML
  ): String

  """
  Date that the user started in this job assignment. This date can be used in dynamic audience rules.
  
  This date is not used by the system to determine if the job assignment is active.
  """
  startdate(
    """Output date format this field should be formatted using."""
    format: core_date_format = TIMESTAMP
  ): core_date

  """
  Date that the user ends in this job assignment. This date can be used in dynamic audience rules.
  
  This date is not used by the system to determine if the job assignment is active.
  """
  enddate(
    """Output date format this field should be formatted using."""
    format: core_date_format = TIMESTAMP
  ): core_date

  """Internal database id of the position for this assignment."""
  positionid: core_id

  """Position (job role) object for this job assignment."""
  position: totara_hierarchy_position

  """Internal database id of the organisation for this job assignment."""
  organisationid: core_id

  """Organisation object for this job assignment."""
  organisation: totara_hierarchy_organisation

  """Internal database id of the manager job assignment."""
  managerjaid: core_id

  """Job assignment object that defines the management relationship."""
  managerja: totara_job_job_assignment

  """
  Internal database id of the temporary manager job assignment.
  Temporary manager has the same rights as a normal manager, until the expiry date is reached.
  """
  tempmanagerjaid: core_id

  """
  Job assignment object that defines the temporary management relationship.
  """
  tempmanagerja: totara_job_job_assignment

  """Date the temporary manager assignment will expire."""
  tempmanagerexpirydate(
    """Output date format this field should be formatted using."""
    format: core_date_format = TIMESTAMP
  ): core_date

  """
  Internal database id of the user assigned as the appraiser for this job assignment.
  """
  appraiserid: core_id

  """Appraiser user object for this job assignment."""
  appraiser: core_user

  """
  Number of staff assigned to the user via this job assignment.
  E.g. the number of other job assignments which list this assignment as 'managerja'.
  """
  staffcount: Int!

  """
  Number of staff assigned to the user to temporarily manage via this job assignment.
  E.g. the number of other job assignments which list this assignment as 'tempmanagerja'.
  """
  tempstaffcount: Int!
}

"""
Input for identifying a job assignment.

The job assignment must be identified by providing one of the following:

* The job assignment's internal database id
* The job assignment's idnumber

A job assignment reference must uniquely identify a single job assignment record to be valid.
"""
input totara_job_job_assignment_reference {
  """Identify a job assignment by internal database id."""
  id: core_id

  """
  Identify a job assignment by its idnumber.
  
  Idnumber is a unique reference used to represent a job assignment across multiple systems.
  If the reference value is not unique, this can be combined with the job_assignment id and user_id in queries to behave
  like a unique compound reference value in order to refer to a single job_assignment.
  """
  idnumber: String

  """The user who has received the job_assignment."""
  user: core_user_user_reference
}

"""Information on paginating and sorting the results."""
input totara_job_job_assignments_query {
  """
  Pagination information such as which page to return and the number of results requested.
  """
  pagination: core_pagination_input

  """
  The sort order of the query.
  Allowed entity fields for the sort column are 'id', 'userid', 'shortname', 'startdate', 'endate', 'position',
  'organisation', 'managerjaid', 'tempmanagerjaid', 'tempmanagerexpirydate', 'appraiserid', 'staffcount', 'tempstaffcount'.
  """
  sort: [core_sort_input!]
}

"""
Result returned from the totara_job_job_assignments query. Contains a page of results along with pagination information.
"""
type totara_job_job_assignments_result implements core_pageable_result {
  """Array of one page of job_assignments returned by the query."""
  items: [totara_job_job_assignment]

  """Total number of job_assignments from this query (across all pages)."""
  total: Int!

  """Cursor to request the next set of results for this query."""
  next_cursor: String!
}

"""The input data for updating the job assignment."""
input totara_job_update_job_assignment_input {
  """
  Unique reference used to represent the job assignment across multiple systems.
  If the reference value is not unique, this can be combined with the job_assignment id and user_id in queries to behave
  like a unique compound reference value in order to refer to a single job_assignment.
  """
  idnumber: String

  """The full name of the job assignment."""
  fullname: String

  """The short name of the job assignment."""
  shortname: String

  """Date that the user started in this job assignment."""
  start_date: core_date

  """Date that the user ends in this job assignment."""
  end_date: core_date

  """Position (job role) for the user."""
  position: totara_hierarchy_position_reference

  """Organisation in which the user works."""
  organisation: totara_hierarchy_organisation_reference

  """Job assignment that defines the management relationship."""
  manager: totara_job_job_assignment_reference

  """Appraiser for this assignment."""
  appraiser: core_user_user_reference

  """Job assignment that defines the temporary management relationship."""
  temp_manager: totara_job_job_assignment_reference

  """Date the temporary manager assignment will expire."""
  temp_manager_expiry_date: core_date
}

"""
Mutation result type returned after updating a job assignment. Returns the job assignment that was updated.
"""
type totara_job_update_job_assignment_result {
  """The updated job assignment."""
  job_assignment: totara_job_job_assignment!
}

"""Certification item for mobile app."""
type totara_mobile_certification {
  """Program ID of the certification"""
  id: core_id!

  """Certification ID of the certification"""
  certifid: core_id!

  """Certification fullname"""
  fullname(format: core_format = PLAIN): String!

  """Certification shortname"""
  shortname(format: core_format = PLAIN): String!

  """Certification idnumber"""
  idnumber: String

  """Certification summary"""
  summary(format: core_format = MOBILE): String

  """The format of the Certification summary"""
  summaryformat: core_format

  """Certification endnnote to be displayed on completion"""
  endnote(format: core_format = MOBILE): String

  """The format of the Certification endnote"""
  endnoteformat: core_format

  """The date the current user is due in the Certification"""
  duedate(format: core_date_format = TIMESTAMP): core_date

  """The state of the duedate"""
  duedate_state(format: core_format = PLAIN): String

  """The date/time the Certification is available from"""
  availablefrom(format: core_date_format = TIMESTAMP): core_date

  """The date/time the Certification is available until"""
  availableuntil(format: core_date_format = TIMESTAMP): core_date

  """The category this Certification is in"""
  category: core_category

  """
  All of the coursesets in a Certification without any additional formatting.
  """
  coursesets: [totara_mobile_program_courseset]

  """
  The coursesets of the Certification limited to the current courseset group for the viewing user.
  """
  current_coursesets: [[totara_mobile_program_courseset]]

  """
  A count of the coursesets after the current courseset group (split by a THEN condition)
  """
  count_unavailablesets: Int

  """
  A count of the coursesets in all the certifications completed courseset groups that a user did not have to complete.
  """
  count_optionalsets: Int

  """
  A count of the coursesets in all the certifications completed courseset groups that a user completed.
  """
  count_completedsets: Int

  """
  The header of the current courseset, combining count_optionalsets and count_completed steps into a string.
  """
  courseset_header: String

  """Current users completion information within the Certification"""
  completion: totara_certification_completion

  """
  A URL for the Certification image, but only if it isn't a default image
  """
  mobile_image: String
}

"""Course information for mobile app."""
type totara_mobile_course {
  course(courseid: core_id!): core_course

  """
  Grade max information pre-formatted by grade settings and handed through as string for display
  as specified by the grade_decimalpoints setting
  """
  formatted_grademax: String

  """
  Grade final information pre-formatted by grade settings and handed through as string for display
  as specified by the grade_decimalpoints setting
  """
  formatted_gradefinal: String

  """Flag indicating whether item is suitable for native mobile display"""
  mobile_coursecompat: Boolean

  """A URL for the course image, but only if it isn't a default image"""
  mobile_image: String
}

"""Type describing mobile app user"""
type totara_mobile_me {
  user: totara_mobile_user!
  system: totara_mobile_system!
}

"""Program item for mobile app."""
type totara_mobile_program {
  """ID of the program"""
  id: core_id!

  """Program fullname"""
  fullname(format: core_format = PLAIN): String!

  """Program shortname"""
  shortname(format: core_format = PLAIN): String!

  """Program idnumber"""
  idnumber: String

  """Program summary"""
  summary(format: core_format = MOBILE): String

  """The format of the program summary"""
  summaryformat: core_format

  """Program endnnote to be displayed on completion"""
  endnote(format: core_format = MOBILE): String

  """The format of the Certification endnote"""
  endnoteformat: core_format

  """The date the current user is due in the program"""
  duedate(format: core_date_format = TIMESTAMP): core_date

  """The state of the duedate"""
  duedate_state(format: core_format = PLAIN): String

  """The date/time the program is available from"""
  availablefrom(format: core_date_format = TIMESTAMP): core_date

  """The date/time the program is available until"""
  availableuntil(format: core_date_format = TIMESTAMP): core_date

  """The category this program is in"""
  category: core_category

  """All of the coursesets in a program without additional formatting."""
  coursesets: [totara_mobile_program_courseset]

  """
  The coursesets of the program limited to the current courseset group for the viewing user.
  """
  current_coursesets: [[totara_mobile_program_courseset]]

  """
  A count of the coursesets after the current courseset group (split by a THEN condition)
  """
  count_unavailablesets: Int

  """
  A count of the coursesets in all the certifications completed courseset groups that a user did not have to complete.
  """
  count_optionalsets: Int

  """
  A count of the coursesets in all the certifications completed courseset groups that a user completed.
  """
  count_completedsets: Int

  """
  The header of the current courseset, combining count_optionalsets and count_completed steps into a string.
  """
  courseset_header: String

  """Current users completion information within the program"""
  completion: totara_program_completion

  """A URL for the Program image, but only if it isn't a default image"""
  mobile_image: String
}

"""Course content type returned as a current learning item"""
type totara_mobile_program_content {
  """
  ID of the learning item
  NOTE: This can not use the core_id type because we are adding the type to ensure uniqueness.
  """
  id: String!

  """
  Type of the learning item
  (course, program, certification)
  """
  itemtype: String!

  """
  Component of the learning item
  (core_course, totara_program, totara_certification)
  """
  itemcomponent: String!

  """Learning item shortname"""
  shortname(format: core_format = PLAIN): String!

  """Learning item fullname"""
  fullname(format: core_format = PLAIN): String!

  """Learning item description"""
  description(format: core_format = MOBILE): String

  """The format of the learning item description"""
  description_format: core_format

  """
  Learning item progress, a percentage of how far
  through the item the user viewing it is.
  """
  progress: Float

  """Learning item URL, a link to view the learning item"""
  url_view: String!

  """
  Learning item duedate, the date the learning item
  is due for the viewing user.
  """
  duedate(format: core_date_format = TIMESTAMP): core_date

  """
  Learning item duedate status, as computed by server. One of
  "info", "warning", "danger", or "overdue".
  """
  duedate_state(format: core_format = PLAIN): String

  """Flag indicating whether item is suitable for native mobile display"""
  mobile_coursecompat: Boolean

  """A URL for the course image, but only if it isn't a default image"""
  mobile_image: String

  """Is item viewable"""
  viewable: Boolean
}

"""
Program courseset information for mobile programs
Note: This differs slightly from core program coursesets for ease of use.
"""
type totara_mobile_program_courseset {
  """The database id of the courseset"""
  id: core_id!

  """The name of the courseset"""
  label(format: core_format = PLAIN): String!

  """
  An array of learning items (course type only) contained within the program
  """
  courses: [totara_mobile_program_content]

  """
  A string "then", "and", "or", describing the relation of the current courseset with the next one
  """
  nextsetoperator: totara_program_nextset

  """A string describing the criteria for completion of the courseset"""
  criteria: [String!]!

  """
  The string status of the current user within the program
  possible values: incomplete, complete
  """
  statuskey: String
}

"""Some basic information on mobile subplugins"""
type totara_mobile_subplugin {
  name: String
  version: String
}

"""Totara system information for mobile apps."""
type totara_mobile_system {
  wwwroot: String!
  apiurl: String!
  release: String!
  request_policy_agreement: Boolean!
  request_user_consent: Boolean!
  request_user_fields: Boolean!
  password_change_required: Boolean!

  """
  Determines whether the user has permissions to view their own profile or not
  """
  view_own_profile: Boolean!
  mobile_subplugins: [totara_mobile_subplugin]!
}

"""User information for mobile app."""
type totara_mobile_user {
  """The user's base id"""
  id: core_id!

  """The user's idnumber"""
  idnumber: String

  """The user's username"""
  username(format: core_format = PLAIN): String

  """The user's fullname, as defined in user policies"""
  fullname(format: core_format = PLAIN): String!

  """The user's first name"""
  firstname(format: core_format = PLAIN): String

  """The user's last name"""
  lastname(format: core_format = PLAIN): String

  """The user's middle name"""
  middlename(format: core_format = PLAIN): String

  """The user's alternate name"""
  alternatename(format: core_format = PLAIN): String

  """The user's email"""
  email: String

  """The user's address"""
  address(format: core_format = PLAIN): String

  """The user's first phone number"""
  phone1(format: core_format = PLAIN): String

  """The user's secondary phone number"""
  phone2(format: core_format = PLAIN): String

  """The user's department"""
  department(format: core_format = PLAIN): String

  """The user's institution"""
  institution(format: core_format = PLAIN): String

  """The user's city"""
  city(format: core_format = PLAIN): String

  """The user's country"""
  country: String

  """The user's description"""
  description(format: core_format = HTML): String

  """The format of the user's description"""
  descriptionformat: core_format

  """The url for the user's profile image"""
  profileimageurl: String

  """The url for the user's profile image (small)"""
  profileimageurlsmall: String

  """The url for the user's profile image (alt)"""
  profileimagealt(format: core_format = PLAIN): String

  """The user's language"""
  lang: String

  """The user's theme"""
  theme: String

  """Whether the user is currently suspended from the system"""
  suspended: Boolean

  """The user's timezone"""
  timezone: String

  """The user's URL field"""
  url(format: core_format = PLAIN): String

  """The user's skype"""
  skype(format: core_format = PLAIN): String
}

input totara_notification_create_notification_preference_v2_input {
  """
  The event resolver's name that this notification preference is
  set for MUST be provided.
  """
  resolver_class_name: param_text!

  """
  Extended context MUST be provided, in order to create the notification preference
  within that context. Note that the context's id for this extended_context can be fallback
  to the context system if none is provided.
  """
  extended_context: totara_notification_extended_context_input!

  """
  If ancestor_id is provided, then we would know that this notification preference
  is overriding one of the notification preference at under context.
  """
  ancestor_id: param_integer
  title: String
  additional_criteria: String
  body: String
  body_format: param_integer
  subject: String
  schedule_offset: param_integer
  schedule_type: param_text
  subject_format: param_integer
  enabled: param_boolean

  """
  The class_names of recipients for the custom notification. Able to be set to
  null, ONLY if this very notification preference can fallback to the parent, or
  the system built in notification that has a default value.
  """
  recipients: [param_text!]

  """
  An array of delivery channel's identifier names. It is optional to be provided.
  """
  forced_delivery_channels: [param_text!]
}

"""A single instance of a delivery channel"""
type totara_notification_delivery_channel {
  """Message component of this delivery channel."""
  component: String!

  """The human-readable lable"""
  label: String!

  """Whether this channel is checked/in use or not"""
  is_enabled: Boolean!

  """
  If true, this channel is considered a child of another channel (and must have that enabled)
  """
  is_sub_delivery_channel: Boolean!

  """The specific component of the parent delivery channel"""
  parent_component: String

  """Order for display purposes"""
  display_order: Int!
}

type totara_notification_event_resolver {
  """The component name where this notifiable event belongs to."""
  component: String!

  """The human readerable name of the component"""
  plugin_name: String!

  """The class name of notifiable event."""
  class_name: String!

  """The human readable notifiable event name."""
  name: String!

  """Allowed user interaction with the resolver"""
  interactor(
    """Extended context input must be provided."""
    extended_context: totara_notification_extended_context_input!
  ): totara_notification_interactor!

  """Collection of schedule types valid for this type of notifiable event."""
  valid_schedules: [totara_notification_schedule_type!]!

  """The recipients for notifiable event name."""
  recipients: [totara_notification_recipient!]!

  """Return the enabled status of the notifiable event."""
  status(extended_context: totara_notification_extended_context_input): totara_notification_notifiable_event_status!

  """
  Returning all the notification preferences that are associated with this very notifiable event.
  """
  notification_preferences(
    """Extended context input must be provided."""
    extended_context: totara_notification_extended_context_input!
  ): [totara_notification_notification_preference!]!

  """The default delivery channels for this resolver."""
  default_delivery_channels: [totara_notification_delivery_channel!]!

  """
  The tui component containing additional resolver-specific form elements required to configure the notification.
  """
  additional_criteria_component: String

  """
  Warnings about using this resolver, such as when the notification will not be sent due to some confiuration
  in the current context.
  """
  warnings: [String!]!
}

type totara_notification_event_resolver_v2 {
  """The component name where this notifiable event belongs to."""
  component: String!

  """The human readerable name of the component"""
  plugin_name: String!

  """The class name of notifiable event."""
  class_name: String!

  """The human readable notifiable event name."""
  name: String!

  """Allowed user interaction with the resolver"""
  interactor(
    """Extended context input must be provided."""
    extended_context: totara_notification_extended_context_input!
  ): totara_notification_interactor!

  """Collection of schedule types valid for this type of notifiable event."""
  valid_schedules: [totara_notification_schedule_type!]!

  """The recipients for notifiable event name."""
  recipients: [totara_notification_recipient!]!

  """Return the enabled status of the notifiable event."""
  status(extended_context: totara_notification_extended_context_input): totara_notification_notifiable_event_status!

  """
  Returning all the notification preferences that are associated with this very notifiable event.
  """
  notification_preferences(
    """Extended context input must be provided."""
    extended_context: totara_notification_extended_context_input!
  ): [totara_notification_notification_preference_v2!]!

  """The default delivery channels for this resolver."""
  default_delivery_channels: [totara_notification_delivery_channel!]!

  """
  The tui component containing additional resolver-specific form elements required to configure the notification.
  """
  additional_criteria_component: String

  """
  Warnings about using this resolver, such as when the notification will not be sent due to some confiuration
  in the current context.
  """
  warnings: [String!]!
}

"""A type to hold extended context."""
type totara_notification_extended_context {
  """The context ID of the notification."""
  context_id: Int!

  """In a non-natural context, the component to which the context relates"""
  component: String!

  """The area of component"""
  area: String!

  """The item id of the instance within area of component."""
  item_id: Int!
}

"""
An input type to pass down the extended context which can be reused in queries or mutations.
"""
input totara_notification_extended_context_input {
  """
  The context ID of the notification. Which it SHOULD always required.
  However, if it is left empty, system is falling back to the context system.
  """
  context_id: param_integer

  """In a non-natural context, the component to which the context relates"""
  component: param_component

  """The area of component"""
  area: param_area

  """The item id of the instance within area of component."""
  item_id: param_integer
}

type totara_notification_interactor {
  """Can the user manage notifications preferences"""
  can_manage: Boolean!

  """Can the user audit notifications"""
  can_audit: Boolean!
}

type totara_notification_notifiable_event_status {
  is_enabled: Boolean!
}

"""User notifiable event preference"""
type totara_notification_notifiable_event_user_preference {
  """ID of the user this preference belongs to"""
  user_id: core_id!

  """The component name where this notifiable event belongs to."""
  component: String!

  """The human readerable name of the component"""
  plugin_name: String!

  """The class name of resolver class"""
  resolver_class_name: String!

  """The human readable notifiable event name."""
  name: String!

  """Is the notification enabled for this user"""
  enabled: Boolean!

  """ID of the user preference record if it already exists"""
  user_preference_id: core_id

  """The delivery channels for this preference."""
  delivery_channels: [totara_notification_delivery_channel!]!

  """
  If true the user has opted to override the delivery channels for this channel.
  """
  overridden_delivery_channels: Boolean!
}

type totara_notification_notification_preference {
  """
  Id cannot be null here, because Apollo is specifically using this field along side
  with the field __typename to cache the record.
  The field 'id' here will prefer to the table's id. If you want to know whether the record
  is existing at the specific context that is provided, then please use the field 'context_identifier'
  """
  id: Int!
  title: String!

  """Whether the field 'additional_criteria' is overridden"""
  overridden_additional_criteria: Boolean!

  """
  The additional resolver-specific criteria, json encoded, configured for the notification.
  """
  additional_criteria: String
  subject(format: core_format = RAW): String!
  subject_format: Int!
  body(format: core_format = RAW): String!
  body_format: Int!

  """Whether the field 'body' is overridden"""
  overridden_body: Boolean!

  """Whether the field 'subject' is overridden"""
  overridden_subject: Boolean!

  """Whether the field 'recipient' is overridden"""
  overridden_recipient: Boolean!

  """The event resolver."""
  resolver: totara_notification_event_resolver!

  """Human readable event resolver's name."""
  resolver_name: String!

  """
  The class name of notifiable event resolver which this notification is created for.
  """
  resolver_class_name: String!

  """
  The ancestor of this very notification's preference.
  If the value of this field is null, meaning that the notification is sitting
  at the top level of the system.
  """
  ancestor_id: Int

  """
  The comment that this notification is sitting in. Mainly it will be
  computed from the notifiable event that the notification is for.
  """
  resolver_component: String!

  """
  The plugin name that the resolver uses. Can be different from the component.
  """
  resolver_plugin_name: String!

  """Whether this notification preference is a custom notification or not."""
  is_custom: Boolean!

  """
  Whether this notification preference has a parent or not.
  NULL if this notification preference does not have a parent within
  the system. Otherwise its own parent's id, or its ancestor's id.
  """
  parent_id: Int

  """An attribute that holds the content value fields of its own parent."""
  parent_value: totara_notification_notification_preference_value

  """
  Number of days before/after/on the event the schedule should be adjusted for.
  Always a positive number, meaning is derived from the schedule_type field.
  """
  schedule_offset(unit: totara_notification_schedule_offset_unit!): Int!

  """The type of schedule that's in play."""
  schedule_type: totara_notification_schedule_type!

  """
  Whether the fields 'schedule_offset' or 'schedule_type' are overridden.
  These fields work in a pair so either both are overridden or neither are.
  """
  overridden_schedule: Boolean!

  """Human readable label of the active schedule_type."""
  schedule_label: String

  """The recipient details of the notification."""
  recipient: totara_notification_recipient! @deprecated(reason: "Use `recipients` instead")

  """The extended context of the notification."""
  extended_context: totara_notification_extended_context!

  """The enabled status of the notification."""
  enabled: Boolean

  """Whether the field 'enabled' is overridden"""
  overridden_enabled: Boolean!

  """
  The list of delivery channels that are forced for this notification preference.
  For now we are using identifier of the channel.
  """
  forced_delivery_channels: [String!]!

  """Whether the field forced_delivery_channels are overridden or not."""
  overridden_forced_delivery_channels: Boolean!

  """The recipients details of the notification."""
  recipients: [totara_notification_recipient!]!
}

type totara_notification_notification_preference_v2 {
  """
  Id cannot be null here, because Apollo is specifically using this field along side
  with the field __typename to cache the record.
  The field 'id' here will prefer to the table's id. If you want to know whether the record
  is existing at the specific context that is provided, then please use the field 'context_identifier'
  """
  id: Int!
  title: String!

  """Whether the field 'additional_criteria' is overridden"""
  overridden_additional_criteria: Boolean!

  """
  The additional resolver-specific criteria, json encoded, configured for the notification.
  """
  additional_criteria: String
  subject(format: core_format = RAW): String!
  subject_format: Int!
  body(format: core_format = RAW): String!
  body_format: Int!

  """Whether the field 'body' is overridden"""
  overridden_body: Boolean!

  """Whether the field 'subject' is overridden"""
  overridden_subject: Boolean!

  """Whether the field 'recipient' is overridden"""
  overridden_recipient: Boolean!

  """The event resolver."""
  resolver: totara_notification_event_resolver!

  """Human readable event resolver's name."""
  resolver_name: String!

  """
  The class name of notifiable event resolver which this notification is created for.
  """
  resolver_class_name: String!

  """
  The ancestor of this very notification's preference.
  If the value of this field is null, meaning that the notification is sitting
  at the top level of the system.
  """
  ancestor_id: Int

  """
  The comment that this notification is sitting in. Mainly it will be
  computed from the notifiable event that the notification is for.
  """
  resolver_component: String!

  """
  The plugin name that the resolver uses. Can be different from the component.
  """
  resolver_plugin_name: String!

  """Whether this notification preference is a custom notification or not."""
  is_custom: Boolean!

  """
  Whether this notification preference has a parent or not.
  NULL if this notification preference does not have a parent within
  the system. Otherwise its own parent's id, or its ancestor's id.
  """
  parent_id: Int

  """An attribute that holds the content value fields of its own parent."""
  parent_value: totara_notification_notification_preference_value

  """
  Number of days before/after/on the event the schedule should be adjusted for.
  Always a positive number, meaning is derived from the schedule_type field.
  """
  schedule_offset(unit: totara_notification_schedule_offset_unit!): Int!

  """The type of schedule that's in play."""
  schedule_type: totara_notification_schedule_type!

  """
  Whether the fields 'schedule_offset' or 'schedule_type' are overridden.
  These fields work in a pair so either both are overridden or neither are.
  """
  overridden_schedule: Boolean!

  """Human readable label of the active schedule_type."""
  schedule_label: String

  """The extended context of the notification."""
  extended_context: totara_notification_extended_context!

  """The enabled status of the notification."""
  enabled: Boolean

  """Whether the field 'enabled' is overridden"""
  overridden_enabled: Boolean!

  """
  The list of delivery channels that are forced for this notification preference.
  For now we are using identifier of the channel.
  """
  forced_delivery_channels: [String!]!

  """Whether the field forced_delivery_channels are overridden or not."""
  overridden_forced_delivery_channels: Boolean!

  """The recipients details of the notification."""
  recipients: [totara_notification_recipient!]!
}

"""A type to hold the result of data validation."""
type totara_notification_notification_preference_validation_result {
  field_name: String!
  error_message: String!
}

"""
A compact type to only store the content field's values.
For simplicity, no ID's will be included.

The purpose of this type is to allow notification_preference to have its
parent's content value fields in one place for quick reference.
"""
type totara_notification_notification_preference_value {
  body(format: core_format = RAW): String!
  body_format: Int!
  subject(format: core_format = RAW): String!
  subject_format: Int!
  title: String!
  additional_criteria: String
  schedule_offset(unit: totara_notification_schedule_offset_unit!): Int!
  schedule_type: totara_notification_schedule_type!
  recipient: totara_notification_recipient! @deprecated(reason: "Use `recipients` instead")
  enabled: Boolean
  forced_delivery_channels: [String!]!
  recipients: [totara_notification_recipient!]!
}

type totara_notification_recipient {
  """The class name of recipient"""
  class_name: String

  """The human readerable name of the recipient"""
  name: String
}

enum totara_notification_schedule_offset_unit {
  SECOND
  DAY
}

"""Represents the specific type of schedule."""
enum totara_notification_schedule_type {
  ON_EVENT
  BEFORE_EVENT
  AFTER_EVENT
}

input totara_notification_update_notification_preference_v2_input {
  id: param_integer!

  """
  Note that these fields bellow are able to set to null.
  Only if this very notification preference can fallback to the parent, or
  the system built in notification that has default values.
  """
  body: String
  body_format: param_integer
  title: String
  additional_criteria: String
  subject: String
  schedule_offset: param_integer
  schedule_type: param_text
  subject_format: param_integer
  recipients: [param_text]
  enabled: param_boolean
  forced_delivery_channels: [param_text!]
}

type totara_oauth2_client_provider {
  id: core_id!
  client_id: String!
  client_secret: String!
  name(format: core_format!): String!
  description(format: core_format!): String
  scope: String
  detail_scope: String
}

type totara_oauth2_client_provider_result {
  items: [totara_oauth2_client_provider!]!
}

input totara_oauth2_client_providers_filter {
  id: core_id
}

input totara_oauth2_client_providers_input {
  filters: totara_oauth2_client_providers_filter
}

"""Input of client provider creation"""
input totara_oauth2_provider_input {
  name: String!
  format: param_integer
  description: String
  scope_type: totara_oauth2_scope_type!
}

"""Emum of scope types that are supported by totara oauth2"""
enum totara_oauth2_scope_type {
  XAPI_WRITE
}

type totara_plan_learning_plan {
  id: core_id!
  can_view: Boolean!
  name(format: core_format = PLAIN): String
  description(format: core_format = HTML): String
}

"""For pagination the playlists collection."""
type totara_playlist_cursor {
  total: Int!

  """If next is null, then we are at the end of the list."""
  next: String
}

type totara_playlist_item_access_check_result {
  message: String!
  warning: Boolean!
}

type totara_playlist_playlist {
  id: core_id!
  name(format: core_format!): String!
  summary(format: core_format!): String
  summaryformat: Int!
  access: totara_engage_access!
  user: core_user!
  timedescription: String!
  contextid: core_id
  rating: totara_engage_rating!
  topics: [totara_topic_topic!]
  updateable: Boolean!
  contributable: Boolean!
  totalresources: Int!
  url(library_view: param_boolean!, source: String): String!
  owned: Boolean!
  sharedbycount: Int!
  bookmarked: Boolean!
  manageable: Boolean!

  """
  A flag to tell whether this playlist is containing a miss matched resources
  """
  hasnonpublicresources: Boolean!
}

"""Capabilities of the user interacting with the playlist."""
type totara_playlist_playlist_interactor {
  user_id: Int!
  can_bookmark: Boolean!
  can_comment: Boolean!
  can_rate: Boolean!
  can_react: Boolean!
  can_share: Boolean!
}

enum totara_playlist_playlist_sort {
  """Sort by rating"""
  RATING
}

enum totara_playlist_playlist_source {
  OWN
  BOOKMARKED
}

type totara_program_completion {
  """
  The id of the completion record for the current user within the program
  """
  id: core_id!

  """
  The integer status of the current user within the program
  possible values: 0, 1
  """
  status: Int

  """
  The string status of the current user within the program
  possible values: incomplete, complete
  """
  statuskey: String

  """The time the user completed the program"""
  timecompleted(format: core_date_format = TIMESTAMP): core_date

  """The progress (as a percentage) that the user has made in the program"""
  progress: Float
}

"""Expected/Allowable results for the courseset nextsetoperator field"""
enum totara_program_nextset {
  OR
  AND
  THEN
}

"""Program type"""
type totara_program_program {
  """ID of the program"""
  id: core_id!

  """Program fullname"""
  fullname(format: core_format = PLAIN): String!

  """Program shortname"""
  shortname(format: core_format = PLAIN): String!

  """Program idnumber"""
  idnumber: String

  """Program summary"""
  summary(format: core_format = HTML): String

  """The format of the program summary"""
  summaryformat: core_format

  """Program endnnote to be displayed on completion"""
  endnote(format: core_format = HTML): String

  """The date the current user is due in the program"""
  duedate(format: core_date_format = TIMESTAMP): core_date

  """The state of the duedate"""
  duedate_state(format: core_format = PLAIN): core_notification_state

  """The date/time the program is available from"""
  availablefrom(format: core_date_format = TIMESTAMP): core_date

  """The date/time the program is available until"""
  availableuntil(format: core_date_format = TIMESTAMP): core_date

  """The category this program is in"""
  category: core_category

  """Program content coursesets"""
  coursesets: [totara_program_program_courseset!]!

  """Current users completion information within the program"""
  completion: totara_program_completion
}

type totara_program_program_courseset {
  """ID of the courseset"""
  id: core_id!

  """Courseset label"""
  label(format: core_format = PLAIN): String

  """Courseset courses"""
  courses: [core_course]!
}

type totara_reaction_reaction {
  component: String!
  area: String!
  instanceid: Int!
  user: core_user!
  timecreated(format: core_date_format!): core_date!
}

"""Reportbuilder column type"""
type totara_reportbuilder_column {
  type: String!
  name: String!
}

"""Reportbuilder creation_source type"""
type totara_reportbuilder_creation_source {
  templates: [totara_reportbuilder_template!]!
  sources: [totara_reportbuilder_source!]!
  totalcount: String!
}

"""
User information.

NOTE: internal API for now, do not use outside of reportbuilder


Reportbuilder source type
"""
type totara_reportbuilder_source {
  key: String!
  fullname: String!
  label: String!
  summary: String!
  defaultcolumns: [totara_reportbuilder_column!]!
}

"""Reportbuilder template type"""
type totara_reportbuilder_template {
  key: String!
  fullname: String!
  summary: String!
  defaultcolumns: [totara_reportbuilder_column!]!
  graph: String!
  source: totara_reportbuilder_source!
  label: String!
}

type totara_reportedcontent_review {
  id: core_id!
  target_user: core_user!
  complainer: core_user!
  reviewer: core_user
  content(format: core_format! = HTML): String!
  url: String!
  approved: Boolean!
  removed: Boolean!
  status: Int
  time_created: Int!
  time_content: Int
  time_reviewed: Int @deprecated(reason: "Use `time_reviewed_description`.")
  time_reviewed_description(format: core_date_format!): String
  item_id: Int!
  context_id: Int!
  component: String!
  area: String!
}

type totara_reportedcontent_review_create_status {
  success: Boolean!
  id: core_id
}

"""
Input for identifying a tenant.

The tenant must be specified by providing one of the following:

* The tenant's internal database id
* The tenant's idnumber

A tenant reference must uniquely identify a single tenant to be valid.
"""
input totara_tenant_tenant_reference {
  """Identify a tenant by the internal database id of the tenant."""
  id: core_id

  """
  Identify a tenant by the idnumber of the tenant. This is a unique reference
  used to represent the tenant across multiple systems.
  """
  idnumber: String
}

type totara_topic_config {
  enabled: Boolean!
}

type totara_topic_topic {
  id: core_id!
  value(format: core_format!): String!
  catalog: String!
}

"""TUI resource bundle"""
type totara_tui_bundle {
  id: String!
  component: String!
  type: String!
  name: String!
  url: String!
}

"""A single user action instance."""
type totara_useraction_action {
  """The unique identifier for the action."""
  identifier: String!

  """The display name of the user action."""
  name: String!
}

"""
The applies to field can either be nothing, or  it can be a collection of audiences.
"""
union totara_useraction_filter_applies_to = totara_useraction_filters_applies_to_all_users | totara_useraction_filters_applies_to_audiences

"""Input for creating/updating the groups filter."""
input totara_useraction_filter_applies_to_input {
  """
  The audiences to map to. If all users, pass a NULL through, otherwise pass an array of audience Ids.
  """
  audiences: [core_id!]
}

"""
Duration is made up of three parts, this type keeps them all together.
"""
type totara_useraction_filter_duration {
  """The source column used by the duration filter."""
  source: totara_useraction_filter_duration_source!

  """What the value represents."""
  unit: totara_useraction_filter_duration_unit!

  """The value of the unit field, exactly as entered."""
  value: Int!
}

"""Input for a duration. All three fields must go together."""
input totara_useraction_filter_duration_input {
  """Source column of the duration."""
  source: totara_useraction_filter_duration_source!

  """Unit of the value."""
  unit: totara_useraction_filter_duration_unit!

  """
  The number of days/weeks/years for this filter.
  Must be a whole number, no negatives, no decimals.
  """
  value: Int!
}

"""Columns used in the filtering."""
enum totara_useraction_filter_duration_source {
  DATE_SUSPENDED
}

"""Time units used in durations."""
enum totara_useraction_filter_duration_unit {
  DAY
  MONTH
  YEAR
}

"""Options available for the status filter."""
enum totara_useraction_filter_status {
  SUSPENDED
  DELETED
}

"""Filter definitions for the scheduled rule."""
type totara_useraction_filters {
  """The status needed to run this rule."""
  user_status: totara_useraction_filter_status!

  """The duration fields needed for this rule."""
  duration: totara_useraction_filter_duration!

  """The audiences this rule is restricted to."""
  applies_to: totara_useraction_filter_applies_to!
}

"""Indicates there are no audiences involved"""
type totara_useraction_filters_applies_to_all_users {
  """The label or this specific applies_to filter."""
  label: String!
}

"""Collection of audiences this rule is mapped to."""
type totara_useraction_filters_applies_to_audiences {
  """The label for this specific applies_to filter."""
  label: String!

  """The audiences that have been mapped."""
  audiences: [core_cohort!]!
}

"""
A schedule rule is used to define specific user actions that occur based on a
specific time passing with additional user filters.
"""
type totara_useraction_scheduled_rule {
  """Internal database id of the user."""
  id: core_id!

  """
  Rules are either at the system level or within a tenant. If provided this
  identifies the tenant, otherwise it is a system client.
  """
  tenant_id: core_id

  """Name used to identify the scheduled rule."""
  name(format: core_string_format = HTML): String!

  """Description of the use of this scheduled rule."""
  description(format: core_text_format = HTML): String

  """The enabled status of the scheduled rule."""
  status: Boolean

  """The specific action instance."""
  action: totara_useraction_action!

  """The specific filters applied"""
  filters: totara_useraction_filters!

  """The date this scheduled rule was created."""
  created(format: core_date_format = TIMESTAMP): String!

  """The date this scheduled rule was last updated."""
  updated(format: core_date_format = TIMESTAMP): String
}

"""Input provided when creating a new scheduled rule."""
input totara_useraction_scheduled_rule_input {
  """Name used to identify the scheduled rule."""
  name: String!

  """Optional description to describe this scheduled rule."""
  description: String

  """
  If provided, this rule will belong to the specified tenant. If not provided, this rule belongs to the system context.
  """
  tenant_id: core_id

  """The enabled status of the scheduled rule. Defaults to disabled."""
  status: Boolean

  """The specific action identifier."""
  action: String!

  """The user_status filter."""
  filter_user_status: totara_useraction_filter_status!

  """The duration filter fields."""
  filter_duration: totara_useraction_filter_duration_input!

  """The groups filter."""
  filter_applies_to: totara_useraction_filter_applies_to_input!
}

"""Input provided when listing scheduled rules."""
input totara_useraction_scheduled_rules_input {
  """Pagination input"""
  pagination: core_pagination_input

  """
  If provided, load rules set in the tenant. Otherwise load rules at the system level.
  """
  tenant_id: core_id
}

"""Results of the scheduled rules query"""
type totara_useraction_scheduled_rules_result implements core_pageable_result {
  """List of scheduled rules"""
  items: [totara_useraction_scheduled_rule!]!

  """Total number of scheduled rules for this query."""
  total: Int!

  """Cursor to request the next batch of results for this query."""
  next_cursor: String!
}

"""
Input provided when updating a new scheduled rule.
Fields are only updated if provided.
"""
input totara_useraction_update_scheduled_rule_input {
  """Internal database id of the user."""
  id: core_id!

  """Name used to identify the scheduled rule."""
  name: String

  """Optional description to describe this scheduled rule."""
  description: String

  """The enabled status of the scheduled rule. Defaults to disabled."""
  status: Boolean

  """The specific action identifier."""
  action: String

  """The user_status filter."""
  filter_user_status: totara_useraction_filter_status

  """The duration filter fields."""
  filter_duration: totara_useraction_filter_duration_input

  """The groups filter."""
  filter_applies_to: totara_useraction_filter_applies_to_input
}

"""
Type containing information about the current status of the API. status is always 'ok'.
This is intended to test that you are able to successfully execute GraphQL queries.
"""
type totara_webapi_status {
  """The status of the API (always returns 'ok' if working)."""
  status: String!

  """Timestamp of the request."""
  timestamp(
    """Format of the timestamp in the response."""
    format: core_date_format = TIMESTAMP
  ): core_date
}

"""Section relationship object, used to update section relationships."""
input update_section_relationship_input {
  """ID of the relationship being updated"""
  core_relationship_id: core_id!

  """New value for the can_view option"""
  can_view: Boolean = false

  """New value for the can_answer option"""
  can_answer: Boolean = true
}

"""Update settings input type"""
input update_section_settings_input {
  """ID of the section to update"""
  section_id: core_id!

  """New title for this section"""
  title: String

  """Updated list of relationships for this section"""
  relationships: [update_section_relationship_input!]!
}

type weka_notification_placeholder_placeholder {
  key: String!
  label: String!
}

"""Input for workflow settings."""
input workflow_settings {
  activity_id: core_id!
  close_on_completion: Boolean!
  close_on_due_date: Boolean!
}
